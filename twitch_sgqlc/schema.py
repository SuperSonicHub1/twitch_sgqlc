import sgqlc.types
import sgqlc.types.datetime
import sgqlc.types.relay


schema = sgqlc.types.Schema()


# Unexport Node/PageInfo, let schema re-declare them
schema -= sgqlc.types.relay.Node
schema -= sgqlc.types.relay.PageInfo



########################################################################
# Scalars and Enumerations
########################################################################
class AVCProfile(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BASELINE', 'MAIN', 'HIGH')


class AcceptOrganizationInviteErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INTERNAL_ERROR', 'INVALID_ARGUMENT', 'NOT_FOUND', 'PERMISSION_DENIED', 'MEMBER_INELIGIBLE', 'ALREADY_EXISTS', 'EXCEEDS_MEMBERSHIP_LIMIT')


class AcceptProgramAgreementError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHENTICATED', 'FORBIDDEN', 'INVALID_AGREEMENT_VERSION', 'INTERNAL_ERROR')


class AcceptSquadStreamInvitationErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVITATION_NOT_FOUND', 'SQUAD_NOT_FOUND', 'UNAUTHORIZED', 'INVITATION_CANNOT_BE_ACCEPTED', 'USER_CANNOT_ACCESS_SQUADS')


class AcknowledgePredictionResultErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'NOT_FOUND', 'NOT_RESOLVED', 'UNKNOWN')


class ActivationState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'INACTIVE', 'REJECTED_PERMISSIONS')


class ActivityType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PLAYING', 'STREAMING', 'WATCHING')


class AdPlatform(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('IOS_PHONE', 'IOS_TABLET', 'ANDROID_PHONE', 'ANDROID_TABLET')


class AdRequestContentType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('LIVE', 'VOD')


class AddChannelBlockedTermError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NO_PERMISSIONS', 'DURATION_INVALID')


class AddChannelPermittedTermError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NO_PERMISSIONS', 'DURATION_INVALID')


class AddEditorErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHANNEL_NOT_FOUND', 'TARGET_USER_ALREADY_EDITOR', 'TARGET_USER_NOT_FOUND')


class AddRadioRecentlyPlayedErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_ID', 'PERMISSION_DENIED')


class AddStreamAuthorizedUserErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TARGET_USER_UNRETURNABLE', 'CHANNEL_NOT_FOUND', 'MAX_ACCOUNT_LIMIT', 'PERMISSION_DENIED', 'INVALID_ARGUMENT')


class AdrollType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PREROLL', 'MIDROLL', 'POSTROLL')


class AllocateKeysForBountyErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_ARGUMENT', 'NOT_FOUND', 'UNKNOWN_ERROR')


class ArchiveCommunityPointsCommunityGoalErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NOT_FOUND', 'FORBIDDEN', 'UNKNOWN')


class ArkoseEndpointVersion(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('V1', 'V2')


class AssignExtensionBillingManagerErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FAILED_PRECONDITION', 'MEMBER_INELIGIBLE', 'PERMISSION_DENIED')


class AutoModCaughtMessageCategory(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AGGRESSIVE', 'IDENTITY', 'PROFANITY', 'SEXUAL')


class AutoModCaughtMessageStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PENDING', 'APPROVED', 'ALLOWED', 'DENIED', 'INVALID', 'EXPIRED')


class AutohostSettingsIncomingRaidsPolicy(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'NETWORK', 'ALL')


class AutohostSettingsStrategy(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ORDERED', 'RANDOM')


class Availability(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AWAY', 'BUSY', 'IDLE', 'OFFLINE', 'ONLINE')


class AvailabilityInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ONLINE', 'IDLE', 'OFFLINE')


class BadgeClickAction(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SUBSCRIBE', 'GET_TURBO', 'GET_BITS', 'VISIT_URL')


class BadgeDomain(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CRATE',)


class BadgeImageSize(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NORMAL', 'DOUBLE', 'QUADRUPLE')


class BadgeTierEmotesFilter(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALL', 'LOCKED', 'LOCKED_PREVIEW', 'UNLOCKED', 'HIGHEST_UNLOCKED_AND_NEXT')


class BanUserFromChatRoomErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'TARGET_NOT_FOUND', 'TARGET_IS_SELF', 'TARGET_IS_ANONYMOUS', 'TARGET_IS_MOD', 'TARGET_IS_VIP', 'TARGET_IS_BROADCASTER', 'TARGET_IS_STAFF', 'TARGET_IS_ADMIN', 'TARGET_IS_GLOBAL_MOD', 'TARGET_ALREADY_BANNED', 'DURATION_INVALID')


class BitsBadgeTierNotificationState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SKIPPED', 'SHARED', 'SHOW')


class BitsEventSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AMOUNT', 'DATE')


class BitsEventSortDirection(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DESC', 'ASC')


class BitsEventType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('GIVE_BITS_TO_BROADCASTER', 'USE_BITS_ON_EXTENSION', 'USE_BITS_ON_POLL', 'UNKNOWN')


class BitsOfferType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AD', 'BUNDLE')


class BitsPaymentMethodType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PAYPAL', 'AMAZON_PAY', 'XSOLLA')


class BitsProductProvider(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AMAZON', 'ANDROID', 'IOS', 'PAYPAL', 'XSOLLA')


class BitsProductPurchaseInfoErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INTERNAL_SERVER_ERROR', 'USER_UNAUTHORIZED', 'PRICING_ID_NOT_FOUND', 'UNKNOWN_USER_RESIDENCE', 'BILLING_INFO_NOT_FOUND', 'PURCHASE_INELIGIBLE')


class BitsProductType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PURCHASED_PRODUCT', 'UNKNOWN')


class BitsUserState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NEW_USER', 'ACQUIRED', 'SKIPPED', 'CHEERED', 'UNKNOWN')


class BlockContext(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('WHISPER', 'CHAT')


Boolean = sgqlc.types.Boolean

class BountyBoardUserStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVITED', 'ACCEPTED', 'BANNED', 'NONE')


class BountyCampaignStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PENDING', 'APPROVED', 'REJECTED', 'LIVE', 'COMPLETED')


class BountyCampaignType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PAY_TO_STREAM', 'GAME_TRAILER', 'MISC_TRAILER', 'UNKNOWN')


class BountyCampaignUploadType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BOX_ART', 'COVER')


class BountyKeyProductType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('COUPON', 'DLC', 'GAME', 'GIFTCARD', 'GIVEAWAY', 'IGC', 'OTHER')


class BountyModerationFailReason(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('MINIMUM_TIME_NOT_MET', 'INCORRECT_CONTENT', 'BADMOUTHING', 'OTHER_CONTENT_VISIBLE', 'IDLE', 'NO_VOD', 'OTHER')


class BountyModerationStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PASS', 'PENDING_REVIEW', 'FAIL')


class BountyStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AVAILABLE', 'LIVE', 'COMPLETED', 'CANCELLED')


class BroadcastFormat(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('LIVE', 'DELAY', 'BACKUP_000', 'BACKUP_001', 'BACKUP_002', 'BACKUP_003')


class BroadcastType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ARCHIVE', 'HIGHLIGHT', 'UPLOAD', 'PREMIERE_UPLOAD', 'PAST_PREMIERE')


class CSATActionPrompted(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CLIENT_APP_REGISTER', 'DROP_CREATE_CAMPAIGN', 'DROP_MOVE_STATE_TO_ACTIVE', 'DROP_MOVE_STATE_TO_TESTING', 'EXTENSION_CREATE', 'EXTENSION_STATE_CHANGE', 'GAMES_VIEW_ANALYTICS', 'GAMES_SUBMIT_BOX_ART', 'ORGANIZATION_CREATE', 'ORGANIZATION_ADD_USER')


class CSATRating(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('VERY_DISSATISFIED', 'SOMEWHAT_DISSATISFIED', 'NEUTRAL', 'SOMEWHAT_SATISFIED', 'VERY_SATISFIED')


class CampaignDiscoveryEventType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ENGAGE_COMMAND_CENTER', 'ENGAGE_STREAM')


class CampaignType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DEFAULT', 'MANUAL_TRIGGER_BASED')


class CancelActiveBoostOrdersErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_PARAMETER', 'INTERNAL_ERROR')


class CancelBountyErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_PARAMETER', 'BOUNTY_NOT_LIVE', 'UNKNOWN_ERROR')


class CancelPredictionEventErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'EVENT_ENDED', 'UNKNOWN')


class CancelRaidErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('RAID_DOES_NOT_EXIST', 'INVALID_CHANNEL', 'NO_ACTIVE_RAID')


class CancellationPolicyType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NON_REFUNDABLE', 'REFUNDABLE')


class CaughtMessageStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID', 'ALLOWED', 'DENIED', 'EXPIRED', 'PENDING')


class CelebrationArea(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('EVERYWHERE', 'VIDEO_ONLY', 'VIDEO_AND_PANEL', 'UNKNOWN')


class CelebrationEffect(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FIREWORKS', 'RAIN', 'FLAMETHROWERS', 'UNKNOWN')


class CelebrationErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CELEBRATION_NOT_FOUND', 'CELEBRATION_ALREADY_EXISTS', 'PERMISSION_DENIED', 'OVER_CELEBRATION_LIMIT', 'UNKNOWN')


class CelebrationEventType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BITS_CHEER', 'SUBSCRIPTION_GIFT', 'UNKNOWN')


class CelebrationIntensity(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SMALL', 'MEDIUM', 'LARGE', 'UNKNOWN')


class ChallengeConditionParticipantEndState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PENDING', 'CONDITION_EXPIRED', 'CONDITION_CANCELED', 'CONDITION_SATISFIED', 'EXPIRED', 'CANCELED', 'FAILED_VALIDATION', 'UNKNOWN')


class ChallengeConditionParticipantProcessingState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PENDING', 'SUCCESS', 'ERROR', 'UNKNOWN')


class ChallengeConditionState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'CANCELED', 'INACTIVE', 'EXPIRED', 'UNKNOWN')


class ChallengeEffectType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('USE_BITS', 'UNKNOWN')


class ChangeUsernameErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REAUTH_NEEDED', 'REQUESTS_THROTTLED', 'LOGIN_CHANGE_COOLDOWN', 'LOGIN_UNAVAILABLE', 'LOGIN_TOO_SHORT', 'LOGIN_TOO_LONG', 'LOGIN_CONTAINS_INVALID_CHARACTERS', 'LOGIN_CHANGE_EMAIL_VERIFIED', 'UNKNOWN_ERROR')


class ChanletSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'VIEWER_COUNT')


class ChannelChallengeSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('START_TIME', 'END_TIME')


class ChannelChallengeStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'ACTIVE', 'COMPLETED', 'FAILED', 'TIMED_OUT')


class ChannelPermission(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('MULTIVIEW_ADMIN', 'SET_CHANNEL_RESTRICTION')


class ChannelRestrictionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'SUB_ONLY_LIVE', 'ALL_ACCESS_PASS')


class ChannelUserRole(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BROADCASTER', 'EDITOR', 'MODERATOR', 'SUBSCRIBER', 'REGULAR')


class ChargeModelPlanIntervalUnit(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DAYS', 'MONTHS', 'UNKNOWN')


class ChatPauseSetting(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SCROLL_ONLY', 'MOUSEOVER', 'ALTKEY', 'MOUSEOVER_ALTKEY')


class ChatRestrictedReason(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REQUIRE_VERIFIED_PHONE_NUMBER', 'SUBSCRIBERS_ONLY', 'FOLLOWERS_ONLY', 'VERIFIED_ONLY', 'SLOW_MODE')


class ChatTheme(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DARK', 'LIGHT')


class CheckoutAction(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BLOCK_SAVED_PAYMENT_METHOD', 'EXCEEDED_VELOCITY_LIMITS', 'VERIFIED_SAVED_PAYMENT_METHOD', 'DISABLE_NEW_CREDIT_CARD', 'AUTHORIZED_USER', 'PRIORITIZE_XSOLLA')


class CheermoteTierThreshold(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TIER_1', 'TIER_100', 'TIER_1000', 'TIER_5000', 'TIER_10000')


class CheermoteType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DEFAULT', 'CUSTOM', 'SPONSORED', 'CHARITY', 'FIRST_PARTY', 'THIRD_PARTY', 'DISPLAY_ONLY', 'ANONYMOUS', 'UNKNOWN')


class ClaimBountyErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_PARAMETER', 'BOUNTY_LIMIT_REACHED', 'BOUNTY_ALREADY_CLAIMED', 'UNKNOWN_ERROR')


class ClaimCommunityPointsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NOT_FOUND', 'FORBIDDEN')


class ClaimHint(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AVAILABLE', 'CLAIMED_NO_CONFLICTS', 'CLAIMED_AMAZON_LINK_CONFLICT', 'RECLAIMABLE_NO_CONFLICTS', 'CLAIMED_BY_MEMBER_OF_HOUSEHOLD', 'NEED_PRIME', 'OFFER_FULLY_CLAIMED', 'UNKNOWN')


class ClaimPrimeOfferErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('OFFER_ALREADY_CLAIMED', 'UNKNOWN')


class ClaimableType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BITS_KEY_CODE', 'SUBS_KEY_CODE', 'GIFT_CARD_KEY_CODE')


class ClipCreationState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CREATING', 'CREATED', 'FAILED')


class ClipsFilter(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TRENDING', 'LAST_DAY', 'LAST_WEEK', 'LAST_MONTH', 'ALL_TIME')


class ClipsPeriod(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('LAST_DAY', 'LAST_WEEK', 'LAST_MONTH', 'ALL_TIME')


class ClipsSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CREATED_AT_ASC', 'CREATED_AT_DESC', 'VIEWS_ASC', 'VIEWS_DESC', 'TRENDING')


class CloneExtensionDiscoveryDataError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'INVALID_NEW_VERSION', 'VERSION_NOT_FOUND')


class CloneExtensionManifestError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'INVALID_NEW_VERSION', 'VERSION_ALREDY_EXISTS', 'VERSION_NOT_FOUND')


class CloudBroadcastState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('OFFLINE', 'PENDING', 'ONLINE', 'UNKNOWN')


class CollectionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SERIES', 'DEFAULT')


class CommunityPointsAutomaticRewardType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SINGLE_MESSAGE_BYPASS_SUB_MODE', 'RANDOM_SUB_EMOTE_UNLOCK', 'CHOSEN_SUB_EMOTE_UNLOCK', 'SEND_HIGHLIGHTED_MESSAGE', 'CHOSEN_MODIFIED_SUB_EMOTE_UNLOCK')


class CommunityPointsCommunityGoalStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNSTARTED', 'STARTED', 'ENDED', 'FULFILLED', 'ARCHIVED', 'UNKNOWN')


class CommunityPointsCommunityGoalType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CREATOR', 'BOOST', 'UNKNOWN')


class CommunityPointsContentType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'AUTOMATIC_REWARD', 'CUSTOM_REWARD')


class CommunityPointsCustomRewardRedemptionQueueSortOrder(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('OLDEST', 'NEWEST')


class CommunityPointsCustomRewardRedemptionStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNFULFILLED', 'FULFILLED', 'CANCELED', 'REPORTED')


class CommunityPointsCustomRewardTemplateCollectionCategory(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'GAME', 'IRL', 'TWITCH')


class CommunityPointsMultiplierReason(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SUB_T1', 'SUB_T2', 'SUB_T3')


class CommunityPointsUnlockEmoteErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_EMOTE', 'EMOTE_ALREADY_ENTITLED', 'NO_EMOTES_AVAILABLE', 'INSUFFICIENT_POINTS', 'TRANSACTION_ALREADY_COMMITTED', 'TRANSACTION_IN_PROGRESS', 'REWARD_COST_MISMATCH', 'REWARD_DISABLED', 'REWARD_FORBIDDEN', 'UNKNOWN')


class CommunityPointsUpdateCustomRewardRedemptionStatusesMethod(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'BY_CHANNEL', 'BY_REWARD', 'BY_REDEMPTIONS')


class CompetitionAutomodField(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('COMPETITION_NAME', 'PCI_DISCORD', 'PCI_EMAIL', 'POCI_DISCORD', 'POCI_EMAIL', 'IMAGE_URL', 'BANNER_IMAGE_URL', 'TERMS_URL', 'DESCRIPTION', 'RULES', 'PRIZE', 'PLAYER_DISCORD_USERNAME', 'PLAYER_IN_GAME_USERNAME', 'TEAM_NAME', 'UNKNOWN')


class CompetitionErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REQUIRED_ARGUMENT', 'INVALID_ARGUMENT', 'ALREADY_EXISTS', 'LIMIT_REACHED', 'AUTOMOD_FAILED', 'UNKNOWN')


class CompetitionImageType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BANNER', 'THUMBNAIL', 'UNKNOWN')


class CompetitionParticipantType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TEAM', 'SOLO', 'UNKNOWN')


class CompetitionPhaseType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DOUBLE_ELIMINATION_WINNERS', 'DOUBLE_ELIMINATION_LOSERS', 'NOT_APPLICABLE', 'UNKNOWN')


class CompetitionPlayerState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVITED', 'REGISTERED', 'CHECKED_IN', 'COMPETED', 'DECLINED', 'UNKNOWN')


class CompetitionState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UPCOMING', 'PAST', 'LIVE', 'CHECK_IN', 'READY', 'UNKNOWN')


class CompetitionUploadImageErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REQUIRED_ARGUMENT', 'INVALID_ARGUMENT', 'UNKNOWN')


class CompetitionVisibilityState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PRIVATE', 'PUBLIC', 'UNKNOWN')


class ConsentStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('GIVEN', 'DENIED')


class ContentType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CLIP', 'USER', 'LIVE_CHANNEL', 'VOD', 'CATEGORY')


class ContributeCommunityPointsCommunityGoalErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NOT_CURRENTLY_REDEEMABLE', 'NOT_ENOUGH_POINTS', 'NOT_FOUND', 'FORBIDDEN', 'MAX_PER_STREAM', 'TRANSACTION_IN_PROGRESS', 'DUPLICATE_TRANSACTION', 'USER_BANNED', 'UNKNOWN')


class ContributeToChallengeErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHALLENGE_NOT_FOUND', 'CHALLENGE_NOT_ACTIVE', 'INVALID_CHANNEL_ID', 'INSUFFICIENT_BITS_BALANCE', 'USER_FORBIDDEN', 'UNKNOWN')


class CreateBadgeFlairErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_CHANNEL_ID', 'INVALID_FLAIR_IMAGE_1X_ID', 'INVALID_FLAIR_IMAGE_2X_ID', 'INVALID_FLAIR_IMAGE_4X_ID', 'INVALID_TIER')


class CreateChallengeConditionErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BITS_RECIPIENT_INELIGIBLE', 'UNKNOWN')


class CreateChallengeConditionParticipantErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BITS_BENEFACTOR_INELIGIBLE', 'INSUFFICIENT_BITS_BALANCE', 'CONDITION_NOT_ACTIVE', 'CONDITION_NOT_FOUND', 'EFFECT_TYPE_UNSUPPORTED_BY_CONDITION', 'UNKNOWN')


class CreateClipErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHANNEL_NOT_CLIPPABLE', 'CHANNEL_BANNED', 'USER_BANNED', 'USER_TIMED_OUT', 'CHANNEL_NOT_LIVE', 'REQUEST_THROTTLED', 'USER_RESTRICTED', 'UNKNOWN')


class CreateCommunityPointsCommunityGoalErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DUPLICATE_GOAL', 'TITLE_AUTOMOD_FAILED', 'TITLE_INVALID', 'DESCRIPTION_AUTOMOD_FAILED', 'DESCRIPTION_INVALID', 'GOAL_AMOUNT_INVALID', 'DURATION_INVALID', 'BACKGROUND_COLOR_INVALID', 'TOO_MANY_GOALS', 'FORBIDDEN', 'UNKNOWN')


class CreateCommunityPointsCustomRewardErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'FORBIDDEN', 'TITLE_AUTOMOD_FAILED', 'PROMPT_AUTOMOD_FAILED', 'COST_INVALID', 'MAX_PER_STREAM_INVALID', 'TOO_MANY_REWARDS', 'TITLE_INVALID', 'DUPLICATE_REWARD', 'BACKGROUND_COLOR_INVALID', 'TEMPLATE_INVALID', 'MAX_PER_USER_PER_STREAM_INVALID', 'GLOBAL_COOLDOWN_INVALID')


class CreateCommunityPointsImageUploadInfoErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'MORE_THAN_ONE_TYPE', 'CUSTOM_REWARD_NOT_FOUND')


class CreateDropImageUploadURLErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('USER_UNAUTHORIZED', 'SERVICE_DEPENDENCY_FAILURE', 'UNKNOWN')


class CreateExtensionClientError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_NAME', 'NAME_IN_USE')


class CreateExtensionImageUploadInfoErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'INVALID_VERSION', 'NOT_ENOUGH_UPLOAD_DISCOVERY_IMAGE', 'NOT_ENOUGH_UPLOAD_LOGO_IMAGE', 'NOT_ENOUGH_UPLOAD_SCREENSHOT_IMAGE', 'NOT_ENOUGH_UPLOAD_TASKBAR_IMAGE', 'TOO_MANY_UPLOAD_DISCOVERY_IMAGE', 'TOO_MANY_UPLOAD_LOGO_IMAGE', 'TOO_MANY_UPLOAD_SCREENSHOT_IMAGE', 'TOO_MANY_UPLOAD_TASKBAR_IMAGE')


class CreateExtensionZipUploadInfoError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'INVALID_VERSION')


class CreateGameApplicationErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('GAME_HAS_ALREADY_BEEN_OWNED', 'PERMISSION_DENIED', 'INTERNAL_ERROR')


class CreateLoyaltyBadgeResponseCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ERR_INVALID_USER', 'ERR_INVALID_BADGE_IMAGE_1X_ID', 'ERR_INVALID_BADGE_IMAGE_2X_ID', 'ERR_INVALID_BADGE_IMAGE_4X_ID', 'ERR_INVALID_BADGE_REQUIRED_TENURE_MONTHS', 'ERR_BADGE_EXISTS', 'ERR_BADGE_TIMEOUT', 'ERR_UNKNOWN')


class CreateLoyaltyBadgeUploadConfigResponseCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ERR_INVALID_USER', 'ERR_INVALID_BADGE_SIZE', 'ERR_UNKNOWN')


class CreateOrganizationApplicationErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INTERNAL_ERROR', 'INVALID_ARGUMENT')


class CreateOrganizationInviteErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INTERNAL_ERROR', 'INVALID_ARGUMENT', 'ALREADY_EXISTS', 'PERMISSION_DENIED', 'USER_NOT_FOUND', 'MEMBER_INELIGIBLE')


class CreateOrganizationJWTErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PERMISSION_DENIED', 'INVALID_ARGUMENT')


class CreateOrganizationMemberErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALREADY_EXISTS', 'PERMISSION_DENIED', 'USER_NOT_FOUND', 'MEMBER_INELIGIBLE')


class CreatePollErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AUTOMOD_FAILED', 'POLL_ALREADY_ACTIVE', 'CHANNEL_NOT_BITS_ENABLED', 'UNKNOWN')


class CreatePredictionEventErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'AUTOMOD_FAILED', 'EVENT_ALREADY_ACTIVE', 'CHANNEL_POINTS_NOT_ENABLED', 'COLORS_NOT_UNIQUE', 'NOT_ENOUGH_OUTCOMES', 'TOO_MANY_OUTCOMES', 'INVALID_PREDICTION_WINDOW', 'UNKNOWN')


class CreateRaidErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALREADY_RAIDING', 'CANNOT_RAID_YOURSELF', 'CANNOT_RAID_THIS_CHANNEL', 'INVALID_CHANNEL', 'TOO_MANY_VIEWERS_TO_RAID')


class CreateRoomErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NAME_LENGTH_INVALID', 'NAME_CONTAINS_INVALID_CHARACTERS', 'NAME_INAPPROPRIATE', 'NAME_NOT_UNIQUE', 'TOPIC_LENGTH_INVALID', 'TOPIC_INAPPROPRIATE', 'MAX_ROOMS_LIMIT_EXCEEDED', 'ROLES_INVALID')


class CreateScheduleError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALREADY_EXISTS', 'PERMISSION_DENIED')


class CreateScheduleSegmentErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PERMISSION_DENIED', 'NOT_FOUND', 'INVALID_CATEGORY_COUNT', 'OVERLAPPING_SEGMENTS', 'INVALID_TITLE', 'TITLE_FAILED_MODERATION', 'INVALID_TIMEZONE', 'INVALID_CATEGORIES', 'INVALID_START_DAY', 'INVALID_START_HOUR', 'INVALID_START_MINUTE', 'INVALID_DURATION', 'INVALID_SEGMENT', 'INVALID_ARGUMENT', 'INVALID_SEGMENT_COUNT', 'REPEAT_ENDS_AFTER_COUNT_INVALID')


class CreateSocialMediaError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FAILED_TITLE_MODERATION', 'TITLE_TOO_LONG', 'INVALID_URL', 'TOO_MANY')


class CreateSquadStreamInvitationErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SQUAD_FULL', 'USER_CANNOT_ACCESS_SQUADS', 'USER_ALREADY_IN_SQUAD', 'INVITATION_ALREADY_EXISTS', 'INVITATION_BLOCKED', 'INVITATION_INVALID', 'UNAUTHORIZED')


class CreateUnbanRequestErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALREADY_CREATED', 'NOT_BANNED', 'TOO_SOON_SINCE_BAN', 'UNBAN_REQUESTS_DISABLED', 'UNKNOWN')


class CreateVideoBookmarkErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BROADCASTER_NOT_LIVE', 'ARCHIVES_DISABLED', 'BROADCAST_FORMAT_INVALID_RERUN', 'BROADCAST_FORMAT_INVALID_PREMIERE', 'VOD_NOT_READY', 'INTERNAL_SERVER_ERROR', 'USER_UNAUTHORIZED', 'MAX_DESCRIPTION_LENGTH_EXCEEDED')


class CreatorBadgeFlairSetting(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'DEFAULT', 'CUSTOM')


class CreatorBadgeFlairTier(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TIER_2', 'TIER_3')


class CreatorReferralTrend(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('POSITIVE', 'NEUTRAL', 'NEGATIVE')


class CreditType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NO_CREDIT_TYPE', 'SUB_TOKEN')


class Currency(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AFN', 'EUR', 'ALL', 'DZD', 'USD', 'AOA', 'XCD', 'ARS', 'AMD', 'AWG', 'AUD', 'AZN', 'BSD', 'BHD', 'BDT', 'BBD', 'BYN', 'BZD', 'XOF', 'BMD', 'INR', 'BTN', 'BOB', 'BOV', 'BAM', 'BWP', 'NOK', 'BRL', 'BND', 'BGN', 'BIF', 'CVE', 'KHR', 'XAF', 'CAD', 'KYD', 'CLP', 'CLF', 'CNY', 'COP', 'COU', 'KMF', 'CDF', 'NZD', 'CRC', 'HRK', 'CUP', 'CUC', 'ANG', 'CZK', 'DKK', 'DJF', 'DOP', 'EGP', 'SVC', 'ERN', 'ETB', 'FKP', 'FJD', 'XPF', 'GMD', 'GEL', 'GHS', 'GIP', 'GTQ', 'GBP', 'GNF', 'GYD', 'HTG', 'HNL', 'HKD', 'HUF', 'ISK', 'IDR', 'IRR', 'IQD', 'ILS', 'JMD', 'JPY', 'JOD', 'KZT', 'KES', 'KRW', 'KWD', 'KGS', 'LAK', 'LBP', 'LSL', 'ZAR', 'LRD', 'LYD', 'CHF', 'MOP', 'MKD', 'MGA', 'MWK', 'MYR', 'MVR', 'MRU', 'MUR', 'XUA', 'MXN', 'MXV', 'MDL', 'MNT', 'MAD', 'MZN', 'MMK', 'NAD', 'NPR', 'NIO', 'NGN', 'OMR', 'PKR', 'PAB', 'PGK', 'PYG', 'PEN', 'PHP', 'PLN', 'QAR', 'RON', 'RUB', 'RWF', 'SHP', 'WST', 'STN', 'SAR', 'RSD', 'SCR', 'SLL', 'SGD', 'XSU', 'SBD', 'SOS', 'SSP', 'LKR', 'SDG', 'SRD', 'SZL', 'SEK', 'CHE', 'CHW', 'TWD', 'TJS', 'TZS', 'THB', 'TOP', 'TTD', 'TND', 'TRY', 'TMT', 'UGX', 'UAH', 'AED', 'UYU', 'UYI', 'UYW', 'UZS', 'VUV', 'VES', 'VND', 'YER', 'ZMW', 'ZWL')


class Cursor(sgqlc.types.Scalar):
    __schema__ = schema


class DashboardActivityFeedActivityAlertStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FAILED', 'OFFLINE', 'PLAYED', 'PLAYING', 'QUEUED', 'REJECTED', 'SKIPPED', 'PURGED')


class DeclineOrganizationInviteErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INTERNAL_ERROR', 'NOT_FOUND', 'PERMISSION_DENIED')


class DeleteAllChannelVideosStatusCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SUCCESS', 'FORBIDDEN', 'INTERNAL_ERROR', 'INVALID_ARGUMENT', 'UNKNOWN')


class DeleteChannelBlockedTermErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NO_PERMISSIONS',)


class DeleteChannelPermittedTermErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NO_PERMISSIONS',)


class DeleteChatMessageStatusCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SUCCESS', 'SUCCESS_STAFF', 'FORBIDDEN', 'TARGET_IS_BROADCASTER', 'TARGET_IS_MODERATOR')


class DeleteCheermoteTierErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PERMISSION_DENIED', 'UNKNOWN')


class DeleteCommunityPointsCommunityGoalErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NOT_FOUND', 'FORBIDDEN', 'UNKNOWN')


class DeleteCommunityPointsCustomRewardErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'FORBIDDEN', 'NOT_FOUND')


class DeleteEmoteErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('EMOTE_NOT_FOUND', 'PERMISSION_DENIED', 'UNKNOWN')


class DeleteExtensionError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('MISSING_EXTENSION_ID', 'EXTENSION_NOT_FOUND', 'UNAUTHORIZED')


class DeleteExtensionImageError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'INVALID_VERSION', 'CANNOT_FIND_URL_IN_MANIFEST', 'INVALID_IMAGE_URL')


class DeleteExtensionSecretsError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED',)


class DeleteScheduleError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PERMISSION_DENIED',)


class DeleteScheduleSegmentError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PERMISSION_DENIED',)


class DeleteSquadStreamInvitationErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVITATION_NOT_FOUND', 'SQUAD_NOT_FOUND', 'UNAUTHORIZED', 'INVITATION_CANNOT_BE_DELETED')


class DeleteStreamAuthorizedUserErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TARGET_USER_UNRETURNABLE', 'CHANNEL_NOT_FOUND', 'MAX_ACCOUNT_LIMIT', 'PERMISSION_DENIED', 'INVALID_ARGUMENT')


class DeletedMessageDisplaySetting(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('LEGACY', 'BRIEF', 'DETAILED')


class DirectoryType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('GAME',)


class DisableTwoFactorErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REAUTH_NEEDED', 'UNKNOWN_ERROR')


class DisableUserAccountErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_USER_ID', 'UNAUTHORIZED')


class DiscountType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PERCENT_OFF',)


class DismissRitualTokenErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TOKEN_NOT_AVAILABLE', 'TOKEN_NOT_FOUND')


class DropActionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN_ACTION_TYPE', 'USER_CLAIM_FLOW')


class DropCampaignStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'EXPIRED', 'TEST', 'UPCOMING', 'DISABLED')


class DropEventConditionOperator(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'SMALLER', 'SMALLER_EQUAL', 'EQUAL', 'GREATER', 'GREATER_EQUAL')


class DropImageType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('LINK_NOTIFICATION', 'ITEM')


class DropInstanceEligibilityStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ELIGIBLE_FOR_ALL', 'LIMITED', 'ENTITLEMENT_LIMIT_REACHED', 'DROP_INSTANCE_ALREADY_CLAIMED', 'EXPIRED', 'UNKNOWN')


class DropRewardAvailability(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AVAILABLE', 'LIMIT_REACHED', 'UNKNOWN')


class DropRuleType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('EVENT_BASED', 'TIME_BASED', 'MANUAL_TRIGGER_BASED')


class DropsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'UNAUTHORIZED', 'INVALID_ARGUMENT', 'FAILED_PRECONDITION', 'NOT_FOUND', 'ALREADY_EXISTS')


class Duration(sgqlc.types.Scalar):
    __schema__ = schema


class EligiblePaymentMethodName(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AMAZON_PAY', 'PAYPAL', 'CREDIT_CARD', 'XSOLLA', 'WALLET', 'DIRECT_DEBIT')


class EmoteAssetType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ANIMATED', 'STATIC', 'UNKNOWN')


class EmoteImageSize(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SIZE_1X', 'SIZE_2X', 'SIZE_4X', 'SIZE_ORIGINAL')


class EmoteResizePlan(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AUTO_RESIZE', 'NO_RESIZE')


class EmoteSetDomain(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CRATE',)


class EmoteState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'PENDING', 'INACTIVE', 'UNKNOWN')


class EmoteStateFilter(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALL', 'ACTIVE')


class EmoteType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHANNEL_POINTS', 'BITS_BADGE_TIERS', 'SUBSCRIPTIONS', 'PRIME', 'TURBO', 'TWO_FACTOR', 'SMILIES', 'GLOBALS', 'LIMITED_TIME', 'HYPE_TRAIN', 'MEGA_COMMERCE', 'UNKNOWN')


class EmoticonPrefixState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'UNSET', 'ACTIVE', 'REJECTED', 'PENDING')


class ExtensionAnchor(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('COMPONENT', 'HIDDEN', 'PANEL', 'VIDEO_OVERLAY')


class ExtensionBitsSupportLevel(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'OPTIONAL', 'REQUIRED')


class ExtensionCategorySortKey(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('MANUAL', 'POPULARITY', 'TIME')


class ExtensionCategoryType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CURATED', 'DEVELOPER', 'PSEUDO')


class ExtensionConfigurationLocation(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'HOSTED', 'CUSTOM')


class ExtensionLinkUserErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'BAD_REQUEST', 'UNKNOWN')


class ExtensionRatingLocation(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NOTIFICATION',)


class ExtensionRequiredActionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PROMPT_FOR_PERMISSIONS', 'REQUIRES_CONFIGURATION')


class ExtensionState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('IN_TEST', 'READY_FOR_REVIEW', 'IN_REVIEW', 'REJECTED', 'APPROVED', 'RELEASED', 'DEPRECATED', 'PENDING_ACTION', 'UPLOADING', 'ASSETS_UPLOADED', 'DELETED')


class ExtensionStateFilter(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('RELEASED',)


class ExtensionSubscriptionsSupportLevel(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'OPTIONAL')


Float = sgqlc.types.Float

class FollowUserErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'TOO_MANY_FOLLOWS')


class FollowedGamesType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('LIVE', 'ALL')


class FollowsFilter(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALL', 'SUBBABLE')


class FormatType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DOUBLE_ELIM', 'SINGLE_ELIM', 'ROUND_ROBIN', 'LEADERBOARD', 'CUSTOM', 'UNKNOWN')


class FriendSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ASC', 'DESC')


class GameSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('VIEWER_COUNT', 'RELEVANCE')


class GenerateSecondFactorQRCodeErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REAUTH_NEEDED', 'NO_TWO_FACTOR', 'REQUEST_THROTTLED', 'USER_NOT_FOUND', 'UNKNOWN_ERROR')


class GetExtensionSecretsError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_CLIENT', 'UNAUTHORIZED', 'INTERNAL')


class GiftType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SINGLE_RECIPIENT', 'COMMUNITY')


class GoRaidErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_CHANNEL', 'NO_ACTIVE_RAID')


class GrantType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AUTHORIZATION_CODE', 'REFRESH_TOKEN')


class GrantVIPErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHANNEL_NOT_FOUND', 'FORBIDDEN', 'GRANTEE_ALREADY_VIP', 'GRANTEE_CHAT_BANNED', 'GRANTEE_NOT_FOUND', 'MAX_VIPS_REACHED', 'VIP_ACHIEVEMENT_INCOMPLETE')


class Granularity(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FIVE_MINUTE', 'TWENTY_MINUTE', 'FORTY_MINUTE', 'DAY', 'WEEK', 'MONTH')


class HeroPreset(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PRESET_1', 'PRESET_2')


class HostTargetChannelErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TARGET_CHANNEL_ALREADY_HOSTED', 'UNHOSTABLE_CHANNEL', 'TARGET_CHANNEL_IN_BAD_STANDING', 'CANNOT_HOST_SELF')


class HypeTrainConductorType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CURRENT', 'FORMER', 'UNKNOWN')


class HypeTrainDifficulty(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('EASY', 'MEDIUM', 'HARD', 'SUPER_HARD', 'INSANE', 'UNKNOWN')


class HypeTrainEndReason(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('EXPIRED', 'IN_PROGRESS', 'COMPLETED', 'UNKNOWN')


class HypeTrainEventType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('HYPE_TRAIN_STARTED', 'HYPE_TRAIN_ENDED', 'HYPE_TRAIN_COOL_DOWN_EXPIRED')


class HypeTrainParticipationAction(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHEER', 'BITS_ON_EXTENSION', 'POLLS', 'TIER_1_SUB', 'TIER_2_SUB', 'TIER_3_SUB', 'TIER_1_GIFTED_SUB', 'TIER_2_GIFTED_SUB', 'TIER_3_GIFTED_SUB', 'UNKNOWN')


class HypeTrainParticipationSource(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BITS', 'SUBS', 'UNKNOWN')


class HypeTrainRewardType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('EMOTE', 'BADGE', 'UNKNOWN')


ID = sgqlc.types.ID

class IncomingRaidsPolicy(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'NETWORK', 'ALL')


class IngestStreamHealthReason(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'ALL_GOOD', 'INCOMP_AUDIO_CODEC', 'INCOMP_VIDEO_CODEC', 'INCOMP_MP3_DEPRECATED', 'HIGH_BITRATE', 'DROPPED_FRAMES', 'STARVATION', 'HIGH_KEY_FRAME_INTERVAL')


class IngestStreamHealthStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNWON', 'OK', 'WARN', 'UNSTABLE', 'UNKNOWN')


class InstallExtensionErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'INVALID_CHANNEL_ID')


Int = sgqlc.types.Int

class InterruptScheduleErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'NOT_FOUND', 'END_TOO_FAR_IN_FUTURE', 'INVALID_ARGUMENT')


class KeyBatchStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'INACTIVE', 'INVALIDATED')


class KeyPoolStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'INACTIVE', 'INVALIDATED')


class Language(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AR', 'ASL', 'BG', 'CA', 'CS', 'DA', 'DE', 'EL', 'EN', 'ES', 'FI', 'FR', 'HI', 'HU', 'ID', 'IT', 'JA', 'KO', 'MS', 'NL', 'NO', 'OTHER', 'PL', 'PT', 'RO', 'RU', 'SK', 'SV', 'TH', 'TL', 'TR', 'UK', 'VI', 'ZH', 'ZH_HK')


class LanguageTag(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AR', 'BG', 'CS', 'DA', 'DE', 'EL', 'EN', 'EN_GB', 'ES', 'ES_MX', 'FI', 'FR', 'HI', 'HU', 'IT', 'JA', 'KO', 'NL', 'NO', 'PL', 'PT', 'PT_BR', 'RO', 'RU', 'SK', 'SV', 'TH', 'TR', 'VI', 'ZH_CN', 'ZH_TW', 'ZH')


class LeaderboardTimePeriodType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DAY', 'WEEK', 'MONTH', 'ALLTIME')


class LeaderboardType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHEER', 'SUBGIFT')


class LeaveSquadStreamErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('USER_NOT_IN_SQUAD', 'UNAUTHORIZED')


class LinkSSOErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CODE_INCORRECT', 'CODE_EXPIRED', 'ALREADY_LINKED')


class LinkType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NO_LINK', 'CATEGORIES_DIRECTORY', 'STREAMS_DIRECTORY')


class LobbyState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PREP', 'READY', 'ACTIVE', 'DONE', 'UNKNOWN')


class LockPredictionEventErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'EVENT_NOT_ACTIVE', 'UNKNOWN')


class MakePredictionErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'NOT_FOUND', 'EVENT_NOT_ACTIVE', 'DUPLICATE_TRANSACTION', 'TRANSACTION_IN_PROGRESS', 'NOT_ENOUGH_POINTS', 'MAX_POINTS_PER_EVENT', 'MULTIPLE_OUTCOMES', 'UNKNOWN')


class ManuallyTriggerDropResultStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SUCCESS', 'VERIFICATION_FAILURE', 'ERROR')


class MemberMetricsRevealedParams(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'STATS', 'REVENUE', 'STATS_AND_REVENUE')


class ModLogsAccessLevel(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'READ', 'WRITE')


class ModLogsAction(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_ACTION', 'BAN_USER', 'TIMEOUT_USER', 'UNBAN_USER', 'SET_CHANNEL_MODE', 'CHANGE_CHANNEL_RULES', 'ALLOW_MESSAGE', 'DENY_MESSAGE', 'UPDATE_MODERATED_TERMS', 'COMMENT', 'UNTIMEOUT_USER')


class ModUserErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'TARGET_NOT_FOUND', 'CHANNEL_NOT_FOUND', 'TARGET_IS_CHAT_BANNED', 'TARGET_ALREADY_MOD')


class ModerationAction(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AUTOMOD_LEVEL_CHANGE', 'ALLOW_MESSAGE', 'APPROVE_UNBAN_REQUEST', 'BAN_USER', 'BLOCKED_TERM_ADD', 'BLOCKED_TERM_REMOVE', 'CHAT_CLEAR', 'COMMENT', 'DELETE_MESSAGE', 'DENY_MESSAGE', 'DENY_UNBAN_REQUEST', 'EMOTES_ONLY_OFF', 'EMOTES_ONLY_ON', 'FOLLOWERS_ONLY_OFF', 'FOLLOWERS_ONLY_ON', 'HOST', 'INVALID_ACTION', 'UNMOD_USER', 'MOD_USER', 'PERMITTED_TERM_ADD', 'PERMITTED_TERM_REMOVE', 'RAID', 'SLOW_OFF', 'SLOW_ON', 'SUBS_ONLY_OFF', 'SUBS_ONLY_ON', 'TIMEOUT_USER', 'UNBAN_USER', 'UNHOST', 'UNIQUE_OFF', 'UNIQUE_ON', 'UNRAID', 'UNTIMEOUT_USER', 'UNVIP_USER', 'VIP_USER')


class OAuthAppCategory(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('GAME_INTEGRATION', 'WEBSITE_INTEGRATION', 'APPLICATION_INTEGRATION', 'BROWSER_EXTENSION', 'BROADCASTER_SUITE', 'CHAT_BOT', 'GIVEAWAY_LOYALTY_TOOL', 'ANALYTICS_TOOL', 'OTHER')


class OfferDeliveryMethod(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CLAIM_CODE', 'DIRECT_ENTITLEMENT', 'SES_ENTITLEMENT', 'EXTERNAL', 'EXTERNAL_OFFER')


class OfferIneligibilityReasonCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALREADY_PURCHASED', 'COULD_NOT_VERIFY', 'MAX_TOKEN_BALANCE', 'NONE', 'OTHER')


class OfferPlatform(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('WEB', 'IOS', 'ANDROID', 'DESKTOP')


class OfferPurchaseType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DEFAULT_PURCHASE', 'UPGRADE_RECURRING_SUB_TIER', 'DOWNGRADE_RECURRING_SUB_TIER', 'FUTURE_PURCHASE')


class OfferState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('EXPIRED', 'LIVE', 'FUTURE')


class OfferStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNSEEN', 'SEEN', 'CLAIMED', 'DISMISSED', 'OVERRIDDEN', 'ERROR')


class OnsiteNotificationDisplayType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('VIEWER', 'CREATOR')


class OnsiteNotificationRenderStyle(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DEFAULT', 'TWO_BUTTONS')


class OnsiteNotificationsCapability(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('HOMEPAGE', 'CHANNEL_PAGE', 'NOTIFICATION_SETTINGS_PAGE', 'BROADCASTER_DASHBOARD', 'BROWSE_GAME', 'EXTERNAL_LINK', 'WEB_ONLY', 'WHISPER_THREAD', 'FRIEND_REQUEST', 'HOT_CLIP', 'HOT_CLIP_FOLLOWER', 'VOD_UPLOAD', 'VOD_COMMENT', 'VOD_COMMENT_MOD', 'VOD_COMMENT_REPLY', 'SUB_GIFT_RECEIVED', 'DROPS_AVAILABLE', 'COMMUNITY_GUIDELINES_CHANGE', 'SMART_ANNOUNCEMENT', 'AFFILIATE_INVITE')


class OrganizationAppilcationStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PENDING', 'REJECTED', 'APPROVED', 'DELETED')


class OrganizationMemberRole(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ADMINISTRATOR', 'DEVELOPER', 'MANAGER', 'MARKETER', 'OWNER', 'BILLING_MANAGER', 'SHADOW_ACCOUNT')


class OrganizationType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('GAME_DEVELOPER', 'GAME_PUBLISHER', 'OTHER', 'BRANDS_ADVERTISING', 'BROADCASTER_TOOLS')


class PanelType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DEFAULT', 'EXTENSION')


class PasswordStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NOT_EVALUATED', 'VALID', 'INVALID', 'UNKNOWN')


class PayItForwardTreatmentType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('THANK', 'GIFT')


class PaymentCardType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('VISA', 'MASTERCARD', 'AMERICAN_EXPRESS', 'DISCOVER')


class PaymentInstrumentType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CREDIT_CARD', 'AMAZON', 'PAYPAL', 'GOOGLE_IAB', 'APPLE_IAP', 'SKRILL', 'YANDEX', 'WEBMONEY', 'UNKNOWN', 'WALLET', 'DIRECT_DEBIT')


class PaymentMethodAvailabilityStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AVAILABLE', 'DEGRADED', 'FULL_OUTAGE')


class PaymentProvider(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'PAYPAL', 'PAYPAL_RT', 'RECURLY', 'XSOLLA', 'XSOLLA_V3', 'ZUORA', 'PRIME', 'GOOGLE_IAB', 'APPLE_IAP', 'SUB_TOKEN')


class PaymentScheme(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SEPA', 'BACS')


class PaymentTransactionSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PRICE_DESC', 'PRICE_ASC', 'PURCHASE_DATE_DESC', 'PURCHASE_DATE_ASC')


class PaymentTransactionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SUBSCRIPTION', 'BITS', 'SUB_TOKEN', 'GIFT_CARD', 'CELEBRATION', 'UNKNOWN')


class PaymentTransactionTypeFilter(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SUBSCRIPTIONS', 'SUB_TOKEN', 'ALL')


class PayoutCategory(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AFFILIATE', 'EXTENSIONS_DEVELOPER', 'PARTNER')


class PayoutOnboardingCategory(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AFFILIATE', 'STANDARD_PARTNER', 'PREMIUM_PARTNER', 'CUSTOM_PARTNER', 'EXTENSIONS_DEVELOPER', 'UNPAID_PARTNER')


class PayoutOnboardingStep(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REGISTRATION_NOT_STARTED', 'AGREEMENT_NOT_STARTED', 'ROYALTY_TAX_INTERVIEW_NOT_STARTED', 'ROYALTY_TAX_INTERVIEW_PENDING', 'ROYALTY_TAX_INTERVIEW_ACTION_REQUIRED', 'ROYALTY_TAX_INTERVIEW_MISMATCH', 'ROYALTY_TAX_INTERVIEW_FAILED', 'SERVICE_TAX_INTERVIEW_NOT_STARTED', 'SERVICE_TAX_INTERVIEW_PENDING', 'SERVICE_TAX_INTERVIEW_ACTION_REQUIRED', 'SERVICE_TAX_INTERVIEW_MISMATCH', 'SERVICE_TAX_INTERVIEW_FAILED', 'PAYOUT_METHOD_NOT_STARTED', 'PAYOUT_METHOD_PENDING', 'REVIEW_PENDING', 'COMPLETED', 'CANCELED', 'AGREEMENT_PENDING_UPGRADE')


class PayoutPlanTag(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('STANDARD', 'PREMIUM', 'CUSTOM', 'LEGACY', 'ESPORTS')


class PendingSubType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('GIFT_TO_PAID', 'DNR_TO_RESUB_RECURRING', 'DNR_TO_RESUB_NONRECURRING', 'PRIME_TO_PAID')


class PermanentEmoteModifier(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'BLACK_WHITE', 'HORIZONTAL_FLIP', 'SUNGLASSES', 'THINKING', 'SQUISHED')


class PersonalSectionChannelLabel(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'RECOMMENDED', 'SIMILAR', 'FOLLOWED', 'POPULAR')


class PersonalSectionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FOLLOWED_SECTION', 'RECOMMENDED_SECTION', 'POPULAR_SECTION', 'SIMILAR_SECTION')


class PhaseState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNSTARTED', 'PLAYING', 'FINISHED', 'UNKNOWN')


class PlatformType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('all', 'ps4', 'xbox')


class PollSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('START_TIME',)


class PollStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'ACTIVE', 'COMPLETED', 'TERMINATED', 'ARCHIVED', 'MODERATED')


class PollVoterConnectionSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('VOTES', 'CREATED_DATE', 'BITS', 'CHANNEL_POINTS')


class PollVoterConnectionSortDirection(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DESC', 'ASC')


class PredictionEventStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'LOCKED', 'RESOLVE_PENDING', 'RESOLVED', 'CANCEL_PENDING', 'CANCELED')


class PredictionOutcomeColor(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BLUE', 'PINK', 'GREEN', 'ORANGE', 'GREY', 'PURPLE')


class PredictionResult(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('LOSE', 'REFUND', 'WIN')


class PremiereStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNSCHEDULED', 'SCHEDULED', 'CANCELLED', 'STARTED', 'SUCCESS', 'FAILED', 'UNKNOWN')


class PresignDevInsightsReportURLDomain(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('GAME', 'EXTENSION', 'DROP')


class PresignDevInsightsReportURLReportType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('OVERVIEW_V2', 'DROPS_CAMPAIGNS_TOP_STREAMERS', 'DROPS_CAMPAIGNS_OVERVIEW', 'DROPS_CAMPAIGNS_DROPS_OVERVIEW')


class PrimeEmoticonsSetName(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ROBOTS', 'PURPLE', 'MONKEYS')


class PrivacyLawName(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CCPA', 'GDPR', 'ROW')


class ProductPurchaseErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('USER_UNAUTHORIZED', 'PRICING_ID_NOT_FOUND', 'UNKNOWN_USER_RESIDENCE', 'BILLING_INFO_NOT_FOUND', 'PURCHASE_INELIGIBLE', 'UNKNOWN')


class PromoDiscountType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DISCOUNT_TYPE_NONE', 'DISCOUNT_TYPE_PERCENT')


class PublishSubscriptionEmoteErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('EMOTE_LIMIT_REACHED', 'INVALID_OWNER', 'EMOTE_CODE_ALREADY_EXISTS', 'EMOTE_CODE_UNACCEPTABLE', 'INCOMPLETE_EMOTE_IMAGE_DATA', 'INVALID_CODE_SUFFIX', 'INVALID_IMAGE_UPLOAD', 'EMOTE_IMAGE_NOT_FOUND', 'NOT_ENOUGH_EMOTE_IMAGE_ASSETS', 'TOO_MANY_EMOTE_IMAGE_ASSETS', 'INVALID_EMOTE_ASSET_TYPE', 'EMOTE_MISSING_STATIC_ASSET', 'EMOTE_MISSING_ANIMATED_ASSET', 'UNKNOWN_ERROR')


class PurchaseIneligibilityReason(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('HAS_ACTIVE_SUBSCRIPTION', 'NOT_APPLICABLE')


class PurchaseOfferErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INELIGIBLE', 'INTERNAL_SERVER_ERROR', 'INVALID_PAYMENT_METHOD', 'UNAUTHENTICATED')


class PurchaseOrderFailureReason(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BANK_DECLINED', 'ENTITLEMENT_FAILED', 'INELIGIBLE', 'INVALID_PAYMENT_METHOD', 'SYSTEM_ERROR', 'UNKNOWN')


class PurchaseOrderState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'INITIATED', 'PAYMENT_PENDING', 'FULFILLMENT_INITIATED', 'SUCCESS', 'THREE_D_SECURE_CHALLENGE_REQUIRED', 'FAILED', 'CANCEL_BENEFITS_INITIATED', 'BENEFITS_CANCELLED', 'REFUND_INITIATED', 'REFUND_APPLIED', 'REFUND_FAILED')


class PurchaseProfileState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'CANCELLED', 'INACTIVE', 'MIGRATED')


class PurchaseableProductType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SUBSCRIPTION', 'BITS')


class QuickActionCategory(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNCATEGORIZED', 'MANAGE_YOUR_STREAM', 'MONETIZE_YOUR_STREAM', 'GROW_YOUR_COMMUNITY', 'MANAGE_YOUR_CHAT', 'EXTENSIONS')


class QuickActionName(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('EDIT_STREAM_INFO', 'CLIP_THAT', 'RAID_CHANNEL', 'START_SQUAD_STREAM', 'RUN_AD_30S', 'RUN_AD_1M', 'RUN_AD_2M', 'START_BOUNTY', 'HOST_CHANNEL', 'GIFT_SUBS', 'GIFT_50_SUBS', 'GIFT_100_SUBS', 'ADD_STREAM_DELAY', 'ADD_STREAM_MARKER', 'SCHEDULE_PREMIERE', 'START_RERUN', 'CLEAR_CHAT', 'EMOTE_ONLY_CHAT', 'SUB_ONLY_CHAT', 'FOLLOW_ONLY_CHAT', 'START_WATCH_PARTY')


class QuickActionScope(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('GLOBAL', 'LOCAL')


class RadioContentType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PLAYLIST', 'RECENTLY_PLAYED')


class RadioCurrentlyPlayingType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PLAYLIST', 'STATION')


class RadioIconFormat(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PNG', 'SVG')


class RadioPlaylistFilter(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALL', 'FEATURED')


class RadioRecentlyPlayedFilter(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALL', 'PLAYLISTS')


class RadioRecentlyPlayedType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PLAYLIST', 'STATION')


class RateExtensionError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INTERNAL_ERROR',)


class RecommendationFeedbackCategory(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNSPECIFIED', 'NOT_INTERESTED', 'OFFENSIVE', 'ALREADY_WATCHED', 'OTHER')


class RecommendationFeedbackType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNSPECIFIED', 'CHANNEL', 'CATEGORY', 'SHELF', 'VOD')


class RecordAdEventErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_TOKEN', 'INVALID_JSON', 'UNKNOWN_ERROR')


class RedeemClaimableErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REQUEST_THROTTLED', 'UNAUTHORIZED', 'ALREADY_CLAIMED', 'UNKNOWN', 'INVALID_PIN', 'ALREADY_REDEEMED', 'EXCEEDED_WALLET_BALANCE', 'TWO_FACTOR_REQUIRED', 'INVALID_COUNTRY_OF_RESIDENCE', 'EXCEEDED_VELOCITY_LIMIT')


class RedeemCommunityPointsCustomRewardErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NOT_FOUND', 'FORBIDDEN', 'NOT_ENOUGH_POINTS', 'PROPERTIES_MISMATCH', 'DUPLICATE_TRANSACTION', 'TRANSACTION_IN_PROGRESS', 'DISABLED', 'STREAM_NOT_LIVE', 'MAX_PER_STREAM', 'USER_BANNED', 'CHANNEL_SETTINGS', 'MESSAGE_IS_COMMAND', 'UNKNOWN', 'MAX_PER_USER_PER_STREAM', 'GLOBAL_COOLDOWN')


class RedeemRitualTokenErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TOKEN_NOT_AVAILABLE', 'TOKEN_NOT_FOUND', 'FOLLOWER_ONLY_MODE_ENFORCEMENT_FAILED', 'SUB_ONLY_MODE_ENFORCEMENT_FAILED', 'USER_CHAT_BANNED', 'USER_CHAT_TIMED_OUT')


class RedeemSubscriptionResponseErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_CHANNEL', 'NOT_ELIGIBLE', 'UNKNOWN', 'USER_HAS_REDEEMED_SUBSCRIPTION', 'CHANNEL_NOT_OFF_BOARDED', 'USER_HAS_EXISTING_SUBSCRIPTION', 'REDEEM_CHANNEL_INVALID', 'USER_NOT_SUBSCRIBED_TO_OFF_BOARDED_CHANNEL')


class ReferralsDimension(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PLATFORM', 'COUNTRY', 'CHANNEL', 'INTERNAL', 'EXTERNAL')


class ReferralsFilter(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALL', 'EXTERNAL_LIVE_WEB', 'INTERNAL_CHANNEL_LIVE_WEB', 'INTERNAL_LIVE_WEB')


class RegisterPayoutInformationErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHENTICATED', 'FORBIDDEN', 'INVALID_FORMAT', 'INTERNAL_ERROR')


class RegisterPayoutInformationFieldName(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BIRTHDATE', 'CITY', 'COMPANY_NAME', 'COUNTRY_CODE', 'EMAIL', 'FIRST_NAME', 'LAST_NAME', 'MIDDLE_NAME', 'POSTAL', 'STATE_CODE', 'STREET_ADDRESS', 'STREET_ADDRESS_2', 'PARENT_NAME', 'PARENT_EMAIL')


class RegisterTwoFactorConfirmationErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REAUTH_NEEDED', 'REGISTRATION_NOT_STARTED', 'INVALID_OTP', 'MISSING_OTP', 'LIMIT_REACHED', 'EMAIL_NOT_VERIFIED', 'UNKNOWN_ERROR')


class RegisterTwoFactorErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REAUTH_NEEDED', 'MISSING_PHONE_NUMBER', 'INVALID_PHONE_NUMBER', 'REQUEST_THROTTLED', 'EMAIL_NOT_VERIFIED', 'UNKNOWN_ERROR')


class RegistrationType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('OPEN', 'INVITATIONAL', 'FOLLOWERS', 'SUBSCRIBERS', 'FOLLOWER_AND_SUBSCRIBERS', 'UNKNOWN')


class RejectSquadStreamInvitationErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVITATION_NOT_FOUND', 'SQUAD_NOT_FOUND', 'UNAUTHORIZED', 'INVITATION_CANNOT_BE_REJECTED')


class RejectSquadStreamOutOfNetworkInvitationsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED',)


class RemoveEditorErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHANNEL_NOT_FOUND', 'TARGET_USER_NOT_FOUND')


class RemoveOrganizationMemberErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PERMISSION_DENIED', 'USER_NOT_FOUND', 'ASSIGNED_BILLING_MANAGER', 'INTERNAL_ERROR')


class RemoveSquadStreamMemberErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'USER_NOT_IN_SQUAD')


class RenewalPolicy(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NO_RENEW', 'AUTO_RENEW', 'UNKNOWN')


class ReportContentNetzDGContentDirectedTo(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ME', 'SOMEONE_I_REPRESENT', 'SOMEONE_ELSE')


class ReportContentNetzDGReportingFor(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('MYSELF', 'COMPLAINTS_OFFICE', 'GOVERNMENT_AGENCY')


class ReportContentType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHANNEL_FEED_COMMENT_REPORT', 'CHANNEL_FEED_POST_REPORT', 'CHAT_REPORT', 'CHANNEL_POINTS_REPORT', 'CLIP_REPORT', 'COLLECTION_REPORT', 'CURSE_PRIVATE_GROUP', 'CURSE_PUBLIC_GROUP', 'CURSE_WHISPER', 'EMOTE_REPORT', 'EVENT_REPORT', 'EXTENSION_REPORT', 'LIVE_UP_REPORT', 'LIVESTREAM_REPORT', 'POLL_REPORT', 'RAID_REPORT', 'REWARD_REDEMPTION_REPORT', 'ROOM_REPORT', 'SINGS_GROUP_NAME_REPORT', 'SINGS_GROUP_BIO_REPORT', 'SINGS_GROUP_CHAT_REPORT', 'SINGS_VOD_COMMENT_REPORT', 'SINGS_DUET_SEED_REPORT', 'UNBAN_REQUEST_REPORT', 'USER_REPORT', 'VOD_COMMENT_REPORT', 'VOD_REPORT', 'WHISPER_REPORT')


class ReportWhisperErrorReason(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_USER_ID', 'NO_WHISPERS_FROM_TARGET_USER', 'RATE_LIMITED', 'UNAUTHORIZED', 'UNKNOWN')


class RequestRitualTokenErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TOKEN_NOT_AVAILABLE', 'TOKEN_NOT_FOUND')


class ResetUsernameErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TOKEN_INVALID', 'REQUESTS_THROTTLED', 'LOGIN_UNAVAILABLE', 'LOGIN_TOO_SHORT', 'LOGIN_TOO_LONG', 'LOGIN_CONTAINS_INVALID_CHARACTERS', 'UNKNOWN_ERROR')


class ResolvePredictionEventErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'EVENT_ENDED', 'UNKNOWN')


class ResourceRestrictionExemptionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'ALL', 'STAFF', 'SITE_ADMIN', 'PRODUCT', 'ORGANIZATION_MEMBER', 'PREVIEW', 'CHANNEL_MODERATOR', 'CHANNEL_VIP')


class ResourceRestrictionOption(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALLOW_CHANNEL_VIP', 'ALLOW_CHANNEL_MODERATOR', 'ALLOW_TIER_3_ONLY', 'ALLOW_TIER_2_AND_3_ONLY', 'ALLOW_ALL_TIERS')


class ResourceRestrictionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'SUB_ONLY_LIVE', 'ALL_ACCESS_PASS', 'ORGANIZATION_ACCESS_ONLY')


class RestrictionResource(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('VIDEO', 'LIVE')


class ResumeScheduleError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PERMISSION_DENIED', 'NOT_FOUND')


class RevokeVIPErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHANNEL_NOT_FOUND', 'FORBIDDEN', 'REVOKEE_NOT_FOUND', 'REVOKEE_NOT_VIP')


class RitualTokenStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ELIGIBLE', 'AVAILABLE', 'DISMISSED', 'REDEEMED')


class RitualTokenType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NEW_CHATTER',)


class RoomMemberType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BROADCASTER', 'STAFF', 'ADMIN', 'GLOBALMOD', 'MOD', 'REGULAR')


class RoomMessageMentionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('HERE',)


class RoomRole(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BROADCASTER', 'MODERATOR', 'SUBSCRIBER', 'EVERYONE')


class RotateExtensionSecretsError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_CLIENT', 'UNAUTHORIZED', 'INVALID_DELAY')


class RunMultiplayerAdErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHANNEL_NOT_LIVE', 'OFFER_EXPIRED', 'OFFER_NOT_FOUND', 'UNKNOWN')


class SaveExtensionManifestError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'INVALID_VERSION', 'ANCHOR_REQUIRED', 'INVALID_ZOOM', 'MAX_BROADCASTERS', 'MAX_TESTERS', 'MAX_WHITELISTED_CONFIG_URLS', 'MAX_WHITELISTED_PANEL_URLS', 'INVALID_NAME_LENGTH', 'INVALID_DESCRIPTION_LENGTH', 'INVALID_SUMMARY_LENGTH', 'INVALID_AUTHOR_EMAIL', 'INVALID_SUPPORT_EMAIL', 'INVALID_AUTHOR_NAME_LENGTH', 'INVALID_TESTING_BASE_URI', 'INVALID_TERMS_URI', 'INVALID_PRIVACY_URI', 'INVALID_COMPONENT_VIEWER_PATH', 'INVALID_PANEL_VIEWER_PATH', 'INVALID_VIDEO_OVERLAY_VIEWER_PATH', 'INVALID_CONFIG_VIEWER_PATH', 'INVALID_LIVE_CONFIG_VIEWER_PATH', 'INVALID_MOBILE_VIEWER_PATH', 'INVALID_COMPONENT_ASPECT_WIDTH', 'INVALID_COMPONENT_ASPECT_HEIGHT', 'INVALID_PANEL_HEIGHT', 'INVALID_BITS_SUPPORT_LEVEL', 'INVALID_SCALING_PIXELS', 'INVALID_COMPONENT_ASPECT_RATIO_X', 'INVALID_COMPONENT_ASPECT_RATIO_Y', 'INVALID_COMPONENT_TARGET_HEIGHT', 'INVALID_VIEWER_SUMMARY_LENGTH')


class ScheduleInterruptionReason(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('VACATION', 'OTHER')


class ScheduleSegmentDay(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SUNDAY', 'MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY')


class Scope(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BENEFIT', 'CAMPAIGN')


class SearchIndex(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('GAME', 'USER', 'VOD', 'LIVE', 'CHANNEL')


class SegmentsStatusType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('COMPLETED', 'NOT_ENOUGH_DATA', 'IN_PROGRESS', 'FAILED')


class SendCheerValidationErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AMOUNT_BELOW_MIN_BITS', 'AUTO_MOD_MESSAGE', 'CHANNEL_INELIGIBLE', 'EMOTE_AMOUNT_BELOW_MIN_BITS', 'INSUFFICIENT_BALANCE', 'INVALID_BITS_AMOUNT', 'INVALID_BITS_MESSAGE', 'INVALID_EVENT_ID', 'MESSAGE_LENGTH_EXCEEDED', 'REQUEST_THROTTLED', 'TOO_LARGE_BITS_EMOTE', 'TOO_LARGE_CHEER', 'UNKNOWN', 'USER_BANNED', 'USER_INELIGIBLE', 'USER_SUSPENDED', 'ZALGO_MESSAGE', 'AUTO_MOD_PENDING', 'CHANNEL_BLOCKED_TERMS', 'INVALID_ANONYMOUS_MESSAGE', 'ANONYMOUS_CHEERMOTE_NOT_ALLOWED')


class SendCopoMessageErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('MSG_DUPLICATE', 'USER_SUSPENDED', 'USER_BANNED', 'USER_TIMED_OUT', 'EMOTE_ONLY', 'SLOW_MODE', 'FOLLOWERS_ONLY', 'FOLLOWERS_ONLY_ZERO', 'SUBS_ONLY', 'R9K_MODE', 'BLIZZARD_CONNECT_MODE', 'VERIFIED_ACCOUNT', 'CHANNEL_SETTINGS', 'AUTOMOD_HELD', 'MESSAGE_REJECTED', 'SERVER_ERROR', 'INSUFFICIENT_POINTS', 'TRANSACTION_ALREADY_COMMITTED', 'TRANSACTION_IN_PROGRESS', 'REWARD_COST_MISMATCH', 'REWARD_DISABLED', 'REWARD_FORBIDDEN', 'MESSAGE_IS_COMMAND', 'UNKNOWN')


class SendExtensionMessageErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'UNKNOWN')


class SendRoomMessageErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'AUTO_MOD_ENFORCEMENT_FAILED', 'EMOTE_ONLY_MODE_ENFORCEMENT_FAILED', 'R9K_MODE_ENFORCEMENT_FAILED', 'RATE_LIMIT_FAILED', 'SLOW_MODE_ENFORCEMENT_FAILED', 'SPAM_ENFORCEMENT_FAILED', 'ZALGO_ENFORCEMENT_FAILED', 'USER_CHAT_BANNED', 'USER_CHAT_TIMED_OUT', 'USER_SUSPENDED')


class SendWhisperErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TARGET_BANNED', 'BODY_EMPTY', 'TARGET_RESTRICTED', 'SENDER_NOT_VERIFIED', 'NOT_DELIVERED')


class SetChannelTrailerErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'VOD_TOO_LONG')


class SetDashboardAlertQueueActivityStatusErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_ACTIVITY_ID', 'INVALID_ALERT_STATUS', 'INVALID_CHANNEL_ID', 'NOT_FOUND')


class SetDashboardAlertQueuePreferenceErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_CHANNEL_ID',)


class SetDefaultPaymentMethodErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHENTICATED', 'FORBIDDEN', 'INVALID_REQUEST', 'INTERNAL_ERROR')


class SetEmoteModifierGroupsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INTERNAL_SERVER_ERROR', 'INVALID_ARGUMENT', 'USER_UNAUTHORIZED', 'UNKNOWN')


class SetExtensionConfigurationErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'UNKNOWN')


class SetExtensionFeatureFlagsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'INVALID_CHANNEL_ID', 'EXTENSION_NOT_INSTALLED')


class SetOverwatchTeamPreferenceErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN',)


class SetQuickActionLayoutErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_CHANNEL_ID', 'INVALID_OWNER_ID', 'INVALID_QUICK_ACTION_ID')


class SetRadioCurrentlyPlayingErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_ID', 'PERMISSION_DENIED', 'NO_RECORD')


class SetScheduleReminderErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'INVALID_ARGUMENT', 'NOT_FOUND', 'FAILED_PRECONDITION')


class SetUnbanRequestsSettingsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'UNAUTHORIZED', 'INVALID_VALUE')


class ShortVideoFeedPlatform(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('MOBILE_WEB', 'IOS', 'ANDROID')


class ShortVideoFeedType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FOLLOWING', 'RECOMMENDED')


class SortOrder(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ASC', 'DESC')


class SourceType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PROMOTION', 'RECOMMENDED', 'SPONSORED', 'POPULAR', 'COMMUNITY_BOOST', 'UNKNOWN_SOURCE_TYPE')


class SpendSubscriptionCreditErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNABLE_TO_SPEND', 'TOO_MANY_RECENT_SPENDS')


class SquadStreamIncomingInvitePolicy(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'NETWORK', 'ALL')


class SquadStreamInvitationNetworkType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('IN_NETWORK', 'OUT_OF_NETWORK')


class SquadStreamInvitationRejectedReason(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('RECIPIENT_REJECTED', 'RECIPIENT_CANNOT_ACCESS_SQUAD_STREAM', 'RECIPIENT_CANNOT_BE_INVITED')


class SquadStreamInvitationStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACCEPTED', 'DELETED', 'PENDING', 'REJECTED', 'UNKNOWN')


class SquadStreamStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('LIVE', 'PENDING', 'ENDED', 'UNKNOWN')


class StartAdErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('RATE_LIMITED', 'USER_NOT_AUTHORIZED', 'UNKNOWN_ERROR')


class StartBountyErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_PARAMETER', 'BOUNTY_NOT_LIVE', 'STREAM_TITLE_BANNED_WORDS', 'STREAM_TITLE_TOO_LONG', 'UNAUTHORIZED', 'UNKNOWN_ERROR')


class StartCloudBroadcastErrorCause(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NO_SUBSCRIPTION', 'UNKNOWN')


class StopBountyErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_PARAMETER', 'UNAUTHORIZED', 'UNKNOWN_ERROR')


class StopCloudBroadcastErrorCause(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BROADCAST_NOT_FOUND', 'UNKNOWN')


class StreamRecommendationType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SOCIAL',)


class StreamRestrictionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('OWL_ALL_ACCESS_PASS', 'SUB_ONLY_LIVE')


class StreamSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('VIEWER_COUNT', 'VIEWER_COUNT_ASC', 'RECENT', 'RELEVANCE', 'CSGO_SKILL', 'LOL_SUMMONER_RANK')


class StreamerShelfType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AUTOHOST', 'TEAM', 'DISABLED')


String = sgqlc.types.String

class StuccoState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'INACTIVE', 'MODERATED', 'PENDING', 'ARCHIVED')


class SubmitCSATFeedbackErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'INVALID_ARGUMENT')


class SubmitEmotePrefixResponseCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ERR_INVALID_USER', 'ERR_INVALID_PREFIX_LENGTH', 'ERR_INVALID_PREFIX_REGEX', 'ERR_INVALID_PREFIX_STATE', 'ERR_PREFIX_NOT_UNIQUE', 'ERR_PREFIX_UPDATE_TOO_SOON', 'ERR_NOT_IN_GOOD_STANDING', 'ERR_UNKNOWN', 'ERR_AFFILIATE_PREFIX_UPDATE_TOO_SOON', 'ERR_SUBMITTED_PREFIX_DOES_NOT_MATCH_AUTO_GENERATED_PREFIX')


class SubmitExtensionFeedbackError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INTERNAL_ERROR',)


class SubscriptionBenefitFilter(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PLATFORM', 'GIFT', 'ALL')


class SubscriptionBenefitState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'ACTIVE', 'DNR_INITIATED', 'WILL_NOT_RENEW', 'CANCEL_INITIATED', 'CANCELLED', 'ON_HOLD')


class SubscriptionCommunityGiftingType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'BUNDLE', 'CUSTOM')


class SubscriptionGiftOfferPlatform(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('WEB', 'ANDROID')


class SubscriptionGiftType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'STANDARD', 'COMMUNITY')


class SubscriptionIntervalUnit(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'WEEK', 'MONTH', 'YEAR', 'ONE_TIME')


class SubscriptionPlatform(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'WEB', 'IOS', 'ANDROID', 'MOBILE_ALL')


class SubscriptionProductType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHANSUB', 'TEAMSUB', 'TURBO')


class SubscriptionProductsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'ERROR', 'MISSING')


class SubscriptionPromotionDiscountType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'PERCENT_OFF', 'FIXED_VALUE_OFF')


class SubscriptionPurchaseState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'CANCELLED', 'INACTIVE')


class SubscriptionState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'INACTIVE', 'UNKNOWN')


class SubscriptionSummaryTier(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TIER_1', 'TIER_2', 'TIER_3')


class SubscriptionTenureMethod(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CUMULATIVE', 'STREAK')


class SubscriptionTier(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CUSTOM', 'PRIME', 'T_1000', 'T_2000', 'T_3000')


class TagScope(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALL', 'CATEGORY')


class TagType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CONTENT', 'TOP')


class TaxInterviewType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ROYALTY', 'SERVICE')


class TaxMismatchError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NAME', 'COUNTRY', 'EMAIL', 'STREET_ADDRESS', 'STREET_ADDRESS_2', 'CITY', 'STATE', 'POSTAL')


class TiebreakerLabel(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('KILLS', 'BONUS', 'UNKNOWN')


Time = sgqlc.types.datetime.Time

class TimeSeriesPeriod(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DAY', 'MONTH')


class TrackingPixelType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DAR', 'DCM', 'SIZMEK')


class TransitionExtensionStateError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'MISSING_ASSET_HASH', 'MISSING_REVIEW_NOTES', 'MISSING_TEST_CHANNEL', 'MULTIPLE_VERSIONS_IN_REVIEW', 'TRANSITION_MISSING_AUTHOR_EMAIL', 'TRANSITION_MISSING_AUTHOR_NAME', 'TRANSITION_MISSING_CATEGORY', 'TRANSITION_MISSING_SUPPORT_EMAIL', 'TRANSITION_MISSING_NAME', 'TRANSITION_MISSING_VERSION', 'TRANSITION_MISSING_TESTING_BASE_URI', 'TRANSITION_MISSING_SUMMARY', 'TRANSITION_MISSING_DESCRIPTION', 'TRANSITION_MISSING_SCREENSHOT_URLS', 'INVALID_STATE_TRANSITION', 'INVALID_VERSION', 'ANCHOR_REQUIRED', 'INVALID_ZOOM', 'MAX_BROADCASTERS', 'MAX_TESTERS', 'MAX_WHITELISTED_CONFIG_URLS', 'MAX_WHITELISTED_PANEL_URLS', 'INVALID_NAME_LENGTH', 'INVALID_DESCRIPTION_LENGTH', 'INVALID_SUMMARY_LENGTH', 'INVALID_AUTHOR_EMAIL', 'INVALID_SUPPORT_EMAIL', 'INVALID_AUTHOR_NAME_LENGTH', 'INVALID_TESTING_BASE_URI', 'INVALID_TERMS_URI', 'INVALID_PRIVACY_URI', 'INVALID_COMPONENT_VIEWER_PATH', 'INVALID_PANEL_VIEWER_PATH', 'INVALID_VIDEO_OVERLAY_VIEWER_PATH', 'INVALID_CONFIG_VIEWER_PATH', 'INVALID_LIVE_CONFIG_VIEWER_PATH', 'INVALID_MOBILE_VIEWER_PATH', 'INVALID_COMPONENT_ASPECT_WIDTH', 'INVALID_COMPONENT_ASPECT_HEIGHT', 'INVALID_PANEL_HEIGHT', 'INVALID_BITS_SUPPORT_LEVEL', 'INVALID_SCALING_PIXELS', 'INVALID_COMPONENT_ASPECT_RATIO_X', 'INVALID_COMPONENT_ASPECT_RATIO_Y', 'INVALID_COMPONENT_TARGET_HEIGHT')


class TriggerType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHEER',)


class TutorialState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DISMISSED', 'SEEN', 'UNSEEN')


class TwoFactorMethod(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AUTHY_SMS', 'AUTHY_APP', 'AUTHY_TOTP', 'UNKNOWN')


class UnacknowledgedSubscriptionEventState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'WILL_NOT_RENEW', 'CANCELLED', 'ON_HOLD')


class UnbanRequestErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'REQUEST_NOT_FOUND', 'INVALID_UPDATE', 'UNKNOWN')


class UnbanRequestRestrictionReason(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ALREADY_CREATED', 'NOT_BANNED', 'TOO_SOON_SINCE_BAN', 'UNBAN_REQUESTS_DISABLED', 'UNAUTHENTICATED', 'UNKNOWN')


class UnbanRequestStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NONE', 'APPROVED', 'DENIED', 'PENDING', 'ACKNOWLEDGED', 'CANCELED')


class UnbanRequestsSortOrder(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('OLDEST', 'NEWEST')


class UnbanUserFromChatRoomErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'TARGET_NOT_FOUND', 'TARGET_NOT_BANNED')


class UninstallExtensionErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'INVALID_CHANNEL_ID', 'EXTENSION_NOT_INSTALLED')


class UnmodUserErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'TARGET_NOT_FOUND', 'CHANNEL_NOT_FOUND', 'TARGET_NOT_MOD')


class UpdateBitsBadgeTiersErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_PARAMETER', 'BADGE_TITLE_EXCEEDS_CHARACTER_LIMIT', 'BADGE_TITLE_FAILED_MODERATION', 'EMOTE_CODE_ALREADY_EXISTS', 'EMOTE_CODE_UNACCEPTABLE', 'INCOMPLETE_BADGE_IMAGE_DATA', 'UNKNOWN_ERROR')


class UpdateBoostSettingsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_PARAMETER', 'INTERNAL_ERROR')


class UpdateBroadcastSettingsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AUTH_FAILURE', 'REQUESTS_THROTTLED', 'LANGUAGE_NOT_VALID', 'STATUS_TOO_LONG', 'STATUS_USES_BANNED_WORDS', 'GAME_NAME_TOO_LONG', 'UNKNOWN_ERROR')


class UpdateChannelCategoryShelfError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'INVALID_CATEGORY', 'CANNOT_SHOW_AND_HIDE_CATEGORY')


class UpdateChannelPredictionSettingsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'UNKNOWN')


class UpdateCheermoteTierErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_OWNER', 'INVALID_IMAGE_UPLOAD', 'EMOTE_IMAGE_NOT_FOUND', 'NOT_ENOUGH_EMOTE_IMAGE_ASSETS', 'TOO_MANY_EMOTE_IMAGE_ASSETS', 'EMOTE_MISSING_STATIC_ASSET', 'EMOTE_MISSING_ANIMATED_ASSET', 'UNKNOWN_ERROR')


class UpdateCommunityPointsAutomaticRewardErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'FORBIDDEN', 'COST_TOO_LOW', 'COST_INVALID', 'BACKGROUND_COLOR_INVALID')


class UpdateCommunityPointsChannelSettingsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'FORBIDDEN', 'NAME_AUTOMOD_FAILED')


class UpdateCommunityPointsCommunityGoalErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('DUPLICATE_GOAL', 'TITLE_AUTOMOD_FAILED', 'TITLE_INVALID', 'DESCRIPTION_AUTOMOD_FAILED', 'DESCRIPTION_INVALID', 'GOAL_AMOUNT_INVALID', 'DURATION_INVALID', 'BACKGROUND_COLOR_INVALID', 'GOAL_STARTED', 'INVALID_STATUS_CHANGE', 'NOT_FOUND', 'FORBIDDEN', 'UNKNOWN')


class UpdateCommunityPointsCustomRewardErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'FORBIDDEN', 'NOT_FOUND', 'TITLE_AUTOMOD_FAILED', 'PROMPT_AUTOMOD_FAILED', 'COST_INVALID', 'MAX_PER_STREAM_INVALID', 'TITLE_INVALID', 'BACKGROUND_COLOR_INVALID', 'DUPLICATE_REWARD', 'MAX_PER_USER_PER_STREAM_INVALID', 'GLOBAL_COOLDOWN_INVALID')


class UpdateCommunityPointsCustomRewardRedemptionStatusErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('NOT_FOUND', 'FORBIDDEN')


class UpdateCommunityPointsCustomRewardRedemptionStatusesErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'FORBIDDEN', 'IN_PROGRESS')


class UpdateCommunityPointsEarlyAccessErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'UNKNOWN')


class UpdateCommunityPointsLastViewedContentErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'FORBIDDEN')


class UpdateCommunityPointsSmartCostsAcknowledgementsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'FORBIDDEN', 'LAST_ACKNOWLEDGED_COST_INVALID')


class UpdateConsentErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_VENDOR_LAW_CONSENT_STATUS',)


class UpdateEmoteOrdersErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'BAD_EMOTE_REQUEST', 'BAD_GROUP_REQUEST', 'BAD_NON_UNIQUE_ORDERS_REQUEST', 'UNKNOWN_ERROR')


class UpdateExtensionDiscoveryDataError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'INVALID_VERSION', 'INVALID_NAME_LENGTH', 'INVALID_DESCRIPTION_LENGTH', 'INVALID_SUMMARY_LENGTH', 'INVALID_AUTHOR_EMAIL', 'INVALID_SUPPORT_EMAIL', 'INVALID_AUTHOR_NAME_LENGTH', 'INVALID_TESTING_BASE_URI', 'INVALID_TERMS_URI', 'INVALID_PRIVACY_URI')


class UpdateExtensionManifestError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED', 'INVALID_VERSION', 'ANCHOR_REQUIRED', 'INVALID_ZOOM', 'MAX_BROADCASTERS', 'MAX_TESTERS', 'MAX_WHITELISTED_CONFIG_URLS', 'MAX_WHITELISTED_PANEL_URLS', 'INVALID_NAME_LENGTH', 'INVALID_DESCRIPTION_LENGTH', 'INVALID_SUMMARY_LENGTH', 'INVALID_AUTHOR_EMAIL', 'INVALID_SUPPORT_EMAIL', 'INVALID_AUTHOR_NAME_LENGTH', 'INVALID_TESTING_BASE_URI', 'INVALID_TERMS_URI', 'INVALID_PRIVACY_URI', 'INVALID_COMPONENT_VIEWER_PATH', 'INVALID_PANEL_VIEWER_PATH', 'INVALID_VIDEO_OVERLAY_VIEWER_PATH', 'INVALID_CONFIG_VIEWER_PATH', 'INVALID_LIVE_CONFIG_VIEWER_PATH', 'INVALID_MOBILE_VIEWER_PATH', 'INVALID_COMPONENT_ASPECT_WIDTH', 'INVALID_COMPONENT_ASPECT_HEIGHT', 'INVALID_PANEL_HEIGHT', 'INVALID_BITS_SUPPORT_LEVEL')


class UpdateLiveUpNotificationValidationErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FAILED_AUTOMOD', 'TOO_LONG', 'USER_NOT_FOUND')


class UpdateOrganizationMemberRoleErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('MEMBER_NOT_FOUND', 'MEMBER_INELIGIBLE', 'PERMISSION_DENIED', 'INVALID_ARGUMENT')


class UpdatePhoneNumberConfirmationErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REAUTH_NEEDED', 'INVALID_PHONE_NUMBER', 'REQUEST_THROTTLED', 'LIMIT_REACHED', 'INVALID_OTP', 'MISSING_OTP', 'UNKNOWN_ERROR')


class UpdatePhoneNumberErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REAUTH_NEEDED', 'INVALID_PHONE_NUMBER', 'REQUEST_THROTTLED', 'LIMIT_REACHED', 'UNKNOWN_ERROR')


class UpdatePrimeOfferStatusErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('OFFERS_FAILED_TO_UPDATE', 'UNKNOWN')


class UpdateRoomErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FORBIDDEN', 'ROOM_NOT_FOUND', 'NAME_LENGTH_INVALID', 'NAME_CONTAINS_INVALID_CHARACTERS', 'NAME_INAPPROPRIATE', 'NAME_NOT_UNIQUE', 'TOPIC_LENGTH_INVALID', 'TOPIC_INAPPROPRIATE', 'ROLES_INVALID')


class UpdateRoomModesErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ROOM_NOT_FOUND', 'FORBIDDEN', 'SLOW_MODE_DURATION_INVALID')


class UpdateScheduleSegmentErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PERMISSION_DENIED', 'INVALID_CATEGORY_COUNT', 'NOT_FOUND', 'NO_UPDATED_ATTRIBUTES_PROVIDED', 'OVERLAPPING_SEGMENTS', 'INVALID_TITLE', 'TITLE_FAILED_MODERATION', 'INVALID_TIMEZONE', 'INVALID_CATEGORIES', 'INVALID_START_DAY', 'INVALID_START_HOUR', 'INVALID_START_MINUTE', 'INVALID_DURATION', 'INVALID_SEGMENT', 'INVALID_ARGUMENT', 'FIRST_OCCURRENCE_DATE_IN_PAST', 'FIRST_OCCURRENCE_DATE_ON_RECURRING_SEGMENT', 'ALREADY_STARTED')


class UpdateSocialMediaError(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('FAILED_TITLE_MODERATION', 'TITLE_TOO_LONG', 'INVALID_URL', 'NOT_FOUND')


class UpdateSquadInvitePolicyErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNAUTHORIZED',)


class UpdateSquadStreamErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('SQUAD_NOT_FOUND', 'SQUAD_CANNOT_BE_UPDATED', 'SQUAD_TOO_FEW_MEMBERS', 'UNAUTHORIZED')


class UpdateUserColorsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_HEX_COLOR',)


class UpdateUserErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AUTH_FAILURE', 'REQUESTS_THROTTLED', 'USER_NOT_FOUND', 'REAUTH_NEEDED', 'DISPLAY_NAME_NOT_AVAILABLE', 'DISPLAY_NAME_TOO_SHORT', 'DISPLAY_NAME_TOO_LONG', 'INVALID_CHARS_IN_DISPLAY_NAME', 'DISPLAY_NAME_CHANGE_AGAIN', 'DISPLAY_NAME_ONLY_CAP', 'DISPLAY_NAME_UNEXPECTED_ERR', 'LOGIN_NOT_AVAILABLE', 'LOGIN_BLOCKED', 'NOT_ALLOWED_TO_CHANGE_LOGIN', 'LOGIN_TOO_SHORT', 'LOGIN_TOO_LONG', 'INVALID_CHARS_IN_LOGIN', 'LOGIN_USE_BANNED_WORDS', 'LOGIN_USE_VARIATION_ON_BANNED_WORDS', 'FILTERED_USER_REQUESTED', 'IP_BLOCKED', 'TOO_MANY_USERS_FOR_EMAIL', 'EMAIL_DISABLED_FOR_REUSE', 'INVALID_EMAIL', 'WORK_EMAIL_REQUIRED', 'INVALID_EMAIL_DOMAIN', 'NOT_ALLOWED_TO_CHANGE_EMAIL', 'PHONE_NUMBER_INVALID', 'PHONE_NUMBER_HAS_LETTERS', 'DESCRIPTION_FAILED_MODERATION', 'DESCRIPTION_TOO_LONG', 'NO_PROPERTIES', 'RESERVATION_NOT_EXITS', 'LANGUAGE_NOT_VALID', 'INVALID_BIRTHDAY', 'INVALID_LAST_LOGIN', 'INVALID_PARAMETER_COMBINATION', 'NOT_ALLOWED_TO_DELETE_PHONE_NUMBER', 'PHONE_NUMBER_ALREADY_EXISTS', 'INVALID_HEX_COLOR', 'UNKNOWN')


class UpdateUserPredictionSettingsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN',)


class UpdateVideoStreamSettingsErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHANNEL_NOT_FOUND', 'PERMISSION_DENIED', 'INVALID_ARGUMENT')


class UserCompetitionRelationship(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PLAYER', 'OWNER', 'UNKNOWN')


class UserLookupType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ACTIVE', 'ALL')


class ValidateVerificationCodeErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INCORRECT_CODE', 'TOO_MANY_FAILED_ATTEMPTS', 'RATE_LIMITED', 'UNKNOWN')


class VendorName(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('AMAZON', 'BRANCH', 'COMSCORE', 'GOOGLE', 'NIELSEN', 'SALESFORCE_DMP')


class VerificationStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'PENDING', 'VERIFIED', 'REJECTED')


class VerifyOneTimePasswordErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REAUTH_NEEDED', 'INVALID_OTP', 'NO_TWO_FACTOR', 'UNKNOWN_ERROR')


class VerifyRewardedVideoEligibilityCaptchaErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INVALID_PARAMETER', 'INTERNAL_ERROR')


class VerticalShelfType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CATEGORY_SELECTOR', 'LIVE_MATCHES', 'LIVE_PROS', 'REPLAYS', 'COLLECTION')


class VideoBookmarkConnectionErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('INTERNAL_SERVER_ERROR', 'USER_UNAUTHORIZED')


class VideoCommentSource(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CHAT', 'COMMENT', 'UNKNOWN')


class VideoCommentState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PUBLISHED', 'UNPUBLISHED', 'PENDING_REVIEW', 'PENDING_REVIEW_SPAM', 'DELETED')


class VideoDownloadStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('CREATED', 'SUBMITTED', 'DOWNLOADING', 'TRANSMUXING', 'FAILED', 'COMPLETE', 'UNKNOWN')


class VideoMomentRequestType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('HIGHLIGHTER_SUGGESTIONS', 'VIDEO_CHAPTER_MARKERS')


class VideoMomentType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('STREAM_MARKER', 'GAME_CHANGE', 'HEARTHSTONE_VCA', 'OVERWATCH_VCA', 'PUBG_VCA', 'VCA')


class VideoPrivacyScope(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PRIVATE', 'PUBLIC')


class VideoShelfType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('LATEST_BROADCASTS', 'LATEST_NON_BROADCASTS', 'TOP_CLIPS', 'SHORT_VIDEOS', 'LONG_VIDEOS', 'GAME', 'COLLECTION', 'ALL_VIDEOS')


class VideoSort(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('TIME', 'TIME_ASC', 'VIEWS')


class VideoStatus(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('RECORDING', 'UNPROCESSED', 'CREATED', 'UPLOADING', 'PENDING_TRANSCODE', 'FAILED', 'RECORDED')


class VideoType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('LIVE', 'VOD')


class Visibility(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ONLINE', 'AWAY', 'BUSY', 'OFFLINE')


class VisibilityInput(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('ONLINE', 'AWAY', 'BUSY', 'OFFLINE')


class VoteInAdPollErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('POLL_NOT_FOUND', 'POLL_NOT_ACTIVE', 'VOTE_ID_CONFLICT', 'MAX_VOTE_LIMIT_ERROR', 'MULTI_CHOICE_VOTE_FORBIDDEN', 'INVALID_CHOICE_ID', 'UNKNOWN')


class VoteInPollErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('POLL_NOT_FOUND', 'POLL_NOT_ACTIVE', 'VOTE_ID_CONFLICT', 'MULTI_CHOICE_VOTE_FORBIDDEN', 'INVALID_CHANNEL_ID', 'INVALID_CHOICE_INDEX', 'INVALID_CHOICE_ID', 'INVALID_BITS_AMOUNT', 'INVALID_COMMUNITY_POINTS_AMOUNT', 'INSUFFICIENT_BITS_BALANCE', 'INSUFFICIENT_COMMUNITY_POINTS_BALANCE', 'TOKENS_REQUIRED', 'USER_FORBIDDEN', 'SELF_BITS_VOTE_NOT_ALLOWED', 'RATE_LIMITED', 'UNKNOWN')


class WalletType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('GIFT_CARD',)


class WatchPartiesRestriction(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('REGION_NOT_SUPPORTED', 'UNKNOWN')


class WatchPartyContentRestriction(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'BROAD_AVAILABILITY', 'LIMITED_AVAILABILITY')


class WatchPartyErrorCode(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('BAD_REQUEST', 'FORBIDDEN', 'REQUEST_THROTTLED', 'GEO_RESTRICTED', 'UNKNOWN')


class WatchPartyItemType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'EPISODE', 'MOVIE', 'SEASON', 'SERIES')


class WatchPartyState(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('UNKNOWN', 'HYPE_IN', 'IN_PROGRESS', 'OFFLINE')


class WhisperPermissionType(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('PERMITTED', 'NOT_PERMITTED', 'NOT_RESTRICTED', 'TEMPORARY')


class WhisperSpamLikelihood(sgqlc.types.Enum):
    __schema__ = schema
    __choices__ = ('LOW', 'MEDIUM', 'HIGH')



########################################################################
# Input Objects
########################################################################
class AcceptFriendRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('target_id',)
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')


class AcceptOrganizationInviteInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('first_name', 'last_name', 'organization_invite_id', 'title')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    organization_invite_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='organizationInviteID')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class AcceptProgramAgreementInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('target_user_id', 'type', 'version')
    target_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetUserID')
    type = sgqlc.types.Field(sgqlc.types.non_null(PayoutOnboardingCategory), graphql_name='type')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')


class AcceptSquadStreamInvitationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('invitation_id',)
    invitation_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='invitationID')


class AcknowledgePredictionResultInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class AcknowledgeSubscriptionStateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('subscription_id',)
    subscription_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='subscriptionID')


class AcknowledgeUnbanRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class ActivateExtensionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('anchor', 'extension_installation_id', 'slot')
    anchor = sgqlc.types.Field(sgqlc.types.non_null(ExtensionAnchor), graphql_name='anchor')
    extension_installation_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionInstallationID')
    slot = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slot')


class ActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('game_id', 'type', 'user_id')
    game_id = sgqlc.types.Field(String, graphql_name='gameID')
    type = sgqlc.types.Field(ActivityType, graphql_name='type')
    user_id = sgqlc.types.Field(String, graphql_name='userID')


class AdRequestClientContext(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_audio_only', 'is_mini_theater', 'is_pip', 'is_using_external_playback')
    is_audio_only = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAudioOnly')
    is_mini_theater = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isMiniTheater')
    is_pip = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPIP')
    is_using_external_playback = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isUsingExternalPlayback')


class AdRequestContext(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('ad_session_id', 'client_context', 'commercial_id', 'duration', 'is_vlm', 'player_context', 'roll_type')
    ad_session_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='adSessionID')
    client_context = sgqlc.types.Field(sgqlc.types.non_null(AdRequestClientContext), graphql_name='clientContext')
    commercial_id = sgqlc.types.Field(ID, graphql_name='commercialID')
    duration = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='duration')
    is_vlm = sgqlc.types.Field(Boolean, graphql_name='isVLM')
    player_context = sgqlc.types.Field(sgqlc.types.non_null('AdRequestPlayerContext'), graphql_name='playerContext')
    roll_type = sgqlc.types.Field(sgqlc.types.non_null(AdrollType), graphql_name='rollType')


class AdRequestPlayerContext(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('content_type', 'is_auto_play', 'nauth_sig', 'nauth_token', 'video_session_id')
    content_type = sgqlc.types.Field(sgqlc.types.non_null(AdRequestContentType), graphql_name='contentType')
    is_auto_play = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAutoPlay')
    nauth_sig = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='nauthSig')
    nauth_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='nauthToken')
    video_session_id = sgqlc.types.Field(ID, graphql_name='videoSessionID')


class AddAutohostChannelsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_ids', 'user_id')
    channel_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='channelIDs')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class AddBrowserPushSubscriptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('auth', 'endpoint', 'p256_dh')
    auth = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='auth')
    endpoint = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='endpoint')
    p256_dh = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='p256DH')


class AddChannelBlockedTermInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'is_mod_editable', 'phrases')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    is_mod_editable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isModEditable')
    phrases = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='phrases')


class AddChannelPermittedTermInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'phrases')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    phrases = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='phrases')


class AddCollectionItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('collection_id', 'item_id', 'item_type')
    collection_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='collectionID')
    item_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='itemID')
    item_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='itemType')


class AddCompetitionPhaseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('competition_id',)
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')


class AddCompetitionPlayerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('competition_id', 'discord_username', 'in_game_username', 'state', 'user_id')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    discord_username = sgqlc.types.Field(String, graphql_name='discordUsername')
    in_game_username = sgqlc.types.Field(String, graphql_name='inGameUsername')
    state = sgqlc.types.Field(CompetitionPlayerState, graphql_name='state')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class AddCompetitionTeamInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('captain_id', 'competition_id', 'members', 'name')
    captain_id = sgqlc.types.Field(ID, graphql_name='captainID')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    members = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='members')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class AddDeviceTokenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('app_build', 'device_id', 'device_name', 'device_token', 'notification_capabilities_types', 'onsite_capabilities_types', 'platform', 'user_id')
    app_build = sgqlc.types.Field(String, graphql_name='appBuild')
    device_id = sgqlc.types.Field(ID, graphql_name='deviceID')
    device_name = sgqlc.types.Field(String, graphql_name='deviceName')
    device_token = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='deviceToken')
    notification_capabilities_types = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='notificationCapabilitiesTypes')
    onsite_capabilities_types = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='onsiteCapabilitiesTypes')
    platform = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='platform')
    user_id = sgqlc.types.Field(ID, graphql_name='userID')


class AddDropToCampaignInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('campaign_id', 'drop_rule_type', 'end_at', 'name', 'start_at')
    campaign_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='campaignID')
    drop_rule_type = sgqlc.types.Field(sgqlc.types.non_null(DropRuleType), graphql_name='dropRuleType')
    end_at = sgqlc.types.Field(Time, graphql_name='endAt')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    start_at = sgqlc.types.Field(Time, graphql_name='startAt')


class AddEditorInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'target_user_id', 'target_user_login')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    target_user_id = sgqlc.types.Field(ID, graphql_name='targetUserID')
    target_user_login = sgqlc.types.Field(String, graphql_name='targetUserLogin')


class AddRadioRecentlyPlayedInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('content_type', 'id')
    content_type = sgqlc.types.Field(sgqlc.types.non_null(RadioRecentlyPlayedType), graphql_name='contentType')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class AddReactionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('emote_id', 'entity_id')
    emote_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='emoteID')
    entity_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='entityID')


class AddRecommendationFeedbackInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('category', 'item_id', 'item_type', 'source_item_page', 'source_item_request_id', 'source_item_tracking_id')
    category = sgqlc.types.Field(sgqlc.types.non_null(RecommendationFeedbackCategory), graphql_name='category')
    item_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='itemID')
    item_type = sgqlc.types.Field(sgqlc.types.non_null(RecommendationFeedbackType), graphql_name='itemType')
    source_item_page = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceItemPage')
    source_item_request_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='sourceItemRequestID')
    source_item_tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='sourceItemTrackingID')


class AddStreamAuthorizedUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('authorized_user_id', 'channel_id')
    authorized_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='authorizedUserID')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class AllocateKeysForBountyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bounty_id', 'user_id')
    bounty_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='bountyID')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class AllowRejectedChatMessageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class AllowRejectedCheerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'target_user_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    target_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetUserID')


class ApplyExtensionActivationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('activations', 'channel_id')
    activations = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExtensionActivationInput'))), graphql_name='activations')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class ApproveUnbanRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'resolver_message')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    resolver_message = sgqlc.types.Field(String, graphql_name='resolverMessage')


class ArchiveChanletInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('chanlet_id',)
    chanlet_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='chanletID')


class ArchiveCommunityPointsCommunityGoalInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'goal_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    goal_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='goalID')


class ArchivePollInChannelInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class ArchivePollInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('poll_id',)
    poll_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='pollID')


class AssignExtensionBillingManagerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('extension_id', 'user_id')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class BanUserFromChatRoomInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('banned_user_login', 'channel_id', 'expires_in', 'reason')
    banned_user_login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='bannedUserLogin')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    expires_in = sgqlc.types.Field(String, graphql_name='expiresIn')
    reason = sgqlc.types.Field(String, graphql_name='reason')


class BanVideoCommenterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'commenter_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    commenter_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='commenterID')


class BeginUseBitsInExtensionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'extension_client_id', 'sku')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    extension_client_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionClientID')
    sku = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sku')


class BillingAuthInfo(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('recurly_fraud_session_id', 'three_dsecure_action_result_token_id')
    recurly_fraud_session_id = sgqlc.types.Field(ID, graphql_name='recurlyFraudSessionID')
    three_dsecure_action_result_token_id = sgqlc.types.Field(ID, graphql_name='threeDSecureActionResultTokenID')


class BitsBadgeTierEmoticonSetting(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('code', 'code_suffix', 'image_id1x', 'image_id2x', 'image_id4x')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')
    code_suffix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='codeSuffix')
    image_id1x = sgqlc.types.Field(String, graphql_name='imageID1x')
    image_id2x = sgqlc.types.Field(String, graphql_name='imageID2x')
    image_id4x = sgqlc.types.Field(String, graphql_name='imageID4x')


class BitsBadgeTierInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('delete_image', 'delete_title', 'emoticon_settings', 'image_data1x', 'image_data2x', 'image_data4x', 'is_enabled', 'threshold', 'title')
    delete_image = sgqlc.types.Field(Boolean, graphql_name='deleteImage')
    delete_title = sgqlc.types.Field(Boolean, graphql_name='deleteTitle')
    emoticon_settings = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BitsBadgeTierEmoticonSetting)), graphql_name='emoticonSettings')
    image_data1x = sgqlc.types.Field(String, graphql_name='imageData1x')
    image_data2x = sgqlc.types.Field(String, graphql_name='imageData2x')
    image_data4x = sgqlc.types.Field(String, graphql_name='imageData4x')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')
    threshold = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='threshold')
    title = sgqlc.types.Field(String, graphql_name='title')


class BitsChallengeConditionPoolRecipientWeightedShare(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('recipient_user_id', 'weight')
    recipient_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='recipientUserID')
    weight = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='weight')


class BitsEventConnectionCriteriaInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('sort_by', 'sort_direction', 'type', 'used_after', 'used_before')
    sort_by = sgqlc.types.Field(BitsEventSort, graphql_name='sortBy')
    sort_direction = sgqlc.types.Field(BitsEventSortDirection, graphql_name='sortDirection')
    type = sgqlc.types.Field(BitsEventType, graphql_name='type')
    used_after = sgqlc.types.Field(Time, graphql_name='usedAfter')
    used_before = sgqlc.types.Field(Time, graphql_name='usedBefore')


class BlockUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('reason', 'source_context', 'target_user_id')
    reason = sgqlc.types.Field(String, graphql_name='reason')
    source_context = sgqlc.types.Field(BlockContext, graphql_name='sourceContext')
    target_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetUserID')


class BountyCampaignChatCTAInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('country_code', 'title', 'url')
    country_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='countryCode')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class BountyCampaignVideoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('country', 'title', 'url')
    country = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='country')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class BulkApproveUnbanRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('ids',)
    ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='ids')


class BulkDenyUnbanRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('ids',)
    ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='ids')


class CancelActiveBoostOrdersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class CancelBountyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bounty_id', 'reason', 'user_id')
    bounty_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='bountyID')
    reason = sgqlc.types.Field(String, graphql_name='reason')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class CancelFriendRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('target_id',)
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')


class CancelPayoutOnboardingWorkflowInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('target_user_id',)
    target_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetUserID')


class CancelPredictionEventInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class CancelRaidInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('source_id',)
    source_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='sourceID')


class CancelSubscriptionGiftInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('origin_id', 'product_id')
    origin_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='originID')
    product_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='productID')


class CancelUnbanRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class CelebrationProductConfigInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('intensity', 'is_enabled', 'offer_id')
    intensity = sgqlc.types.Field(sgqlc.types.non_null(CelebrationIntensity), graphql_name='intensity')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')
    offer_id = sgqlc.types.Field(ID, graphql_name='offerID')


class ChangeUsernameInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('login', 'user_id')
    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='login')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class ChannelClipsCreationAuthRestrictionOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('following_length_minutes',)
    following_length_minutes = sgqlc.types.Field(Int, graphql_name='followingLengthMinutes')


class ChannelClipsCreationRestrictedToInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('followers', 'subscribers')
    followers = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='followers')
    subscribers = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='subscribers')


class ChargeInstrumentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class CheckoutConfigurationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_anonymous', 'is_gift', 'is_reactivate_recurring', 'mystery_gift_count', 'payment_session', 'recipient_id', 'tax_country_code')
    is_anonymous = sgqlc.types.Field(Boolean, graphql_name='isAnonymous')
    is_gift = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isGift')
    is_reactivate_recurring = sgqlc.types.Field(Boolean, graphql_name='isReactivateRecurring')
    mystery_gift_count = sgqlc.types.Field(Int, graphql_name='mysteryGiftCount')
    payment_session = sgqlc.types.Field('PaymentSession', graphql_name='paymentSession')
    recipient_id = sgqlc.types.Field(ID, graphql_name='recipientID')
    tax_country_code = sgqlc.types.Field(String, graphql_name='taxCountryCode')


class ClaimBountyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bounty_campaign_id', 'bounty_id', 'platform', 'region', 'user_id')
    bounty_campaign_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='bountyCampaignID')
    bounty_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='bountyID')
    platform = sgqlc.types.Field(String, graphql_name='platform')
    region = sgqlc.types.Field(String, graphql_name='region')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class ClaimCommunityPointsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'claim_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    claim_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='claimID')


class ClaimDropRewardsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('drop_instance_id',)
    drop_instance_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='dropInstanceID')


class ClaimPrimeOfferInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('offer_id',)
    offer_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='offerID')


class ClipSegmentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('duration_seconds', 'offset_seconds', 'speed')
    duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='durationSeconds')
    offset_seconds = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='offsetSeconds')
    speed = sgqlc.types.Field(Float, graphql_name='speed')


class CloneExtensionDiscoveryDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'new_version', 'version')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    new_version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='newVersion')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')


class CloneExtensionManifestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'new_version', 'version')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    new_version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='newVersion')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')


class CollectionOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('include_all_items',)
    include_all_items = sgqlc.types.Field(Boolean, graphql_name='includeAllItems')


class CollectionsOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('include_empty', 'with_video_id')
    include_empty = sgqlc.types.Field(Boolean, graphql_name='includeEmpty')
    with_video_id = sgqlc.types.Field(ID, graphql_name='withVideoID')


class CommunityPointsCustomRewardGlobalCooldownSettingInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('global_cooldown_seconds', 'is_enabled')
    global_cooldown_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='globalCooldownSeconds')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class CommunityPointsCustomRewardMaxPerStreamSettingInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'max_per_stream')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    max_per_stream = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='maxPerStream')


class CommunityPointsCustomRewardMaxPerUserPerStreamSettingInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'max_per_user_per_stream')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    max_per_user_per_stream = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='maxPerUserPerStream')


class CommunityPointsRedemptionQueueOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('order', 'reward_id', 'status')
    order = sgqlc.types.Field(CommunityPointsCustomRewardRedemptionQueueSortOrder, graphql_name='order')
    reward_id = sgqlc.types.Field(ID, graphql_name='rewardID')
    status = sgqlc.types.Field(CommunityPointsCustomRewardRedemptionStatus, graphql_name='status')


class ComponentActivationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('slot', 'x', 'y')
    slot = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slot')
    x = sgqlc.types.Field(Int, graphql_name='x')
    y = sgqlc.types.Field(Int, graphql_name='y')


class ComponentViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('aspect_height', 'aspect_width', 'has_zoom', 'size', 'viewer_path', 'zoom_pixels')
    aspect_height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='aspectHeight')
    aspect_width = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='aspectWidth')
    has_zoom = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasZoom')
    size = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='size')
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')
    zoom_pixels = sgqlc.types.Field(Int, graphql_name='zoomPixels')


class ConfigViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('viewer_path',)
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')


class ConnectAdIdentityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mobile', 'target_device_id')
    mobile = sgqlc.types.Field('MobileAdIdentityInput', graphql_name='mobile')
    target_device_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetDeviceID')


class ContributeCommunityPointsCommunityGoalInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('amount', 'channel_id', 'goal_id', 'transaction_id')
    amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='amount')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    goal_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='goalID')
    transaction_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='transactionID')


class ContributeToChallengeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bits', 'challenge_id', 'user_id')
    bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bits')
    challenge_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='challengeID')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class CreateBadgeFlairInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'image1x_id', 'image2x_id', 'image4x_id', 'tier')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    image1x_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='image1xID')
    image2x_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='image2xID')
    image4x_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='image4xID')
    tier = sgqlc.types.Field(sgqlc.types.non_null(CreatorBadgeFlairTier), graphql_name='tier')


class CreateBitsChallengeConditionForExtensionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bits_recipient_weighted_shares', 'description', 'disable_when_satisfied', 'extension_id', 'extension_installation_channel_id', 'name', 'timeout_at')
    bits_recipient_weighted_shares = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BitsChallengeConditionPoolRecipientWeightedShare)), graphql_name='bitsRecipientWeightedShares')
    description = sgqlc.types.Field(String, graphql_name='description')
    disable_when_satisfied = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='disableWhenSatisfied')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')
    extension_installation_channel_id = sgqlc.types.Field(ID, graphql_name='extensionInstallationChannelID')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    timeout_at = sgqlc.types.Field(Time, graphql_name='timeoutAt')


class CreateBitsChallengeConditionParticipantForExtensionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bits_amount', 'condition_id', 'condition_owner_id', 'extension_id', 'ttl_seconds')
    bits_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bitsAmount')
    condition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='conditionID')
    condition_owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='conditionOwnerID')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')
    ttl_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='ttlSeconds')


class CreateBountyCampaignInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('available_platforms', 'blacklisted_broadcasters', 'box_art_url', 'broadcaster_message', 'broadcaster_multiplier', 'budget_cents', 'chat_ctas', 'content_id', 'cover_url', 'display_name', 'end_at', 'is_promotion_eligible', 'organization_id', 'should_allow_all_games', 'sponsor', 'start_at', 'stream_length_minutes', 'stream_length_seconds', 'target_all_broadcasters', 'target_all_countries', 'target_all_games', 'target_promotional_video_clicks', 'target_variety_broadcasters', 'targeted_countries', 'targeted_games', 'title', 'tracking_pixels', 'type', 'video_url', 'videos')
    available_platforms = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='availablePlatforms')
    blacklisted_broadcasters = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='blacklistedBroadcasters')
    box_art_url = sgqlc.types.Field(String, graphql_name='boxArtURL')
    broadcaster_message = sgqlc.types.Field(String, graphql_name='broadcasterMessage')
    broadcaster_multiplier = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='broadcasterMultiplier')
    budget_cents = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='budgetCents')
    chat_ctas = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BountyCampaignChatCTAInput)), graphql_name='chatCTAs')
    content_id = sgqlc.types.Field(ID, graphql_name='contentID')
    cover_url = sgqlc.types.Field(String, graphql_name='coverURL')
    display_name = sgqlc.types.Field(String, graphql_name='displayName')
    end_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endAt')
    is_promotion_eligible = sgqlc.types.Field(Boolean, graphql_name='isPromotionEligible')
    organization_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='organizationID')
    should_allow_all_games = sgqlc.types.Field(Boolean, graphql_name='shouldAllowAllGames')
    sponsor = sgqlc.types.Field(String, graphql_name='sponsor')
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')
    stream_length_minutes = sgqlc.types.Field(Int, graphql_name='streamLengthMinutes')
    stream_length_seconds = sgqlc.types.Field(Int, graphql_name='streamLengthSeconds')
    target_all_broadcasters = sgqlc.types.Field(Boolean, graphql_name='targetAllBroadcasters')
    target_all_countries = sgqlc.types.Field(Boolean, graphql_name='targetAllCountries')
    target_all_games = sgqlc.types.Field(Boolean, graphql_name='targetAllGames')
    target_promotional_video_clicks = sgqlc.types.Field(Int, graphql_name='targetPromotionalVideoClicks')
    target_variety_broadcasters = sgqlc.types.Field(Boolean, graphql_name='targetVarietyBroadcasters')
    targeted_countries = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='targetedCountries')
    targeted_games = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='targetedGames')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    tracking_pixels = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TrackingPixelInput')), graphql_name='trackingPixels')
    type = sgqlc.types.Field(BountyCampaignType, graphql_name='type')
    video_url = sgqlc.types.Field(String, graphql_name='videoURL')
    videos = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BountyCampaignVideoInput)), graphql_name='videos')


class CreateBountyCampaignUploadConfigInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('organization_id', 'upload_type')
    organization_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='organizationID')
    upload_type = sgqlc.types.Field(sgqlc.types.non_null(BountyCampaignUploadType), graphql_name='uploadType')


class CreateCelebrationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('area', 'channel_id', 'duration_milliseconds', 'effect', 'event_threshold', 'event_type', 'intensity', 'is_enabled')
    area = sgqlc.types.Field(sgqlc.types.non_null(CelebrationArea), graphql_name='area')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    duration_milliseconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationMilliseconds')
    effect = sgqlc.types.Field(sgqlc.types.non_null(CelebrationEffect), graphql_name='effect')
    event_threshold = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='eventThreshold')
    event_type = sgqlc.types.Field(sgqlc.types.non_null(CelebrationEventType), graphql_name='eventType')
    intensity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='intensity')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class CreateChanletInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class CreateClipInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('broadcast_id', 'broadcaster_id', 'offset_seconds', 'video_id')
    broadcast_id = sgqlc.types.Field(ID, graphql_name='broadcastID')
    broadcaster_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='broadcasterID')
    offset_seconds = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='offsetSeconds')
    video_id = sgqlc.types.Field(ID, graphql_name='videoID')


class CreateCollectionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('description', 'owner_id', 'title')
    description = sgqlc.types.Field(String, graphql_name='description')
    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='ownerID')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CreateCommunityPointsCommunityGoalInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('amount_needed', 'background_color', 'channel_id', 'description', 'duration_days', 'title')
    amount_needed = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='amountNeeded')
    background_color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='backgroundColor')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    description = sgqlc.types.Field(String, graphql_name='description')
    duration_days = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationDays')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CreateCommunityPointsCustomRewardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('background_color', 'channel_id', 'cost', 'global_cooldown_setting', 'is_sub_only', 'is_user_input_required', 'max_per_stream_setting', 'max_per_user_per_stream_setting', 'prompt', 'should_redemptions_skip_request_queue', 'template_id', 'title')
    background_color = sgqlc.types.Field(String, graphql_name='backgroundColor')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cost')
    global_cooldown_setting = sgqlc.types.Field(CommunityPointsCustomRewardGlobalCooldownSettingInput, graphql_name='globalCooldownSetting')
    is_sub_only = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSubOnly')
    is_user_input_required = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isUserInputRequired')
    max_per_stream_setting = sgqlc.types.Field(CommunityPointsCustomRewardMaxPerStreamSettingInput, graphql_name='maxPerStreamSetting')
    max_per_user_per_stream_setting = sgqlc.types.Field(CommunityPointsCustomRewardMaxPerUserPerStreamSettingInput, graphql_name='maxPerUserPerStreamSetting')
    prompt = sgqlc.types.Field(String, graphql_name='prompt')
    should_redemptions_skip_request_queue = sgqlc.types.Field(Boolean, graphql_name='shouldRedemptionsSkipRequestQueue')
    template_id = sgqlc.types.Field(ID, graphql_name='templateID')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CreateCommunityPointsImageUploadInfoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('automatic_reward_type', 'channel_id', 'custom_reward_id', 'goal_id', 'icon')
    automatic_reward_type = sgqlc.types.Field(CommunityPointsAutomaticRewardType, graphql_name='automaticRewardType')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    custom_reward_id = sgqlc.types.Field(ID, graphql_name='customRewardID')
    goal_id = sgqlc.types.Field(ID, graphql_name='goalID')
    icon = sgqlc.types.Field(Boolean, graphql_name='icon')


class CreateCompetitionContactInfoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('discord_url', 'email')
    discord_url = sgqlc.types.Field(String, graphql_name='discordURL')
    email = sgqlc.types.Field(String, graphql_name='email')


class CreateCompetitionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('banner_image_url', 'check_in_duration_minutes', 'description', 'end_at', 'format_type', 'game_id', 'image_url', 'leaderboard_details', 'name', 'owner_id', 'participant_only_contact_info', 'participant_type', 'prize_description', 'public_contact_info', 'registration_end_at', 'registration_limit', 'registration_type', 'rules_description', 'start_at', 'state', 'team_size', 'terms_url')
    banner_image_url = sgqlc.types.Field(String, graphql_name='bannerImageURL')
    check_in_duration_minutes = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='checkInDurationMinutes')
    description = sgqlc.types.Field(String, graphql_name='description')
    end_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endAt')
    format_type = sgqlc.types.Field(sgqlc.types.non_null(FormatType), graphql_name='formatType')
    game_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='gameID')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    leaderboard_details = sgqlc.types.Field('CreateCompetitionLeaderboardDetailsInput', graphql_name='leaderboardDetails')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner_id = sgqlc.types.Field(ID, graphql_name='ownerID')
    participant_only_contact_info = sgqlc.types.Field(CreateCompetitionContactInfoInput, graphql_name='participantOnlyContactInfo')
    participant_type = sgqlc.types.Field(sgqlc.types.non_null(CompetitionParticipantType), graphql_name='participantType')
    prize_description = sgqlc.types.Field(String, graphql_name='prizeDescription')
    public_contact_info = sgqlc.types.Field(CreateCompetitionContactInfoInput, graphql_name='publicContactInfo')
    registration_end_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='registrationEndAt')
    registration_limit = sgqlc.types.Field(Int, graphql_name='registrationLimit')
    registration_type = sgqlc.types.Field(sgqlc.types.non_null(RegistrationType), graphql_name='registrationType')
    rules_description = sgqlc.types.Field(String, graphql_name='rulesDescription')
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')
    state = sgqlc.types.Field(CompetitionState, graphql_name='state')
    team_size = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='teamSize')
    terms_url = sgqlc.types.Field(String, graphql_name='termsURL')


class CreateCompetitionLeaderboardDetailsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('lobby_max_size', 'phase_count', 'tiebreaker_label')
    lobby_max_size = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='lobbyMaxSize')
    phase_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='phaseCount')
    tiebreaker_label = sgqlc.types.Field(TiebreakerLabel, graphql_name='tiebreakerLabel')


class CreateContentTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('author_id', 'content_id', 'content_type', 'tag_ids')
    author_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='authorID')
    content_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='contentID')
    content_type = sgqlc.types.Field(sgqlc.types.non_null(ContentType), graphql_name='contentType')
    tag_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='tagIDs')


class CreateDropBenefitInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('account_link_url', 'benefit_id', 'benefit_name', 'entitlement_limit', 'game_id', 'is_ios_available', 'owner_id')
    account_link_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='accountLinkURL')
    benefit_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='benefitID')
    benefit_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='benefitName')
    entitlement_limit = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='entitlementLimit')
    game_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='gameID')
    is_ios_available = sgqlc.types.Field(Boolean, graphql_name='isIosAvailable')
    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='ownerID')


class CreateDropCampaignInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('account_link_url', 'campaign_type', 'description', 'details_url', 'end_at', 'game_id', 'name', 'owner_id', 'start_at')
    account_link_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='accountLinkURL')
    campaign_type = sgqlc.types.Field(CampaignType, graphql_name='campaignType')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    details_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='detailsURL')
    end_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endAt')
    game_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='gameID')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='ownerID')
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')


class CreateDropImageUploadURLInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('campaign_id', 'image_type', 'item_id', 'service_id', 'token')
    campaign_id = sgqlc.types.Field(ID, graphql_name='campaignID')
    image_type = sgqlc.types.Field(sgqlc.types.non_null(DropImageType), graphql_name='imageType')
    item_id = sgqlc.types.Field(ID, graphql_name='itemID')
    service_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='serviceID')
    token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='token')


class CreateExtensionClientInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('name', 'organization_id', 'redirect_uri')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    organization_id = sgqlc.types.Field(ID, graphql_name='organizationID')
    redirect_uri = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='redirectURI')


class CreateExtensionImageUploadInfoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('discovery', 'extension_id', 'logo', 'screenshots', 'taskbar')
    discovery = sgqlc.types.Field(Boolean, graphql_name='discovery')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')
    logo = sgqlc.types.Field(Boolean, graphql_name='logo')
    screenshots = sgqlc.types.Field(Int, graphql_name='screenshots')
    taskbar = sgqlc.types.Field(Boolean, graphql_name='taskbar')


class CreateExtensionZipUploadInfoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('extension_id', 'filename')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')
    filename = sgqlc.types.Field(String, graphql_name='filename')


class CreateFriendRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('target_id',)
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')


class CreateGameApplicationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('company_id', 'game_id')
    company_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='companyID')
    game_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='gameID')


class CreateGameBoxArtUploadURLInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('game_id',)
    game_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='gameID')


class CreateLoyaltyBadgeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'image1x_id', 'image2x_id', 'image4x_id', 'required_tenure_months')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    image1x_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='image1xID')
    image2x_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='image2xID')
    image4x_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='image4xID')
    required_tenure_months = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='requiredTenureMonths')


class CreateLoyaltyBadgeUploadConfigInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'size')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    size = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='size')


class CreateModeratorCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'target_id', 'text')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class CreateMultiVideoHighlightInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('metadata',)
    metadata = sgqlc.types.Field(sgqlc.types.non_null('CreateMultiVideoHighlightMetadata'), graphql_name='metadata')


class CreateMultiVideoHighlightMetadata(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('creator_id', 'description', 'game', 'highlight_ranges', 'language', 'tags', 'title')
    creator_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='creatorID')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    game = sgqlc.types.Field(ID, graphql_name='game')
    highlight_ranges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HighlightRange'))), graphql_name='highlightRanges')
    language = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='language')
    tags = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='tags')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CreateMultiviewContentAttributeImageUploadConfigInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class CreateMultiviewContentAttributesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('params',)
    params = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('MultiviewContentAttributeParams'))), graphql_name='params')


class CreateOrganizationApplicationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('city', 'contact_email', 'contact_first_name', 'contact_last_name', 'contact_title', 'country', 'game_ids', 'industry', 'join_reason', 'organization_name', 'product_interest', 'size', 'state', 'type', 'user_id', 'website')
    city = sgqlc.types.Field(String, graphql_name='city')
    contact_email = sgqlc.types.Field(String, graphql_name='contactEmail')
    contact_first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='contactFirstName')
    contact_last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='contactLastName')
    contact_title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='contactTitle')
    country = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='country')
    game_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='gameIDs')
    industry = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='industry')
    join_reason = sgqlc.types.Field(String, graphql_name='joinReason')
    organization_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='organizationName')
    product_interest = sgqlc.types.Field(String, graphql_name='productInterest')
    size = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='size')
    state = sgqlc.types.Field(String, graphql_name='state')
    type = sgqlc.types.Field(sgqlc.types.non_null(OrganizationType), graphql_name='type')
    user_id = sgqlc.types.Field(ID, graphql_name='userID')
    website = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='website')


class CreateOrganizationInviteInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('invitee_twitch_id', 'inviter_twitch_id', 'organization_id', 'role')
    invitee_twitch_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='inviteeTwitchID')
    inviter_twitch_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='inviterTwitchID')
    organization_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='organizationID')
    role = sgqlc.types.Field(sgqlc.types.non_null(OrganizationMemberRole), graphql_name='role')


class CreateOrganizationJWTInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('operation', 'organization_id')
    operation = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='operation')
    organization_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='organizationID')


class CreateOrganizationMemberInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('email', 'first_name', 'last_name', 'organization_id', 'role', 'title', 'user_id')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    organization_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='organizationID')
    role = sgqlc.types.Field(sgqlc.types.non_null(OrganizationMemberRole), graphql_name='role')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class CreatePanelImageUploadInfoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'height', 'left', 'top', 'width')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='height')
    left = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='left')
    top = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='top')
    width = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='width')


class CreatePanelInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'description', 'image_url', 'link_url', 'slot_id', 'title', 'type')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    description = sgqlc.types.Field(String, graphql_name='description')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    link_url = sgqlc.types.Field(String, graphql_name='linkURL')
    slot_id = sgqlc.types.Field(String, graphql_name='slotID')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(PanelType), graphql_name='type')


class CreatePartnershipApplicationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('category', 'country', 'description', 'full_name', 'language')
    category = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='category')
    country = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='country')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    full_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='fullName')
    language = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='language')


class CreatePollChoiceInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('title',)
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CreatePollInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bits_cost', 'bits_voting', 'choices', 'community_points_cost', 'duration_seconds', 'is_community_points_voting_enabled', 'multichoice_enabled', 'owned_by', 'subscriber_multiplier', 'subscriber_only', 'title')
    bits_cost = sgqlc.types.Field(Int, graphql_name='bitsCost')
    bits_voting = sgqlc.types.Field(Boolean, graphql_name='bitsVoting')
    choices = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CreatePollChoiceInput))), graphql_name='choices')
    community_points_cost = sgqlc.types.Field(Int, graphql_name='communityPointsCost')
    duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationSeconds')
    is_community_points_voting_enabled = sgqlc.types.Field(Boolean, graphql_name='isCommunityPointsVotingEnabled')
    multichoice_enabled = sgqlc.types.Field(Boolean, graphql_name='multichoiceEnabled')
    owned_by = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='ownedBy')
    subscriber_multiplier = sgqlc.types.Field(Boolean, graphql_name='subscriberMultiplier')
    subscriber_only = sgqlc.types.Field(Boolean, graphql_name='subscriberOnly')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CreatePostInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('body', 'channel_id', 'embed_urls', 'post_to_twitter')
    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='body')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    embed_urls = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='embedURLs')
    post_to_twitter = sgqlc.types.Field(Boolean, graphql_name='postToTwitter')


class CreatePredictionEventInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'outcomes', 'prediction_window_seconds', 'title')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    outcomes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CreatePredictionOutcomeInput'))), graphql_name='outcomes')
    prediction_window_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='predictionWindowSeconds')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CreatePredictionOutcomeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('color', 'title')
    color = sgqlc.types.Field(sgqlc.types.non_null(PredictionOutcomeColor), graphql_name='color')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CreateRaidInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('source_id', 'target_id')
    source_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='sourceID')
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')


class CreateRewardedVideoTokenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('user_id',)
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class CreateRoomInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_previewable', 'minimum_allowed_role', 'minimum_read_messages_role', 'minimum_send_messages_role', 'name', 'topic')
    is_previewable = sgqlc.types.Field(Boolean, graphql_name='isPreviewable')
    minimum_allowed_role = sgqlc.types.Field(RoomRole, graphql_name='minimumAllowedRole')
    minimum_read_messages_role = sgqlc.types.Field(RoomRole, graphql_name='minimumReadMessagesRole')
    minimum_send_messages_role = sgqlc.types.Field(RoomRole, graphql_name='minimumSendMessagesRole')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    topic = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='topic')


class CreateScheduleInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class CreateScheduleSegmentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('categories', 'duration_minutes', 'first_occurrence_date', 'repeat_ends_after_count', 'schedule_id', 'start', 'timezone', 'title')
    categories = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='categories')
    duration_minutes = sgqlc.types.Field(Int, graphql_name='durationMinutes')
    first_occurrence_date = sgqlc.types.Field(Time, graphql_name='firstOccurrenceDate')
    repeat_ends_after_count = sgqlc.types.Field(Int, graphql_name='repeatEndsAfterCount')
    schedule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='scheduleID')
    start = sgqlc.types.Field('SegmentStartTimeInput', graphql_name='start')
    timezone = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='timezone')
    title = sgqlc.types.Field(String, graphql_name='title')


class CreateSocialMediaInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'title', 'url')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class CreateSquadStreamInvitationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('recipient_user_id', 'sender_user_id')
    recipient_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='recipientUserID')
    sender_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='senderUserID')


class CreateStuccoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'description', 'image_data1x', 'image_data2x', 'image_data4x', 'suffix')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    image_data1x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageData1x')
    image_data2x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageData2x')
    image_data4x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageData4x')
    suffix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='suffix')


class CreateStuccoPackInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'stuccos')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    stuccos = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CreateStuccoPackItemInput')), graphql_name='stuccos')


class CreateStuccoPackItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('slot_index', 'stucco_id')
    slot_index = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='slotIndex')
    stucco_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='stuccoID')


class CreateUnbanRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'requester_message')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    requester_message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='requesterMessage')


class CreateVideoBookmarkInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('broadcast_id', 'channel_id', 'description', 'medium', 'platform')
    broadcast_id = sgqlc.types.Field(ID, graphql_name='broadcastID')
    channel_id = sgqlc.types.Field(ID, graphql_name='channelID')
    description = sgqlc.types.Field(String, graphql_name='description')
    medium = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='medium')
    platform = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='platform')


class CreateVideoCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('comment_id', 'content_offset_seconds', 'message', 'video_id')
    comment_id = sgqlc.types.Field(ID, graphql_name='commentID')
    content_offset_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='contentOffsetSeconds')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')
    video_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='videoID')


class CreateVideoHighlightInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('end_offset_seconds', 'metadata', 'source_video_id', 'start_offset_seconds')
    end_offset_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='endOffsetSeconds')
    metadata = sgqlc.types.Field(sgqlc.types.non_null('CreateVideoHighlightMetadata'), graphql_name='metadata')
    source_video_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='sourceVideoID')
    start_offset_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='startOffsetSeconds')


class CreateVideoHighlightMetadata(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('description', 'game', 'language', 'tags', 'title')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    game = sgqlc.types.Field(ID, graphql_name='game')
    language = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='language')
    tags = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='tags')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CreateVideoThumbnailUploadRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('crop_h', 'crop_w', 'crop_x', 'crop_y', 'video_id')
    crop_h = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cropH')
    crop_w = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cropW')
    crop_x = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cropX')
    crop_y = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cropY')
    video_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='videoID')


class DeactivateExtensionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('extension_installation_id',)
    extension_installation_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionInstallationID')


class DeclineOrganizationInviteInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('organization_invite_id',)
    organization_invite_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='organizationInviteID')


class DeleteAllChannelVideosInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class DeleteBitsBadgeTierEmoticonInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'emote_id', 'text', 'threshold')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    emote_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='emoteID')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')
    threshold = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='threshold')


class DeleteCelebrationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('celebration_id', 'channel_id')
    celebration_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='celebrationID')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class DeleteChannelBlockedTermInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'phrases')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    phrases = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='phrases')


class DeleteChannelClipsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class DeleteChannelPermittedTermInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'phrases')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    phrases = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='phrases')


class DeleteChatMessageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'message_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    message_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='messageID')


class DeleteCheermoteTierInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('tier_threshold', 'user_id')
    tier_threshold = sgqlc.types.Field(sgqlc.types.non_null(CheermoteTierThreshold), graphql_name='tierThreshold')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class DeleteClipsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('broadcast_id', 'slugs', 'video_id')
    broadcast_id = sgqlc.types.Field(ID, graphql_name='broadcastID')
    slugs = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='slugs')
    video_id = sgqlc.types.Field(ID, graphql_name='videoID')


class DeleteCollectionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('collection_id',)
    collection_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='collectionID')


class DeleteCommunityPointsCommunityGoalInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'goal_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    goal_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='goalID')


class DeleteCommunityPointsCustomRewardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'reward_id', 'unfulfilled_redemptions_new_status')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    reward_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='rewardID')
    unfulfilled_redemptions_new_status = sgqlc.types.Field(CommunityPointsCustomRewardRedemptionStatus, graphql_name='unfulfilledRedemptionsNewStatus')


class DeleteCompetitionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class DeleteContentTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('author_id', 'content_id', 'content_type', 'tag_ids')
    author_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='authorID')
    content_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='contentID')
    content_type = sgqlc.types.Field(sgqlc.types.non_null(ContentType), graphql_name='contentType')
    tag_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='tagIDs')


class DeleteDefaultPaymentMethodInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('provider', 'user_id')
    provider = sgqlc.types.Field(sgqlc.types.non_null(PaymentProvider), graphql_name='provider')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class DeleteDeviceTokenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('device_token', 'user_id')
    device_token = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='deviceToken')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class DeleteDropCampaignInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('campaign_id',)
    campaign_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='campaignID')


class DeleteDropInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('drop_id',)
    drop_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='dropID')


class DeleteEmoteInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class DeleteExtensionImageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('extension_id', 'urls')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')
    urls = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='urls')


class DeleteExtensionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class DeleteExtensionSecretsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('extension_id',)
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')


class DeleteLoyaltyBadgeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('badge_id', 'channel_id', 'channel_tenure_method_id')
    badge_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='badgeID')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    channel_tenure_method_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelTenureMethodID')


class DeleteModeratorCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null('ID'), graphql_name='ID')


class DeleteMultiviewContentAttributesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('ids',)
    ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='IDs')


class DeleteNotificationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class DeletePanelInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class DeletePostInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('post_id',)
    post_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='postID')


class DeleteRecommendationFeedbackInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('feedback_id', 'source_item_page')
    feedback_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='feedbackID')
    source_item_page = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceItemPage')


class DeleteRoomInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('room_id',)
    room_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='roomID')


class DeleteRoomMessageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('message_id', 'room_id')
    message_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='messageID')
    room_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='roomID')


class DeleteScheduleInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'schedule_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    schedule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='scheduleID')


class DeleteScheduleSegmentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('schedule_id', 'segment_id')
    schedule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='scheduleID')
    segment_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='segmentID')


class DeleteSocialMediaInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class DeleteSquadStreamInvitationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('invitation_id',)
    invitation_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='invitationID')


class DeleteStreamAuthorizedUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('authorized_user_id', 'channel_id')
    authorized_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='authorizedUserID')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class DeleteUserClipsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('user_id',)
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class DeleteUserColorsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('user_id',)
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class DeleteVideosInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('video_ids',)
    video_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='videoIDs')


class DenyRejectedChatMessageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class DenyRejectedCheerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'target_user_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    target_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetUserID')


class DenyUnbanRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'resolver_message')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    resolver_message = sgqlc.types.Field(String, graphql_name='resolverMessage')


class DeselectChannelBadgeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class DisableTwoFactorInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('user_id',)
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class DisableUserAccountInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('description', 'is_delete', 'user_id')
    description = sgqlc.types.Field(String, graphql_name='description')
    is_delete = sgqlc.types.Field(Boolean, graphql_name='isDelete')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class DismissFriendRecommendationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('target_id',)
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')


class DismissRitualTokenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'type')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    type = sgqlc.types.Field(sgqlc.types.non_null(RitualTokenType), graphql_name='type')


class DismissVideoSuggestedHighlightInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('video_id',)
    video_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='videoID')


class DropEventConditionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('key', 'operator', 'value')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    operator = sgqlc.types.Field(sgqlc.types.non_null(DropEventConditionOperator), graphql_name='operator')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')


class DropImageUploadInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('owner_id', 'reference_id', 'scope')
    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='ownerID')
    reference_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='referenceID')
    scope = sgqlc.types.Field(sgqlc.types.non_null(Scope), graphql_name='scope')


class DropPrecondition(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('drop_id', 'drop_precondition_id')
    drop_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='dropID')
    drop_precondition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='dropPreconditionID')


class EditRoomMessageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('message', 'message_id', 'room_id')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')
    message_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='messageID')
    room_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='roomID')


class EmitCampaignDiscoveryEventInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'discovery_type')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    discovery_type = sgqlc.types.Field(sgqlc.types.non_null(CampaignDiscoveryEventType), graphql_name='discoveryType')


class EmoteImageAssetInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('asset_type', 'id', 'size')
    asset_type = sgqlc.types.Field(sgqlc.types.non_null(EmoteAssetType), graphql_name='assetType')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    size = sgqlc.types.Field(sgqlc.types.non_null(EmoteImageSize), graphql_name='size')


class EmoteModifierGroupInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('modifiers', 'product_id')
    modifiers = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(PermanentEmoteModifier))), graphql_name='modifiers')
    product_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='productID')


class EmoteOrder(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('emote_id', 'group_id', 'order')
    emote_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='emoteID')
    group_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='groupID')
    order = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='order')


class EndUseBitsInExtensionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('transaction_id',)
    transaction_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='transactionID')


class ExportVideoToYoutubeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('description', 'do_split', 'private', 'tags', 'title', 'video_id')
    description = sgqlc.types.Field(String, graphql_name='description')
    do_split = sgqlc.types.Field(Boolean, graphql_name='doSplit')
    private = sgqlc.types.Field(Boolean, graphql_name='private')
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tags')
    title = sgqlc.types.Field(String, graphql_name='title')
    video_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='videoID')


class ExtensionActivationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('component', 'installation_id', 'panel', 'video_overlay')
    component = sgqlc.types.Field(ComponentActivationInput, graphql_name='component')
    installation_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='installationID')
    panel = sgqlc.types.Field('PanelActivationInput', graphql_name='panel')
    video_overlay = sgqlc.types.Field('VideoOverlayActivationInput', graphql_name='videoOverlay')


class ExtensionAssetManifestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('asset_hash',)
    asset_hash = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='assetHash')


class ExtensionCapabilitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bits_support_level', 'configuration_location', 'has_bits_support', 'has_chat_support', 'required_configuration', 'subscriptions_support_level', 'whitelists', 'will_request_identity_link')
    bits_support_level = sgqlc.types.Field(ExtensionBitsSupportLevel, graphql_name='bitsSupportLevel')
    configuration_location = sgqlc.types.Field(sgqlc.types.non_null(ExtensionConfigurationLocation), graphql_name='configurationLocation')
    has_bits_support = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasBitsSupport')
    has_chat_support = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasChatSupport')
    required_configuration = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='requiredConfiguration')
    subscriptions_support_level = sgqlc.types.Field(ExtensionSubscriptionsSupportLevel, graphql_name='subscriptionsSupportLevel')
    whitelists = sgqlc.types.Field(sgqlc.types.non_null('ExtensionWhitelistsInput'), graphql_name='whitelists')
    will_request_identity_link = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='willRequestIdentityLink')


class ExtensionChallengeConditionByIDInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('condition_id', 'condition_owner_id')
    condition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='conditionID')
    condition_owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='conditionOwnerID')


class ExtensionChallengeConditionParticipantsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('condition_owner_id', 'condition_participant_owner_id', 'end_state')
    condition_owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='conditionOwnerID')
    condition_participant_owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='conditionParticipantOwnerID')
    end_state = sgqlc.types.Field(sgqlc.types.non_null(ChallengeConditionParticipantEndState), graphql_name='endState')


class ExtensionChallengeConditionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('condition_owner_id', 'state')
    condition_owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='conditionOwnerID')
    state = sgqlc.types.Field(sgqlc.types.non_null(ChallengeConditionState), graphql_name='state')


class ExtensionDeveloperManifestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('author_email', 'testing_base_uri')
    author_email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='authorEmail')
    testing_base_uri = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='testingBaseURI')


class ExtensionDiscoveryManifestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('author_name', 'categories', 'description', 'games', 'name', 'privacy_policy_url', 'summary', 'support_email', 'terms_url', 'viewer_summary')
    author_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='authorName')
    categories = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='categories')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    games = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='games')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    privacy_policy_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='privacyPolicyURL')
    summary = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='summary')
    support_email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='supportEmail')
    terms_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='termsURL')
    viewer_summary = sgqlc.types.Field(String, graphql_name='viewerSummary')


class ExtensionDynamicManagementInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('game_id', 'is_managed')
    game_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='gameID')
    is_managed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isManaged')


class ExtensionLinkUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'extension_id', 'jwt', 'show_user')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')
    jwt = sgqlc.types.Field(String, graphql_name='jwt')
    show_user = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='showUser')


class ExtensionViewsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('component', 'config', 'live_config', 'mobile', 'panel', 'video_overlay')
    component = sgqlc.types.Field(ComponentViewInput, graphql_name='component')
    config = sgqlc.types.Field(ConfigViewInput, graphql_name='config')
    live_config = sgqlc.types.Field('LiveConfigViewInput', graphql_name='liveConfig')
    mobile = sgqlc.types.Field('MobileViewInput', graphql_name='mobile')
    panel = sgqlc.types.Field('PanelViewInput', graphql_name='panel')
    video_overlay = sgqlc.types.Field('VideoOverlayViewInput', graphql_name='videoOverlay')


class ExtensionWhitelistsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('broadcasters', 'config_urls', 'panel_urls', 'testers')
    broadcasters = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='broadcasters')
    config_urls = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='configURLs')
    panel_urls = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='panelURLs')
    testers = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='testers')


class FinalizeCompetitionLobbyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('competition_id', 'lobby_id', 'phase_id')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    lobby_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='lobbyID')
    phase_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='phaseID')


class FollowGameInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('game_id',)
    game_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='gameID')


class FollowUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('disable_notifications', 'target_id')
    disable_notifications = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='disableNotifications')
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')


class GDPRConsent(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('allow_amazon', 'allow_comscore', 'allow_google', 'allow_nielsen', 'allow_salesforce')
    allow_amazon = sgqlc.types.Field(Boolean, graphql_name='allowAmazon')
    allow_comscore = sgqlc.types.Field(Boolean, graphql_name='allowComscore')
    allow_google = sgqlc.types.Field(Boolean, graphql_name='allowGoogle')
    allow_nielsen = sgqlc.types.Field(Boolean, graphql_name='allowNielsen')
    allow_salesforce = sgqlc.types.Field(Boolean, graphql_name='allowSalesforce')


class GameClipsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('broadcaster_id', 'curator_id', 'end_at', 'filter', 'languages', 'period', 'sort', 'start_at')
    broadcaster_id = sgqlc.types.Field(ID, graphql_name='broadcasterID')
    curator_id = sgqlc.types.Field(ID, graphql_name='curatorID')
    end_at = sgqlc.types.Field(Time, graphql_name='endAt')
    filter = sgqlc.types.Field(ClipsFilter, graphql_name='filter')
    languages = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Language)), graphql_name='languages')
    period = sgqlc.types.Field(ClipsPeriod, graphql_name='period')
    sort = sgqlc.types.Field(ClipsSort, graphql_name='sort')
    start_at = sgqlc.types.Field(Time, graphql_name='startAt')


class GameOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('locale', 'recommendations_context', 'request_id', 'sort', 'tags')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    recommendations_context = sgqlc.types.Field('RecommendationsContext', graphql_name='recommendationsContext')
    request_id = sgqlc.types.Field(ID, graphql_name='requestID')
    sort = sgqlc.types.Field(GameSort, graphql_name='sort')
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tags')


class GameStreamOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('include_restricted', 'languages', 'locale', 'recommendations_context', 'request_id', 'sort', 'tags')
    include_restricted = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StreamRestrictionType)), graphql_name='includeRestricted')
    languages = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='languages')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    recommendations_context = sgqlc.types.Field('RecommendationsContext', graphql_name='recommendationsContext')
    request_id = sgqlc.types.Field(ID, graphql_name='requestID')
    sort = sgqlc.types.Field(StreamSort, graphql_name='sort')
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tags')


class GenerateExtensionRatingsCSVReportInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('end_at', 'extension_id', 'start_at')
    end_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endAt')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')


class GenerateSecondFactorQRCodeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('user_id',)
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class GenerateSubscribersCSVInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='channelID')


class GetEmoteUploadConfigInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('asset_type', 'generate_static_version_of_animated_assets', 'resize_plan', 'sizes')
    asset_type = sgqlc.types.Field(EmoteAssetType, graphql_name='assetType')
    generate_static_version_of_animated_assets = sgqlc.types.Field(Boolean, graphql_name='generateStaticVersionOfAnimatedAssets')
    resize_plan = sgqlc.types.Field(sgqlc.types.non_null(EmoteResizePlan), graphql_name='resizePlan')
    sizes = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(EmoteImageSize)), graphql_name='sizes')


class GoRaidInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('source_id',)
    source_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='sourceID')


class GrantVIPInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'grantee_id', 'grantee_login')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    grantee_id = sgqlc.types.Field(ID, graphql_name='granteeID')
    grantee_login = sgqlc.types.Field(String, graphql_name='granteeLogin')


class HiddenViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('viewer_path',)
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')


class HighlightRange(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('end_ms', 'start_ms', 'vod_id')
    end_ms = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='endMs')
    start_ms = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='startMs')
    vod_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='vodID')


class HostTargetChannelInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'target_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')


class HypeTrainKickoffInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('events_threshold',)
    events_threshold = sgqlc.types.Field(Int, graphql_name='eventsThreshold')


class ImageOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('height', 'width')
    height = sgqlc.types.Field(Int, graphql_name='height')
    width = sgqlc.types.Field(Int, graphql_name='width')


class InstallExtensionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'extension_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')


class InterruptScheduleInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('end_at', 'reason', 'schedule_id', 'start_at', 'timezone')
    end_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endAt')
    reason = sgqlc.types.Field(sgqlc.types.non_null(ScheduleInterruptionReason), graphql_name='reason')
    schedule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='scheduleID')
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')
    timezone = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='timezone')


class InvalidateAuthenticatedSessionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('keep_session', 'user_id')
    keep_session = sgqlc.types.Field(String, graphql_name='keepSession')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class InvalidateEmailAssociationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('email', 'email_association_opaque_id')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    email_association_opaque_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='emailAssociationOpaqueID')


class JoinChannelRoomsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class JoinRaidInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('raid_id',)
    raid_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='raidID')


class LeaveChannelRoomsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class LeaveRaidInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('raid_id',)
    raid_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='raidID')


class LeaveSquadStreamInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('member_id', 'squad_stream_id')
    member_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='memberID')
    squad_stream_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='squadStreamID')


class LinkSSOInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')


class LiveConfigViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('viewer_path',)
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')


class LockPredictionEventInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class MakeKeyBatchDownloadURLInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('batch_id',)
    batch_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='batchID')


class MakePredictionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('event_id', 'outcome_id', 'points', 'transaction_id')
    event_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='eventID')
    outcome_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='outcomeID')
    points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='points')
    transaction_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='transactionID')


class ManuallyTriggerDropInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('campaign_id', 'drop_id', 'owner_id')
    campaign_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='campaignID')
    drop_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='dropID')
    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='ownerID')


class MarkAllCreatorNotificationsAsReadInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('user_id',)
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class MarkAllViewerNotificationsAsReadInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('user_id',)
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class MobileAdIdentityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('device_info', 'lmt', 'm_aid', 'platform', 'user_agent')
    device_info = sgqlc.types.Field(sgqlc.types.non_null('MobileDeviceInfo'), graphql_name='deviceInfo')
    lmt = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='lmt')
    m_aid = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='mAID')
    platform = sgqlc.types.Field(sgqlc.types.non_null(AdPlatform), graphql_name='platform')
    user_agent = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='userAgent')


class MobileDeviceInfo(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('make', 'model', 'os', 'os_version')
    make = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='make')
    model = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='model')
    os = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='os')
    os_version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='osVersion')


class MobileViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('viewer_path',)
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')


class ModUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'target_id', 'target_login')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    target_id = sgqlc.types.Field(ID, graphql_name='targetID')
    target_login = sgqlc.types.Field(String, graphql_name='targetLogin')


class MultiviewContentAttributeParams(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('child_ids', 'id', 'image_url', 'key', 'name', 'owner_channel_id', 'parent_id', 'parent_key', 'value', 'value_short_name')
    child_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='childIDs')
    id = sgqlc.types.Field(ID, graphql_name='id')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner_channel_id = sgqlc.types.Field(ID, graphql_name='ownerChannelID')
    parent_id = sgqlc.types.Field(ID, graphql_name='parentID')
    parent_key = sgqlc.types.Field(String, graphql_name='parentKey')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')
    value_short_name = sgqlc.types.Field(String, graphql_name='valueShortName')


class OfferAndStatus(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('offer_id', 'status')
    offer_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='offerID')
    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='status')


class OfferTagBindingInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('key', 'value')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')


class OrderPanelsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('ids',)
    ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='ids')


class OrganizationMembersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('role',)
    role = sgqlc.types.Field(OrganizationMemberRole, graphql_name='role')


class PanelActivationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('slot',)
    slot = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slot')


class PanelViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('height', 'viewer_path')
    height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='height')
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')


class PaymentSession(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('checkout_session_id', 'device_id', 'local_storage_device_id', 'offer_session_id', 'page_session_id', 'tab_session_id')
    checkout_session_id = sgqlc.types.Field(ID, graphql_name='checkoutSessionID')
    device_id = sgqlc.types.Field(ID, graphql_name='deviceID')
    local_storage_device_id = sgqlc.types.Field(ID, graphql_name='localStorageDeviceID')
    offer_session_id = sgqlc.types.Field(ID, graphql_name='offerSessionID')
    page_session_id = sgqlc.types.Field(ID, graphql_name='pageSessionID')
    tab_session_id = sgqlc.types.Field(ID, graphql_name='tabSessionID')


class PaymentTransactionConnectionCriteriaInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('purchased_after', 'purchased_before', 'sort_by', 'type', 'user_id')
    purchased_after = sgqlc.types.Field(Time, graphql_name='purchasedAfter')
    purchased_before = sgqlc.types.Field(Time, graphql_name='purchasedBefore')
    sort_by = sgqlc.types.Field(PaymentTransactionSort, graphql_name='sortBy')
    type = sgqlc.types.Field(PaymentTransactionTypeFilter, graphql_name='type')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class PersonalSectionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('context_channel_name', 'recommendation_context', 'section_inputs')
    context_channel_name = sgqlc.types.Field(String, graphql_name='contextChannelName')
    recommendation_context = sgqlc.types.Field('RecommendationsContext', graphql_name='recommendationContext')
    section_inputs = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(PersonalSectionType))), graphql_name='sectionInputs')


class PlaybackAccessTokenParams(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('disable_https', 'has_adblock', 'platform', 'player_backend', 'player_type')
    disable_https = sgqlc.types.Field(Boolean, graphql_name='disableHTTPS')
    has_adblock = sgqlc.types.Field(Boolean, graphql_name='hasAdblock')
    platform = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='platform')
    player_backend = sgqlc.types.Field(String, graphql_name='playerBackend')
    player_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='playerType')


class PollVoteTokensInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bits', 'channel_points')
    bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bits')
    channel_points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='channelPoints')


class PresignDevInsightsReportURLInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('domain', 'id', 'type')
    domain = sgqlc.types.Field(sgqlc.types.non_null(PresignDevInsightsReportURLDomain), graphql_name='domain')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    type = sgqlc.types.Field(PresignDevInsightsReportURLReportType, graphql_name='type')


class PublishClipInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('preview_offset_seconds', 'segments', 'slug', 'title')
    preview_offset_seconds = sgqlc.types.Field(Float, graphql_name='previewOffsetSeconds')
    segments = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ClipSegmentInput))), graphql_name='segments')
    slug = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='slug')
    title = sgqlc.types.Field(String, graphql_name='title')


class PublishCompetitionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class PublishSubscriptionEmoteInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('asset_type', 'code_suffix', 'image_assets', 'image_id1x', 'image_id2x', 'image_id4x', 'product_id')
    asset_type = sgqlc.types.Field(EmoteAssetType, graphql_name='assetType')
    code_suffix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='codeSuffix')
    image_assets = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(EmoteImageAssetInput)), graphql_name='imageAssets')
    image_id1x = sgqlc.types.Field(ID, graphql_name='imageID1x')
    image_id2x = sgqlc.types.Field(ID, graphql_name='imageID2x')
    image_id4x = sgqlc.types.Field(ID, graphql_name='imageID4x')
    product_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='productID')


class PurchasableOfferParams(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('gift_recipient_ids', 'offer_id', 'promotion_id', 'tag_bindings')
    gift_recipient_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='giftRecipientIDs')
    offer_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='offerID')
    promotion_id = sgqlc.types.Field(ID, graphql_name='promotionID')
    tag_bindings = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(OfferTagBindingInput)), graphql_name='tagBindings')


class PurchaseOfferInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('billing_auth_info', 'gift_recipient_user_ids', 'offer_id', 'payment_session', 'purchasing_user_id', 'quantity', 'tag_bindings', 'tenant_tracking')
    billing_auth_info = sgqlc.types.Field(BillingAuthInfo, graphql_name='billingAuthInfo')
    gift_recipient_user_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='giftRecipientUserIDs')
    offer_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='offerID')
    payment_session = sgqlc.types.Field(sgqlc.types.non_null(PaymentSession), graphql_name='paymentSession')
    purchasing_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='purchasingUserID')
    quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='quantity')
    tag_bindings = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(OfferTagBindingInput))), graphql_name='tagBindings')
    tenant_tracking = sgqlc.types.Field(String, graphql_name='tenantTracking')


class RateExtensionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('extension_client_id', 'extension_version', 'is_recommended', 'location', 'user_id')
    extension_client_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionClientID')
    extension_version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extensionVersion')
    is_recommended = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRecommended')
    location = sgqlc.types.Field(sgqlc.types.non_null(ExtensionRatingLocation), graphql_name='location')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class ReadNotificationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('ids',)
    ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='ids')


class RecommendationsContext(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('app_window_height', 'app_window_width', 'client_app', 'country', 'location', 'platform', 'referrer_domain', 'viewport_height', 'viewport_width')
    app_window_height = sgqlc.types.Field(Int, graphql_name='appWindowHeight')
    app_window_width = sgqlc.types.Field(Int, graphql_name='appWindowWidth')
    client_app = sgqlc.types.Field(String, graphql_name='clientApp')
    country = sgqlc.types.Field(String, graphql_name='country')
    location = sgqlc.types.Field(String, graphql_name='location')
    platform = sgqlc.types.Field(String, graphql_name='platform')
    referrer_domain = sgqlc.types.Field(String, graphql_name='referrerDomain')
    viewport_height = sgqlc.types.Field(Int, graphql_name='viewportHeight')
    viewport_width = sgqlc.types.Field(Int, graphql_name='viewportWidth')


class RecordAdEventInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('event_name', 'event_payload', 'rad_token')
    event_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='eventName')
    event_payload = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='eventPayload')
    rad_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='radToken')


class RedeemClaimableInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('country_of_residence', 'key_code')
    country_of_residence = sgqlc.types.Field(String, graphql_name='countryOfResidence')
    key_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='keyCode')


class RedeemCommunityPointsCustomRewardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'cost', 'prompt', 'reward_id', 'text_input', 'title', 'transaction_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cost')
    prompt = sgqlc.types.Field(String, graphql_name='prompt')
    reward_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='rewardID')
    text_input = sgqlc.types.Field(String, graphql_name='textInput')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    transaction_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='transactionID')


class RedeemCreatorGiftsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('amount',)
    amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='amount')


class RedeemRitualTokenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'message_text', 'type')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    message_text = sgqlc.types.Field(String, graphql_name='messageText')
    type = sgqlc.types.Field(sgqlc.types.non_null(RitualTokenType), graphql_name='type')


class RedeemSubscriptionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('from_channel_id', 'target_channel_id', 'user_id')
    from_channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='fromChannelID')
    target_channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetChannelID')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class RedeemTrueXAdInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('args', 'signature', 'target_id', 'true_xad')
    args = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='args')
    signature = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='signature')
    target_id = sgqlc.types.Field(ID, graphql_name='targetID')
    true_xad = sgqlc.types.Field('TrueXAd', graphql_name='trueXAd')


class RefreshExtensionTokenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'extension_id', 'jwt')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')
    jwt = sgqlc.types.Field(String, graphql_name='jwt')


class RegenerateStreamKeyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class RegenerateVerificationCodeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('address', 'key')
    address = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='address')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')


class RegisterPayoutInformationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('birthdate', 'city', 'company_name', 'country_code', 'email', 'first_name', 'last_name', 'middle_name', 'parent_email', 'parent_name', 'postal', 'state_code', 'street_address', 'street_address2', 'target_user_id')
    birthdate = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='birthdate')
    city = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='city')
    company_name = sgqlc.types.Field(String, graphql_name='companyName')
    country_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='countryCode')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    middle_name = sgqlc.types.Field(String, graphql_name='middleName')
    parent_email = sgqlc.types.Field(String, graphql_name='parentEmail')
    parent_name = sgqlc.types.Field(String, graphql_name='parentName')
    postal = sgqlc.types.Field(String, graphql_name='postal')
    state_code = sgqlc.types.Field(String, graphql_name='stateCode')
    street_address = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='streetAddress')
    street_address2 = sgqlc.types.Field(String, graphql_name='streetAddress2')
    target_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetUserID')


class RegisterTwoFactorConfirmationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('one_time_password', 'user_id')
    one_time_password = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='oneTimePassword')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class RegisterTwoFactorInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('phone_number', 'user_id')
    phone_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='phoneNumber')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class RejectFriendRequestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('target_id',)
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')


class RejectSquadStreamInvitationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('invitation_id',)
    invitation_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='invitationID')


class RejectSquadStreamOutOfNetworkInvitationsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('recipient_id',)
    recipient_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='recipientID')


class RemoveAutohostChannelsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_ids', 'user_id')
    channel_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='channelIDs')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class RemoveCollectionItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('collection_id', 'item_id', 'item_type')
    collection_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='collectionID')
    item_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='itemID')
    item_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='itemType')


class RemoveCompetitionPhaseInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('competition_id', 'phase_id')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    phase_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='phaseID')


class RemoveCompetitionPlayerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('competition_id', 'user_id')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class RemoveCompetitionTeamInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('competition_id', 'team_id')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    team_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='teamID')


class RemoveEditorInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'target_user_id', 'target_user_login')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    target_user_id = sgqlc.types.Field(ID, graphql_name='targetUserID')
    target_user_login = sgqlc.types.Field(String, graphql_name='targetUserLogin')


class RemoveOrganizationMemberInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('organization_id', 'user_id')
    organization_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='organizationID')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class RemoveReactionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('emote_id', 'entity_id')
    emote_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='emoteID')
    entity_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='entityID')


class RemoveSquadStreamMemberInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('member_user_id', 'squad_stream_id')
    member_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='memberUserID')
    squad_stream_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='squadStreamID')


class RemoveStuccoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'stucco_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    stucco_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='stuccoID')


class ReorderCollectionItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('collection_id', 'item_id', 'item_type', 'position')
    collection_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='collectionID')
    item_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='itemID')
    item_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='itemType')
    position = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='position')


class ReportContentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('content', 'content_id', 'description', 'extra', 'netz_dgargs', 'reason', 'target_id', 'wizard_path')
    content = sgqlc.types.Field(sgqlc.types.non_null(ReportContentType), graphql_name='content')
    content_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='contentID')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    extra = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extra')
    netz_dgargs = sgqlc.types.Field('ReportContentNetzDGInput', graphql_name='netzDGArgs')
    reason = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='reason')
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')
    wizard_path = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='wizardPath')


class ReportContentNetzDGInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('content_directed_to', 'reporter_email', 'reporting_for')
    content_directed_to = sgqlc.types.Field(sgqlc.types.non_null(ReportContentNetzDGContentDirectedTo), graphql_name='contentDirectedTo')
    reporter_email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='reporterEmail')
    reporting_for = sgqlc.types.Field(sgqlc.types.non_null(ReportContentNetzDGReportingFor), graphql_name='reportingFor')


class ReportWhisperInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('description', 'reason', 'target_id', 'wizard_path')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    reason = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='reason')
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')
    wizard_path = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='wizardPath')


class ReportWhisperThreadInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('reason', 'target_user_id', 'thread_id')
    reason = sgqlc.types.Field(String, graphql_name='reason')
    target_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetUserID')
    thread_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='threadID')


class RequestRitualTokenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'type')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    type = sgqlc.types.Field(sgqlc.types.non_null(RitualTokenType), graphql_name='type')


class ResendVerificationEmailInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('user_id',)
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class ResetUsernameInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('login', 'reset_username_token')
    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='login')
    reset_username_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='resetUsernameToken')


class ResolvePredictionEventInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('event_id', 'outcome_id')
    event_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='eventID')
    outcome_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='outcomeID')


class RespondToTeamInvitationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('accepted', 'team_id', 'user_id')
    accepted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='accepted')
    team_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='teamID')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class ResumeScheduleInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('schedule_id',)
    schedule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='scheduleID')


class RevokeVIPInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'revokee_id', 'revokee_login')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    revokee_id = sgqlc.types.Field(ID, graphql_name='revokeeID')
    revokee_login = sgqlc.types.Field(String, graphql_name='revokeeLogin')


class RotateExtensionSecretsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('delay_seconds', 'extension_id')
    delay_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='delaySeconds')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')


class RunMultiplayerAdsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'desired_ad_duration_seconds', 'offer_ids')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    desired_ad_duration_seconds = sgqlc.types.Field(Int, graphql_name='desiredAdDurationSeconds')
    offer_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='offerIDs')


class SaveComponentViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('aspect_height', 'aspect_ratio_x', 'aspect_ratio_y', 'aspect_width', 'has_autoscale', 'has_zoom', 'scale_pixels', 'size', 'target_height', 'viewer_path', 'zoom_pixels')
    aspect_height = sgqlc.types.Field(Int, graphql_name='aspectHeight')
    aspect_ratio_x = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='aspectRatioX')
    aspect_ratio_y = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='aspectRatioY')
    aspect_width = sgqlc.types.Field(Int, graphql_name='aspectWidth')
    has_autoscale = sgqlc.types.Field(Boolean, graphql_name='hasAutoscale')
    has_zoom = sgqlc.types.Field(Boolean, graphql_name='hasZoom')
    scale_pixels = sgqlc.types.Field(Int, graphql_name='scalePixels')
    size = sgqlc.types.Field(Float, graphql_name='size')
    target_height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='targetHeight')
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')
    zoom_pixels = sgqlc.types.Field(Int, graphql_name='zoomPixels')


class SaveConfigViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('viewer_path',)
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')


class SaveExtensionAssetManifestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('asset_hash',)
    asset_hash = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='assetHash')


class SaveExtensionCapabilitiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bits_support_level', 'configuration_location', 'has_bits_support', 'has_chat_support', 'required_configuration', 'subscriptions_support_level', 'whitelists', 'will_request_identity_link')
    bits_support_level = sgqlc.types.Field(ExtensionBitsSupportLevel, graphql_name='bitsSupportLevel')
    configuration_location = sgqlc.types.Field(sgqlc.types.non_null(ExtensionConfigurationLocation), graphql_name='configurationLocation')
    has_bits_support = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasBitsSupport')
    has_chat_support = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasChatSupport')
    required_configuration = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='requiredConfiguration')
    subscriptions_support_level = sgqlc.types.Field(ExtensionSubscriptionsSupportLevel, graphql_name='subscriptionsSupportLevel')
    whitelists = sgqlc.types.Field(sgqlc.types.non_null(ExtensionWhitelistsInput), graphql_name='whitelists')
    will_request_identity_link = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='willRequestIdentityLink')


class SaveExtensionDeveloperManifestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('author_email', 'testing_base_uri')
    author_email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='authorEmail')
    testing_base_uri = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='testingBaseURI')


class SaveExtensionDiscoveryManifestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('author_name', 'categories', 'description', 'games', 'name', 'privacy_policy_url', 'summary', 'support_email', 'terms_url', 'viewer_summary')
    author_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='authorName')
    categories = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='categories')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    games = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='games')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    privacy_policy_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='privacyPolicyURL')
    summary = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='summary')
    support_email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='supportEmail')
    terms_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='termsURL')
    viewer_summary = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerSummary')


class SaveExtensionManifestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('asset_manifest', 'capabilities', 'developer_manifest', 'discovery_manifest', 'id', 'version', 'views')
    asset_manifest = sgqlc.types.Field(sgqlc.types.non_null(SaveExtensionAssetManifestInput), graphql_name='assetManifest')
    capabilities = sgqlc.types.Field(sgqlc.types.non_null(SaveExtensionCapabilitiesInput), graphql_name='capabilities')
    developer_manifest = sgqlc.types.Field(sgqlc.types.non_null(SaveExtensionDeveloperManifestInput), graphql_name='developerManifest')
    discovery_manifest = sgqlc.types.Field(sgqlc.types.non_null(SaveExtensionDiscoveryManifestInput), graphql_name='discoveryManifest')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')
    views = sgqlc.types.Field(sgqlc.types.non_null('SaveExtensionViewsInput'), graphql_name='views')


class SaveExtensionViewsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('component', 'config', 'live_config', 'mobile', 'panel', 'video_overlay')
    component = sgqlc.types.Field(SaveComponentViewInput, graphql_name='component')
    config = sgqlc.types.Field(SaveConfigViewInput, graphql_name='config')
    live_config = sgqlc.types.Field('SaveLiveConfigViewInput', graphql_name='liveConfig')
    mobile = sgqlc.types.Field('SaveMobileViewInput', graphql_name='mobile')
    panel = sgqlc.types.Field('SavePanelViewInput', graphql_name='panel')
    video_overlay = sgqlc.types.Field('SaveVideoOverlayViewInput', graphql_name='videoOverlay')


class SaveExtensionWhitelistsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('broadcasters', 'config_urls', 'panel_urls', 'testers')
    broadcasters = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='broadcasters')
    config_urls = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='configURLs')
    panel_urls = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='panelURLs')
    testers = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='testers')


class SaveHiddenViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('viewer_path',)
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')


class SaveLiveConfigViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('viewer_path',)
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')


class SaveMobileViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('viewer_path',)
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')


class SavePanelViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('height', 'viewer_path')
    height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='height')
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')


class SaveVideoOverlayViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('viewer_path',)
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')


class SearchForOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('targets',)
    targets = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SearchForTarget')), graphql_name='targets')


class SearchForTarget(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('cursor', 'index', 'limit')
    cursor = sgqlc.types.Field(String, graphql_name='cursor')
    index = sgqlc.types.Field(sgqlc.types.non_null(SearchIndex), graphql_name='index')
    limit = sgqlc.types.Field(Int, graphql_name='limit')


class SearchOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('targets',)
    targets = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SearchTarget')), graphql_name='targets')


class SearchTarget(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('count_total_matches', 'index', 'limit')
    count_total_matches = sgqlc.types.Field(Boolean, graphql_name='countTotalMatches')
    index = sgqlc.types.Field(sgqlc.types.non_null(SearchIndex), graphql_name='index')
    limit = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='limit')


class SeedCompetitionParticipantInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('competition_id', 'participant_id', 'seed_value')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    participant_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='participantID')
    seed_value = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='seedValue')


class SegmentStartTimeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('day', 'hour', 'minute')
    day = sgqlc.types.Field(sgqlc.types.non_null(ScheduleSegmentDay), graphql_name='day')
    hour = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='hour')
    minute = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='minute')


class SelectChannelBadgeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('badge_set_id', 'badge_set_version', 'channel_id')
    badge_set_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='badgeSetID')
    badge_set_version = sgqlc.types.Field(String, graphql_name='badgeSetVersion')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class SelectGlobalBadgeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('badge_set_id', 'badge_set_version')
    badge_set_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='badgeSetID')
    badge_set_version = sgqlc.types.Field(String, graphql_name='badgeSetVersion')


class SendChatMessageThroughSubscriberModeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'cost', 'message', 'transaction_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cost')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')
    transaction_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='transactionID')


class SendCheerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bits', 'content', 'id', 'is_anonymous', 'is_auto_mod_enabled', 'room_id', 'should_cheer_anyway', 'target_id')
    bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bits')
    content = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='content')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_anonymous = sgqlc.types.Field(Boolean, graphql_name='isAnonymous')
    is_auto_mod_enabled = sgqlc.types.Field(Boolean, graphql_name='isAutoModEnabled')
    room_id = sgqlc.types.Field(ID, graphql_name='roomID')
    should_cheer_anyway = sgqlc.types.Field(Boolean, graphql_name='shouldCheerAnyway')
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')


class SendExtensionMessageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'content_type', 'ext_auth_token', 'extension_id', 'message', 'targets')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    content_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='contentType')
    ext_auth_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extAuthToken')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')
    targets = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='targets')


class SendHighlightedChatMessageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'cost', 'message', 'transaction_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cost')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')
    transaction_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='transactionID')


class SendRoomMessageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('message', 'nonce', 'room_id')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')
    nonce = sgqlc.types.Field(String, graphql_name='nonce')
    room_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='roomID')


class SendWhisperInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('message', 'nonce', 'recipient_user_id')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')
    nonce = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='nonce')
    recipient_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='recipientUserID')


class SetAutoAdDensityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('auto_ad_length_seconds', 'auto_ad_period_minutes', 'target_channel_id')
    auto_ad_length_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='autoAdLengthSeconds')
    auto_ad_period_minutes = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='autoAdPeriodMinutes')
    target_channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetChannelID')


class SetAutoRefillSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('charge_instrument', 'currency', 'gross_amount', 'id', 'is_enabled', 'offer_id', 'threshold')
    charge_instrument = sgqlc.types.Field(sgqlc.types.non_null(ChargeInstrumentInput), graphql_name='chargeInstrument')
    currency = sgqlc.types.Field(sgqlc.types.non_null(Currency), graphql_name='currency')
    gross_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='grossAmount')
    id = sgqlc.types.Field(ID, graphql_name='id')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    offer_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='offerID')
    threshold = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='threshold')


class SetAutohostChannelsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_ids', 'user_id')
    channel_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='channelIDs')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class SetBitsUserSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('abandoned_first_cheer_tutorial', 'skipped_first_cheer_tutorial')
    abandoned_first_cheer_tutorial = sgqlc.types.Field(Boolean, graphql_name='abandonedFirstCheerTutorial')
    skipped_first_cheer_tutorial = sgqlc.types.Field(Boolean, graphql_name='skippedFirstCheerTutorial')


class SetChannelFeedEnabledInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('enabled',)
    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='enabled')


class SetChannelNotificationSettingInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('category', 'channel_id', 'platform', 'setting_state')
    category = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='category')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    platform = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='platform')
    setting_state = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='settingState')


class SetChannelTrailerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'trailer_video_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    trailer_video_id = sgqlc.types.Field(ID, graphql_name='trailerVideoID')


class SetChatPauseSettingInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('chat_pause_setting',)
    chat_pause_setting = sgqlc.types.Field(sgqlc.types.non_null(ChatPauseSetting), graphql_name='chatPauseSetting')


class SetContentTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('author_id', 'content_id', 'content_type', 'tag_ids')
    author_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='authorID')
    content_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='contentID')
    content_type = sgqlc.types.Field(sgqlc.types.non_null(ContentType), graphql_name='contentType')
    tag_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='tagIDs')


class SetCreatorBadgeFlairInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'creator_badge_flair')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    creator_badge_flair = sgqlc.types.Field(sgqlc.types.non_null(CreatorBadgeFlairSetting), graphql_name='creatorBadgeFlair')


class SetDashboardAlertQueueActivityStatusInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('activity_id', 'alert_status', 'user_id')
    activity_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='activityID')
    alert_status = sgqlc.types.Field(sgqlc.types.non_null(DashboardActivityFeedActivityAlertStatus), graphql_name='alertStatus')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class SetDashboardAlertQueuePreferenceInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('should_enable_dndmode', 'should_hide_bits', 'should_hide_follows', 'should_hide_gift_subscriptions', 'should_hide_hosts', 'should_hide_raids', 'should_hide_subscriptions', 'user_id')
    should_enable_dndmode = sgqlc.types.Field(Boolean, graphql_name='shouldEnableDNDMode')
    should_hide_bits = sgqlc.types.Field(Boolean, graphql_name='shouldHideBits')
    should_hide_follows = sgqlc.types.Field(Boolean, graphql_name='shouldHideFollows')
    should_hide_gift_subscriptions = sgqlc.types.Field(Boolean, graphql_name='shouldHideGiftSubscriptions')
    should_hide_hosts = sgqlc.types.Field(Boolean, graphql_name='shouldHideHosts')
    should_hide_raids = sgqlc.types.Field(Boolean, graphql_name='shouldHideRaids')
    should_hide_subscriptions = sgqlc.types.Field(Boolean, graphql_name='shouldHideSubscriptions')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class SetDefaultPaymentMethodInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('billing_country', 'last_four', 'payment_type', 'provider', 'token', 'user_id')
    billing_country = sgqlc.types.Field(String, graphql_name='billingCountry')
    last_four = sgqlc.types.Field(String, graphql_name='lastFour')
    payment_type = sgqlc.types.Field(sgqlc.types.non_null(PaymentInstrumentType), graphql_name='paymentType')
    provider = sgqlc.types.Field(sgqlc.types.non_null(PaymentProvider), graphql_name='provider')
    token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='token')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class SetDeletedMessageDisplaySettingInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('deleted_message_display_setting',)
    deleted_message_display_setting = sgqlc.types.Field(sgqlc.types.non_null(DeletedMessageDisplaySetting), graphql_name='deletedMessageDisplaySetting')


class SetDropBenefitsOnDropInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('benefit_ids', 'drop_id')
    benefit_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='benefitIDs')
    drop_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='dropID')


class SetDropCampaignAccessInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('allowed_channels', 'blocked_channels', 'campaign_id', 'is_allowed_channels_enabled', 'is_blocked_channels_enabled', 'test_viewers')
    allowed_channels = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='allowedChannels')
    blocked_channels = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='blockedChannels')
    campaign_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='campaignID')
    is_allowed_channels_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAllowedChannelsEnabled')
    is_blocked_channels_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isBlockedChannelsEnabled')
    test_viewers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='testViewers')


class SetDropCampaignStatusInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('campaign_id', 'status')
    campaign_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='campaignID')
    status = sgqlc.types.Field(sgqlc.types.non_null(DropCampaignStatus), graphql_name='status')


class SetDropCampaignSummaryInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('account_link_url', 'campaign_id', 'campaign_type', 'description', 'details_url', 'end_at', 'game_id', 'name', 'owner_id', 'start_at')
    account_link_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='accountLinkURL')
    campaign_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='campaignID')
    campaign_type = sgqlc.types.Field(CampaignType, graphql_name='campaignType')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    details_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='detailsURL')
    end_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endAt')
    game_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='gameID')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='ownerID')
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')


class SetDropEventRuleInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('claim_duration_seconds', 'drop_id', 'event_rules', 'quest_description', 'quest_name')
    claim_duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='claimDurationSeconds')
    drop_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='dropID')
    event_rules = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(DropEventConditionInput))), graphql_name='eventRules')
    quest_description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='questDescription')
    quest_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='questName')


class SetDropManualTriggerRuleInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('claim_duration_seconds', 'drop_id')
    claim_duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='claimDurationSeconds')
    drop_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='dropID')


class SetDropSummaryInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('drop_id', 'end_at', 'name', 'start_at')
    drop_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='dropID')
    end_at = sgqlc.types.Field(Time, graphql_name='endAt')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    start_at = sgqlc.types.Field(Time, graphql_name='startAt')


class SetDropTimeBasedRuleInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('drop_id', 'precondition_drop_id', 'required_minutes_watched')
    drop_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='dropID')
    precondition_drop_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='preconditionDropID')
    required_minutes_watched = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='requiredMinutesWatched')


class SetEmoteAnimationsEnabledInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_emote_animations_enabled',)
    is_emote_animations_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEmoteAnimationsEnabled')


class SetEmoteModifierGroupsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('groups',)
    groups = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EmoteModifierGroupInput))), graphql_name='groups')


class SetExtensionConfigurationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'config_version', 'content', 'extension_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    config_version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='configVersion')
    content = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='content')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')


class SetExtensionFeatureFlagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('can_send_chat', 'can_use_bits', 'dynamic_management', 'id')
    can_send_chat = sgqlc.types.Field(Boolean, graphql_name='canSendChat')
    can_use_bits = sgqlc.types.Field(Boolean, graphql_name='canUseBits')
    dynamic_management = sgqlc.types.Field(sgqlc.types.list_of(ExtensionDynamicManagementInput), graphql_name='dynamicManagement')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class SetExtensionInstallationOAuthInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'oauth_token')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    oauth_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='oauthToken')


class SetGameDropAccountLinkClientInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('client_id', 'game_id')
    client_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='clientID')
    game_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='gameID')


class SetModLogsAccessInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('access_level', 'channel_id', 'channel_role')
    access_level = sgqlc.types.Field(sgqlc.types.non_null(ModLogsAccessLevel), graphql_name='accessLevel')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    channel_role = sgqlc.types.Field(sgqlc.types.non_null(ChannelUserRole), graphql_name='channelRole')


class SetModViewSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('tutorial_seen_at', 'tutorial_state')
    tutorial_seen_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='tutorialSeenAt')
    tutorial_state = sgqlc.types.Field(sgqlc.types.non_null(TutorialState), graphql_name='tutorialState')


class SetNotificationSettingInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('category', 'platform', 'setting_state')
    category = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='category')
    platform = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='platform')
    setting_state = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='settingState')


class SetOverwatchLeagueTeamPreferenceInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('overwatch_team_preference_option_id',)
    overwatch_team_preference_option_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='OverwatchTeamPreferenceOptionID')


class SetPreferredLanguageTagInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('preferred_language_tag', 'user_id')
    preferred_language_tag = sgqlc.types.Field(sgqlc.types.non_null(LanguageTag), graphql_name='preferredLanguageTag')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class SetQuickActionLayoutFolderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('items', 'name')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SetQuickActionLayoutItemInput'))), graphql_name='items')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class SetQuickActionLayoutInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'layout', 'owner_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    layout = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SetQuickActionLayoutItemInput'))), graphql_name='layout')
    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='ownerID')


class SetQuickActionLayoutItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('folder', 'quick_action')
    folder = sgqlc.types.Field(SetQuickActionLayoutFolderInput, graphql_name='folder')
    quick_action = sgqlc.types.Field('SetQuickActionLayoutQuickActionInput', graphql_name='quickAction')


class SetQuickActionLayoutQuickActionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('name',)
    name = sgqlc.types.Field(sgqlc.types.non_null(QuickActionName), graphql_name='name')


class SetRadioCurrentlyPlayingInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('content_type', 'is_currently_playing', 'source_id', 'track_id')
    content_type = sgqlc.types.Field(RadioCurrentlyPlayingType, graphql_name='contentType')
    is_currently_playing = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCurrentlyPlaying')
    source_id = sgqlc.types.Field(ID, graphql_name='sourceID')
    track_id = sgqlc.types.Field(ID, graphql_name='trackID')


class SetReadableChatColorsEnabledInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_readable_chat_colors_enabled',)
    is_readable_chat_colors_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isReadableChatColorsEnabled')


class SetResourceRestrictionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('resource_id', 'resource_type', 'restriction_options', 'restriction_type')
    resource_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='resourceID')
    resource_type = sgqlc.types.Field(sgqlc.types.non_null(RestrictionResource), graphql_name='resourceType')
    restriction_options = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ResourceRestrictionOption)), graphql_name='restrictionOptions')
    restriction_type = sgqlc.types.Field(ResourceRestrictionType, graphql_name='restrictionType')


class SetScheduleReminderInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('segment_id', 'should_enable')
    segment_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='segmentID')
    should_enable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldEnable')


class SetSessionStatusInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('activity', 'availability', 'session_id')
    activity = sgqlc.types.Field(ActivityInput, graphql_name='activity')
    availability = sgqlc.types.Field(sgqlc.types.non_null(AvailabilityInput), graphql_name='availability')
    session_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sessionID')


class SetSquadStreamPrimaryPlayerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('device_id', 'primary_player_id', 'squad_id')
    device_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='deviceID')
    primary_player_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='primaryPlayerID')
    squad_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='squadID')


class SetUnbanRequestsSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'cooldown_minutes', 'is_enabled')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    cooldown_minutes = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cooldownMinutes')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class SetUserResidenceInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('country_code', 'user_id', 'zip_code')
    country_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='countryCode')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')
    zip_code = sgqlc.types.Field(String, graphql_name='zipCode')


class ShelvesAvailableOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('collection_id', 'game_id', 'shelf_type')
    collection_id = sgqlc.types.Field(ID, graphql_name='collectionID')
    game_id = sgqlc.types.Field(ID, graphql_name='gameID')
    shelf_type = sgqlc.types.Field(VideoShelfType, graphql_name='shelfType')


class ShelvesOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('include_empty',)
    include_empty = sgqlc.types.Field(Boolean, graphql_name='includeEmpty')


class ShortVideoFeedOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('platform', 'type')
    platform = sgqlc.types.Field(ShortVideoFeedPlatform, graphql_name='platform')
    type = sgqlc.types.Field(ShortVideoFeedType, graphql_name='type')


class SmartCostsAcknowledgementInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('last_acknowledged_cost', 'reward_type')
    last_acknowledged_cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='lastAcknowledgedCost')
    reward_type = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsAutomaticRewardType), graphql_name='rewardType')


class SpendSubscriptionCreditInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('broadcaster_id', 'user_id')
    broadcaster_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='broadcasterID')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class StartAdInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'length_seconds')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    length_seconds = sgqlc.types.Field(Int, graphql_name='lengthSeconds')


class StartBountyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bounty_id', 'title', 'user_id')
    bounty_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='bountyID')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class StartCloudBroadcastInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('framerate', 'height', 'provider_id', 'width')
    framerate = sgqlc.types.Field(Int, graphql_name='framerate')
    height = sgqlc.types.Field(Int, graphql_name='height')
    provider_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='providerID')
    width = sgqlc.types.Field(Int, graphql_name='width')


class StartPayoutOnboardingWorkflowInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('target_user_id',)
    target_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetUserID')


class StartWatchPartyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('access_token', 'channel_id', 'watch_party_item_id')
    access_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='accessToken')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    watch_party_item_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='watchPartyItemID')


class StopBountyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('bounty_id', 'user_id')
    bounty_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='bountyID')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class StopCloudBroadcastInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class StopWatchPartyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('access_token', 'channel_id')
    access_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='accessToken')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class StreamMetadataFilterInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('counter_strike_map', 'counter_strike_skill', 'hearthstone_broadcaster_hero_class', 'hearthstone_broadcaster_hero_name', 'hearthstone_game_mode', 'league_of_legends_champion_id', 'max_avclevel', 'max_avcprofile', 'max_height', 'overwatch_broadcaster_character', 'pubg_game_mode', 'pubg_player_alive_max', 'pubg_player_alive_min')
    counter_strike_map = sgqlc.types.Field(String, graphql_name='counterStrikeMap')
    counter_strike_skill = sgqlc.types.Field(String, graphql_name='counterStrikeSkill')
    hearthstone_broadcaster_hero_class = sgqlc.types.Field(String, graphql_name='hearthstoneBroadcasterHeroClass')
    hearthstone_broadcaster_hero_name = sgqlc.types.Field(String, graphql_name='hearthstoneBroadcasterHeroName')
    hearthstone_game_mode = sgqlc.types.Field(String, graphql_name='hearthstoneGameMode')
    league_of_legends_champion_id = sgqlc.types.Field(String, graphql_name='leagueOfLegendsChampionID')
    max_avclevel = sgqlc.types.Field(String, graphql_name='maxAVCLevel')
    max_avcprofile = sgqlc.types.Field(AVCProfile, graphql_name='maxAVCProfile')
    max_height = sgqlc.types.Field(Int, graphql_name='maxHeight')
    overwatch_broadcaster_character = sgqlc.types.Field(String, graphql_name='overwatchBroadcasterCharacter')
    pubg_game_mode = sgqlc.types.Field(String, graphql_name='pubgGameMode')
    pubg_player_alive_max = sgqlc.types.Field(String, graphql_name='pubgPlayerAliveMax')
    pubg_player_alive_min = sgqlc.types.Field(String, graphql_name='pubgPlayerAliveMin')


class StreamOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('include_restricted', 'languages', 'locale', 'platform_type', 'recommendations_context', 'request_id', 'sort', 'tags')
    include_restricted = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StreamRestrictionType)), graphql_name='includeRestricted')
    languages = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Language)), graphql_name='languages')
    locale = sgqlc.types.Field(String, graphql_name='locale')
    platform_type = sgqlc.types.Field(PlatformType, graphql_name='platformType')
    recommendations_context = sgqlc.types.Field(RecommendationsContext, graphql_name='recommendationsContext')
    request_id = sgqlc.types.Field(ID, graphql_name='requestID')
    sort = sgqlc.types.Field(StreamSort, graphql_name='sort')
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tags')


class StreamRecommendationsFilters(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('category_ids',)
    category_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='categoryIDs')


class SubmitCSATFeedbackInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('action_prompted', 'company_id', 'feedback', 'guid', 'rating', 'source')
    action_prompted = sgqlc.types.Field(CSATActionPrompted, graphql_name='actionPrompted')
    company_id = sgqlc.types.Field(ID, graphql_name='companyID')
    feedback = sgqlc.types.Field(String, graphql_name='feedback')
    guid = sgqlc.types.Field(ID, graphql_name='guid')
    rating = sgqlc.types.Field(CSATRating, graphql_name='rating')
    source = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='source')


class SubmitEmotePrefixInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'name')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class SubmitEmoticonPrefixInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'name')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class SubmitExtensionFeedbackInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('comment', 'extension_client_id', 'extension_version', 'user_id')
    comment = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='comment')
    extension_client_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionClientID')
    extension_version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extensionVersion')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class SubscriptionBenefitCriteriaInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('filter', 'platform')
    filter = sgqlc.types.Field(SubscriptionBenefitFilter, graphql_name='filter')
    platform = sgqlc.types.Field(SubscriptionPlatform, graphql_name='platform')


class SwapCompetitionLobbyParticipantInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('lobby_id', 'participant_id')
    lobby_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='lobbyID')
    participant_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='participantID')


class SwapCompetitionLobbyParticipantsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('competition_id', 'first', 'phase_id', 'second')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    first = sgqlc.types.Field(sgqlc.types.non_null(SwapCompetitionLobbyParticipantInput), graphql_name='first')
    phase_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='phaseID')
    second = sgqlc.types.Field(sgqlc.types.non_null(SwapCompetitionLobbyParticipantInput), graphql_name='second')


class SyncGameOnDropCampaignInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('campaign_id',)
    campaign_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='campaignID')


class TerminatePollInChannelInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class TerminatePollInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('poll_id',)
    poll_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='pollID')


class ToggleRitualsEnabledInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'is_enabled')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class TrackingPixelInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('time_offset_seconds', 'type', 'url')
    time_offset_seconds = sgqlc.types.Field(Int, graphql_name='timeOffsetSeconds')
    type = sgqlc.types.Field(TrackingPixelType, graphql_name='type')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class TransitionExtensionStateInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'review_notes', 'state', 'test_channel', 'version')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    review_notes = sgqlc.types.Field(String, graphql_name='reviewNotes')
    state = sgqlc.types.Field(sgqlc.types.non_null(ExtensionState), graphql_name='state')
    test_channel = sgqlc.types.Field(String, graphql_name='testChannel')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')


class TrueXAd(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('campaign_id', 'creative_id', 'currency_amount', 'name')
    campaign_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='campaignID')
    creative_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='creativeID')
    currency_amount = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='currencyAmount')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class UnbanRequestsOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('order', 'status', 'user_id')
    order = sgqlc.types.Field(UnbanRequestsSortOrder, graphql_name='order')
    status = sgqlc.types.Field(UnbanRequestStatus, graphql_name='status')
    user_id = sgqlc.types.Field(ID, graphql_name='userID')


class UnbanUserFromChatRoomInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('banned_user_login', 'channel_id')
    banned_user_login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='bannedUserLogin')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class UnblockUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('target_user_id',)
    target_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetUserID')


class UndoRecommendationFeedbackInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('feedback_id', 'source_item_page', 'source_item_request_id', 'source_item_tracking_id')
    feedback_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='feedbackID')
    source_item_page = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceItemPage')
    source_item_request_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='sourceItemRequestID')
    source_item_tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='sourceItemTrackingID')


class UnfollowGameInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('game_id',)
    game_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='gameID')


class UnfollowUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('target_id',)
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')


class UnfriendUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('target_id',)
    target_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetID')


class UnhostInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class UninstallExtensionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('extension_installation_id',)
    extension_installation_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionInstallationID')


class UnlinkAmazonConnectionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('user_id',)
    user_id = sgqlc.types.Field(ID, graphql_name='userID')


class UnlinkRiotConnectionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('user_id',)
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UnlinkSSOInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('app', 'token')
    app = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='app')
    token = sgqlc.types.Field(String, graphql_name='token')


class UnlockChosenModifiedSubscriberEmoteInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'cost', 'emote_id', 'transaction_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cost')
    emote_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='emoteID')
    transaction_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='transactionID')


class UnlockChosenSubscriberEmoteInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'cost', 'emote_id', 'transaction_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cost')
    emote_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='emoteID')
    transaction_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='transactionID')


class UnlockRandomSubscriberEmoteInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'cost', 'transaction_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cost')
    transaction_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='transactionID')


class UnmodUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'target_id', 'target_login')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    target_id = sgqlc.types.Field(ID, graphql_name='targetID')
    target_login = sgqlc.types.Field(String, graphql_name='targetLogin')


class UnsetHypeTrainConfigInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('callout_emote', 'cooldown_period_minutes', 'difficulty', 'events_threshold', 'is_enabled', 'should_use_personalized_settings', 'will_use_creator_color')
    callout_emote = sgqlc.types.Field(Boolean, graphql_name='calloutEmote')
    cooldown_period_minutes = sgqlc.types.Field(Boolean, graphql_name='cooldownPeriodMinutes')
    difficulty = sgqlc.types.Field(Boolean, graphql_name='difficulty')
    events_threshold = sgqlc.types.Field(Boolean, graphql_name='eventsThreshold')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')
    should_use_personalized_settings = sgqlc.types.Field(Boolean, graphql_name='shouldUsePersonalizedSettings')
    will_use_creator_color = sgqlc.types.Field(Boolean, graphql_name='willUseCreatorColor')


class UnsubscribeEmailInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('source_email_id', 'source_email_type', 'target_channel_id', 'target_email_type', 'user_id', 'validating_hash')
    source_email_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceEmailID')
    source_email_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceEmailType')
    target_channel_id = sgqlc.types.Field(ID, graphql_name='targetChannelID')
    target_email_type = sgqlc.types.Field(String, graphql_name='targetEmailType')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')
    validating_hash = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='validatingHash')


class UpdateAdPropertiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('has_disable_prerolls_ability_enabled', 'has_disable_prerolls_notifications_enabled', 'is_multiplayer_ads_for_subs_enabled', 'target_user_id')
    has_disable_prerolls_ability_enabled = sgqlc.types.Field(Boolean, graphql_name='hasDisablePrerollsAbilityEnabled')
    has_disable_prerolls_notifications_enabled = sgqlc.types.Field(Boolean, graphql_name='hasDisablePrerollsNotificationsEnabled')
    is_multiplayer_ads_for_subs_enabled = sgqlc.types.Field(Boolean, graphql_name='isMultiplayerAdsForSubsEnabled')
    target_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetUserID')


class UpdateAllWhisperThreadsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('mark_all_as_read',)
    mark_all_as_read = sgqlc.types.Field(Boolean, graphql_name='markAllAsRead')


class UpdateAutoModLevelsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('ableism_level', 'aggression_level', 'channel_id', 'homophobia_level', 'misogyny_level', 'name_calling_level', 'overall_level', 'profanity_level', 'racism_level', 'sexual_level', 'white_nationalism_level')
    ableism_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='ableismLevel')
    aggression_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='aggressionLevel')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    homophobia_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='homophobiaLevel')
    misogyny_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='misogynyLevel')
    name_calling_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='nameCallingLevel')
    overall_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='overallLevel')
    profanity_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='profanityLevel')
    racism_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='racismLevel')
    sexual_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sexualLevel')
    white_nationalism_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='whiteNationalismLevel')


class UpdateAutoModPropertiesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('aggressive_level', 'channel_id', 'identity_level', 'profanity_level', 'sexual_level')
    aggressive_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='aggressiveLevel')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='channelID')
    identity_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='identityLevel')
    profanity_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='profanityLevel')
    sexual_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sexualLevel')


class UpdateAutohostSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'strategy', 'user_id', 'will_autohost_team', 'will_prioritize_autohost')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')
    strategy = sgqlc.types.Field(AutohostSettingsStrategy, graphql_name='strategy')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')
    will_autohost_team = sgqlc.types.Field(Boolean, graphql_name='willAutohostTeam')
    will_prioritize_autohost = sgqlc.types.Field(Boolean, graphql_name='willPrioritizeAutohost')


class UpdateBitsBadgeTierNotificationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('message', 'notification_id', 'notification_state')
    message = sgqlc.types.Field(String, graphql_name='message')
    notification_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='notificationID')
    notification_state = sgqlc.types.Field(sgqlc.types.non_null(BitsBadgeTierNotificationState), graphql_name='notificationState')


class UpdateBitsBadgeTiersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('tiers', 'user_id')
    tiers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BitsBadgeTierInput)), graphql_name='tiers')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateBoostSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'is_earned_enabled', 'is_enabled', 'is_paid_enabled')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    is_earned_enabled = sgqlc.types.Field(Boolean, graphql_name='isEarnedEnabled')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')
    is_paid_enabled = sgqlc.types.Field(Boolean, graphql_name='isPaidEnabled')


class UpdateBroadcastSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('broadcaster_language', 'game', 'is_mature', 'status', 'user_id')
    broadcaster_language = sgqlc.types.Field(String, graphql_name='broadcasterLanguage')
    game = sgqlc.types.Field(String, graphql_name='game')
    is_mature = sgqlc.types.Field(Boolean, graphql_name='isMature')
    status = sgqlc.types.Field(String, graphql_name='status')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateCelebrationConfigInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'is_enabled')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class UpdateCelebrationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('area', 'celebration_id', 'channel_id', 'duration_milliseconds', 'effect', 'event_threshold', 'event_type', 'intensity', 'is_enabled')
    area = sgqlc.types.Field(CelebrationArea, graphql_name='area')
    celebration_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='celebrationID')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    duration_milliseconds = sgqlc.types.Field(Int, graphql_name='durationMilliseconds')
    effect = sgqlc.types.Field(CelebrationEffect, graphql_name='effect')
    event_threshold = sgqlc.types.Field(Int, graphql_name='eventThreshold')
    event_type = sgqlc.types.Field(CelebrationEventType, graphql_name='eventType')
    intensity = sgqlc.types.Field(Int, graphql_name='intensity')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')


class UpdateCelebrationProductConfigInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('celebration_products', 'channel_id')
    celebration_products = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CelebrationProductConfigInput))), graphql_name='celebrationProducts')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class UpdateCelebrationUserSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_opted_out',)
    is_opted_out = sgqlc.types.Field(Boolean, graphql_name='isOptedOut')


class UpdateChanletContentAttributesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('chanlet_id', 'content_attribute_ids')
    chanlet_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='chanletID')
    content_attribute_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='contentAttributeIDs')


class UpdateChannelClipsSettingInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'creation_restricted_to', 'creation_restriction_options', 'is_clips_enabled')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    creation_restricted_to = sgqlc.types.Field(ChannelClipsCreationRestrictedToInput, graphql_name='creationRestrictedTo')
    creation_restriction_options = sgqlc.types.Field(ChannelClipsCreationAuthRestrictionOptionsInput, graphql_name='creationRestrictionOptions')
    is_clips_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isClipsEnabled')


class UpdateChannelHomePreferencesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('category_ids_to_hide', 'category_ids_to_unhide', 'channel_id', 'hero_preset', 'streamer_shelf_type')
    category_ids_to_hide = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='categoryIDsToHide')
    category_ids_to_unhide = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='categoryIDsToUnhide')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    hero_preset = sgqlc.types.Field(HeroPreset, graphql_name='heroPreset')
    streamer_shelf_type = sgqlc.types.Field(StreamerShelfType, graphql_name='streamerShelfType')


class UpdateChannelPredictionSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('can_moderators_manage_predictions', 'channel_id')
    can_moderators_manage_predictions = sgqlc.types.Field(Boolean, graphql_name='canModeratorsManagePredictions')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class UpdateChatColorInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('color',)
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')


class UpdateChatSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('auto_mod_level', 'channel_id', 'chat_delay_in_ms', 'followers_only_duration_minutes', 'hide_links', 'is_broadcaster_language_mode_enabled', 'is_emote_only_mode_enabled', 'is_opted_out_of_global_banned_words_list', 'is_unique_chat_mode_enabled', 'require_verified_account', 'rules', 'slow_mode_duration_seconds')
    auto_mod_level = sgqlc.types.Field(Int, graphql_name='autoModLevel')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='channelID')
    chat_delay_in_ms = sgqlc.types.Field(Int, graphql_name='chatDelayInMs')
    followers_only_duration_minutes = sgqlc.types.Field(Int, graphql_name='followersOnlyDurationMinutes')
    hide_links = sgqlc.types.Field(Boolean, graphql_name='hideLinks')
    is_broadcaster_language_mode_enabled = sgqlc.types.Field(Boolean, graphql_name='isBroadcasterLanguageModeEnabled')
    is_emote_only_mode_enabled = sgqlc.types.Field(Boolean, graphql_name='isEmoteOnlyModeEnabled')
    is_opted_out_of_global_banned_words_list = sgqlc.types.Field(Boolean, graphql_name='isOptedOutOfGlobalBannedWordsList')
    is_unique_chat_mode_enabled = sgqlc.types.Field(Boolean, graphql_name='isUniqueChatModeEnabled')
    require_verified_account = sgqlc.types.Field(Boolean, graphql_name='requireVerifiedAccount')
    rules = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='rules')
    slow_mode_duration_seconds = sgqlc.types.Field(Int, graphql_name='slowModeDurationSeconds')


class UpdateCheerPartnerSettingsBadgesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('tiers',)
    tiers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BitsBadgeTierInput)), graphql_name='tiers')


class UpdateCheerPartnerSettingsChatMessageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_opted_out_of_project_v', 'min_bits_per_emote', 'min_bits_to_cheer')
    is_opted_out_of_project_v = sgqlc.types.Field(Boolean, graphql_name='isOptedOutOfProjectV')
    min_bits_per_emote = sgqlc.types.Field(Int, graphql_name='minBitsPerEmote')
    min_bits_to_cheer = sgqlc.types.Field(Int, graphql_name='minBitsToCheer')


class UpdateCheerPartnerSettingsCheerBombInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_opted_out',)
    is_opted_out = sgqlc.types.Field(Boolean, graphql_name='isOptedOut')


class UpdateCheerPartnerSettingsCustomPrefixInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_enabled',)
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')


class UpdateCheerPartnerSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('badges', 'chat_message', 'cheer_bomb_event', 'custom_prefix', 'is_onboarded', 'leaderboard', 'recent_cheer', 'sponsored_cheermote', 'user_id')
    badges = sgqlc.types.Field(UpdateCheerPartnerSettingsBadgesInput, graphql_name='badges')
    chat_message = sgqlc.types.Field(UpdateCheerPartnerSettingsChatMessageInput, graphql_name='chatMessage')
    cheer_bomb_event = sgqlc.types.Field(UpdateCheerPartnerSettingsCheerBombInput, graphql_name='cheerBombEvent')
    custom_prefix = sgqlc.types.Field(UpdateCheerPartnerSettingsCustomPrefixInput, graphql_name='customPrefix')
    is_onboarded = sgqlc.types.Field(Boolean, graphql_name='isOnboarded')
    leaderboard = sgqlc.types.Field('UpdateCheerPartnerSettingsLeaderboardInput', graphql_name='leaderboard')
    recent_cheer = sgqlc.types.Field('UpdateCheerPartnerSettingsRecentCheerInput', graphql_name='recentCheer')
    sponsored_cheermote = sgqlc.types.Field('UpdateCheerPartnerSettingsSponsoredCheermoteInput', graphql_name='sponsoredCheermote')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateCheerPartnerSettingsLeaderboardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'time_period')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')
    time_period = sgqlc.types.Field(String, graphql_name='timePeriod')


class UpdateCheerPartnerSettingsRecentCheerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('can_pin', 'minimum_bits', 'timeout_milliseconds')
    can_pin = sgqlc.types.Field(Boolean, graphql_name='canPin')
    minimum_bits = sgqlc.types.Field(Int, graphql_name='minimumBits')
    timeout_milliseconds = sgqlc.types.Field(Int, graphql_name='timeoutMilliseconds')


class UpdateCheerPartnerSettingsSponsoredCheermoteInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'is_opted_in')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_opted_in = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isOptedIn')


class UpdateCheermoteTierInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('image_assets', 'tier_threshold', 'user_id')
    image_assets = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EmoteImageAssetInput))), graphql_name='imageAssets')
    tier_threshold = sgqlc.types.Field(sgqlc.types.non_null(CheermoteTierThreshold), graphql_name='tierThreshold')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateClipInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('slug', 'title')
    slug = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='slug')
    title = sgqlc.types.Field(String, graphql_name='title')


class UpdateClipViewCountInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('slug',)
    slug = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='slug')


class UpdateCollectionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('collection_id', 'description', 'thumbnail_input', 'title', 'type')
    collection_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='collectionID')
    description = sgqlc.types.Field(String, graphql_name='description')
    thumbnail_input = sgqlc.types.Field('UpdateCollectionThumbnailInput', graphql_name='thumbnailInput')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(CollectionType, graphql_name='type')


class UpdateCollectionThumbnailInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('id', 'type')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')


class UpdateCommunityPointsAutomaticRewardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('background_color', 'channel_id', 'cost', 'is_enabled', 'reward_type', 'should_reset_background_color', 'should_reset_cost', 'should_reset_image')
    background_color = sgqlc.types.Field(String, graphql_name='backgroundColor')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    cost = sgqlc.types.Field(Int, graphql_name='cost')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')
    reward_type = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsAutomaticRewardType), graphql_name='rewardType')
    should_reset_background_color = sgqlc.types.Field(Boolean, graphql_name='shouldResetBackgroundColor')
    should_reset_cost = sgqlc.types.Field(Boolean, graphql_name='shouldResetCost')
    should_reset_image = sgqlc.types.Field(Boolean, graphql_name='shouldResetImage')


class UpdateCommunityPointsChannelSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'is_enabled', 'name', 'should_reset_image', 'should_reset_name')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')
    name = sgqlc.types.Field(String, graphql_name='name')
    should_reset_image = sgqlc.types.Field(Boolean, graphql_name='shouldResetImage')
    should_reset_name = sgqlc.types.Field(Boolean, graphql_name='shouldResetName')


class UpdateCommunityPointsCommunityGoalInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('amount_needed', 'background_color', 'channel_id', 'description', 'duration_days', 'ends_at', 'goal_id', 'reset_background_color', 'reset_image', 'reset_max_contribution_per_stream', 'status', 'title')
    amount_needed = sgqlc.types.Field(Int, graphql_name='amountNeeded')
    background_color = sgqlc.types.Field(String, graphql_name='backgroundColor')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    description = sgqlc.types.Field(String, graphql_name='description')
    duration_days = sgqlc.types.Field(Int, graphql_name='durationDays')
    ends_at = sgqlc.types.Field(Time, graphql_name='endsAt')
    goal_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='goalID')
    reset_background_color = sgqlc.types.Field(Boolean, graphql_name='resetBackgroundColor')
    reset_image = sgqlc.types.Field(Boolean, graphql_name='resetImage')
    reset_max_contribution_per_stream = sgqlc.types.Field(Boolean, graphql_name='resetMaxContributionPerStream')
    status = sgqlc.types.Field(CommunityPointsCommunityGoalStatus, graphql_name='status')
    title = sgqlc.types.Field(String, graphql_name='title')


class UpdateCommunityPointsCustomRewardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('background_color', 'channel_id', 'cost', 'global_cooldown_setting', 'has_real_world_value', 'is_enabled', 'is_paused', 'is_sub_only', 'is_user_input_required', 'max_per_stream_setting', 'max_per_user_per_stream_setting', 'prompt', 'reward_id', 'should_redemptions_skip_request_queue', 'should_reset_image', 'title')
    background_color = sgqlc.types.Field(String, graphql_name='backgroundColor')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    cost = sgqlc.types.Field(Int, graphql_name='cost')
    global_cooldown_setting = sgqlc.types.Field(CommunityPointsCustomRewardGlobalCooldownSettingInput, graphql_name='globalCooldownSetting')
    has_real_world_value = sgqlc.types.Field(Boolean, graphql_name='hasRealWorldValue')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')
    is_paused = sgqlc.types.Field(Boolean, graphql_name='isPaused')
    is_sub_only = sgqlc.types.Field(Boolean, graphql_name='isSubOnly')
    is_user_input_required = sgqlc.types.Field(Boolean, graphql_name='isUserInputRequired')
    max_per_stream_setting = sgqlc.types.Field(CommunityPointsCustomRewardMaxPerStreamSettingInput, graphql_name='maxPerStreamSetting')
    max_per_user_per_stream_setting = sgqlc.types.Field(CommunityPointsCustomRewardMaxPerUserPerStreamSettingInput, graphql_name='maxPerUserPerStreamSetting')
    prompt = sgqlc.types.Field(String, graphql_name='prompt')
    reward_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='rewardID')
    should_redemptions_skip_request_queue = sgqlc.types.Field(Boolean, graphql_name='shouldRedemptionsSkipRequestQueue')
    should_reset_image = sgqlc.types.Field(Boolean, graphql_name='shouldResetImage')
    title = sgqlc.types.Field(String, graphql_name='title')


class UpdateCommunityPointsCustomRewardRedemptionStatusInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'new_status', 'redemption_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    new_status = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardRedemptionStatus), graphql_name='newStatus')
    redemption_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='redemptionID')


class UpdateCommunityPointsCustomRewardRedemptionStatusesByChannelInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'new_status', 'old_status')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    new_status = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardRedemptionStatus), graphql_name='newStatus')
    old_status = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardRedemptionStatus), graphql_name='oldStatus')


class UpdateCommunityPointsCustomRewardRedemptionStatusesByRedemptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'new_status', 'old_status', 'redemption_ids')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    new_status = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardRedemptionStatus), graphql_name='newStatus')
    old_status = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardRedemptionStatus), graphql_name='oldStatus')
    redemption_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='redemptionIDs')


class UpdateCommunityPointsCustomRewardRedemptionStatusesByRewardInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'new_status', 'old_status', 'reward_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    new_status = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardRedemptionStatus), graphql_name='newStatus')
    old_status = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardRedemptionStatus), graphql_name='oldStatus')
    reward_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='rewardID')


class UpdateCommunityPointsEarlyAccessSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_signed_up',)
    is_signed_up = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSignedUp')


class UpdateCommunityPointsLastViewedContentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'viewed_content')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    viewed_content = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CommunityPointsContentType))), graphql_name='viewedContent')


class UpdateCommunityPointsSmartCostsAcknowledgementsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('acknowledgements', 'channel_id')
    acknowledgements = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(SmartCostsAcknowledgementInput))), graphql_name='acknowledgements')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class UpdateCompetitionContactInfoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('discord_url', 'email')
    discord_url = sgqlc.types.Field(String, graphql_name='discordURL')
    email = sgqlc.types.Field(String, graphql_name='email')


class UpdateCompetitionInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('banner_image_url', 'check_in_duration_minutes', 'description', 'end_at', 'format_type', 'game_id', 'id', 'image_url', 'leaderboard_details', 'name', 'participant_only_contact_info', 'prize_description', 'public_contact_info', 'registration_end_at', 'registration_limit', 'rules_description', 'start_at', 'state', 'team_size', 'terms_url')
    banner_image_url = sgqlc.types.Field(String, graphql_name='bannerImageURL')
    check_in_duration_minutes = sgqlc.types.Field(Int, graphql_name='checkInDurationMinutes')
    description = sgqlc.types.Field(String, graphql_name='description')
    end_at = sgqlc.types.Field(Time, graphql_name='endAt')
    format_type = sgqlc.types.Field(FormatType, graphql_name='formatType')
    game_id = sgqlc.types.Field(ID, graphql_name='gameID')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    leaderboard_details = sgqlc.types.Field('UpdateCompetitionLeaderboardDetailsInput', graphql_name='leaderboardDetails')
    name = sgqlc.types.Field(String, graphql_name='name')
    participant_only_contact_info = sgqlc.types.Field(UpdateCompetitionContactInfoInput, graphql_name='participantOnlyContactInfo')
    prize_description = sgqlc.types.Field(String, graphql_name='prizeDescription')
    public_contact_info = sgqlc.types.Field(UpdateCompetitionContactInfoInput, graphql_name='publicContactInfo')
    registration_end_at = sgqlc.types.Field(Time, graphql_name='registrationEndAt')
    registration_limit = sgqlc.types.Field(Int, graphql_name='registrationLimit')
    rules_description = sgqlc.types.Field(String, graphql_name='rulesDescription')
    start_at = sgqlc.types.Field(Time, graphql_name='startAt')
    state = sgqlc.types.Field(CompetitionState, graphql_name='state')
    team_size = sgqlc.types.Field(Int, graphql_name='teamSize')
    terms_url = sgqlc.types.Field(String, graphql_name='termsURL')


class UpdateCompetitionLeaderboardDetailsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('lobby_max_size', 'phase_count', 'tiebreaker_label')
    lobby_max_size = sgqlc.types.Field(Int, graphql_name='lobbyMaxSize')
    phase_count = sgqlc.types.Field(Int, graphql_name='phaseCount')
    tiebreaker_label = sgqlc.types.Field(TiebreakerLabel, graphql_name='tiebreakerLabel')


class UpdateCompetitionPlayerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('competition_id', 'discord_username', 'in_game_username', 'is_disqualified', 'state', 'user_id')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    discord_username = sgqlc.types.Field(String, graphql_name='discordUsername')
    in_game_username = sgqlc.types.Field(String, graphql_name='inGameUsername')
    is_disqualified = sgqlc.types.Field(Boolean, graphql_name='isDisqualified')
    state = sgqlc.types.Field(CompetitionPlayerState, graphql_name='state')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateCompetitionTeamInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('captain_id', 'competition_id', 'is_disqualified', 'members', 'team_id', 'team_name')
    captain_id = sgqlc.types.Field(ID, graphql_name='captainID')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    is_disqualified = sgqlc.types.Field(Boolean, graphql_name='isDisqualified')
    members = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='members')
    team_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='teamID')
    team_name = sgqlc.types.Field(String, graphql_name='teamName')


class UpdateConsentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('consent_session_id', 'privacy_law_name', 'vendor_status')
    consent_session_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='consentSessionID')
    privacy_law_name = sgqlc.types.Field(sgqlc.types.non_null(PrivacyLawName), graphql_name='privacyLawName')
    vendor_status = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('VendorConsentStatusInput'))), graphql_name='vendorStatus')


class UpdateContentTagsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('added_tag_ids', 'author_id', 'content_id', 'content_type', 'removed_tag_ids')
    added_tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='addedTagIDs')
    author_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='authorID')
    content_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='contentID')
    content_type = sgqlc.types.Field(sgqlc.types.non_null(ContentType), graphql_name='contentType')
    removed_tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='removedTagIDs')


class UpdateDropBenefitInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('account_link_url', 'benefit_id', 'entitlement_limit', 'game_id', 'is_ios_available', 'name', 'owner_id')
    account_link_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='accountLinkURL')
    benefit_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='benefitID')
    entitlement_limit = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='entitlementLimit')
    game_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='gameID')
    is_ios_available = sgqlc.types.Field(Boolean, graphql_name='isIosAvailable')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='ownerID')


class UpdateDropBenefitOnDropInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('benefit_id', 'drop_entitlement_limit', 'drop_id')
    benefit_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='benefitID')
    drop_entitlement_limit = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='dropEntitlementLimit')
    drop_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='dropID')


class UpdateDropPreconditionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('campaign_id', 'drop_preconditions')
    campaign_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='campaignID')
    drop_preconditions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(DropPrecondition)), graphql_name='dropPreconditions')


class UpdateDropsOptOutStatusInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_opted_out', 'user_id')
    is_opted_out = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isOptedOut')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateEmoteOrdersInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('orders',)
    orders = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(EmoteOrder))), graphql_name='orders')


class UpdateExtensionDiscoveryDataInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('discovery_manifest', 'id', 'version')
    discovery_manifest = sgqlc.types.Field(sgqlc.types.non_null(ExtensionDiscoveryManifestInput), graphql_name='discoveryManifest')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')


class UpdateExtensionManifestInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('asset_manifest', 'capabilities', 'developer_manifest', 'discovery_manifest', 'id', 'version', 'views')
    asset_manifest = sgqlc.types.Field(sgqlc.types.non_null(ExtensionAssetManifestInput), graphql_name='assetManifest')
    capabilities = sgqlc.types.Field(sgqlc.types.non_null(ExtensionCapabilitiesInput), graphql_name='capabilities')
    developer_manifest = sgqlc.types.Field(sgqlc.types.non_null(ExtensionDeveloperManifestInput), graphql_name='developerManifest')
    discovery_manifest = sgqlc.types.Field(sgqlc.types.non_null(ExtensionDiscoveryManifestInput), graphql_name='discoveryManifest')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')
    views = sgqlc.types.Field(sgqlc.types.non_null(ExtensionViewsInput), graphql_name='views')


class UpdateHypeTrainConfigInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('callout_emote_id', 'cooldown_period_minutes', 'difficulty', 'is_enabled', 'kickoff', 'should_use_personalized_settings', 'will_use_creator_color')
    callout_emote_id = sgqlc.types.Field(ID, graphql_name='calloutEmoteID')
    cooldown_period_minutes = sgqlc.types.Field(Int, graphql_name='cooldownPeriodMinutes')
    difficulty = sgqlc.types.Field(HypeTrainDifficulty, graphql_name='difficulty')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')
    kickoff = sgqlc.types.Field(HypeTrainKickoffInput, graphql_name='kickoff')
    should_use_personalized_settings = sgqlc.types.Field(Boolean, graphql_name='shouldUsePersonalizedSettings')
    will_use_creator_color = sgqlc.types.Field(Boolean, graphql_name='willUseCreatorColor')


class UpdateIsSharingActivityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_sharing_activity',)
    is_sharing_activity = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSharingActivity')


class UpdateLWATokenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('grant', 'grant_type')
    grant = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='grant')
    grant_type = sgqlc.types.Field(sgqlc.types.non_null(GrantType), graphql_name='grantType')


class UpdateLeaderboardSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('default_leaderboard', 'is_cheer_enabled', 'is_sub_gift_enabled', 'time_period', 'user_id')
    default_leaderboard = sgqlc.types.Field(LeaderboardType, graphql_name='defaultLeaderboard')
    is_cheer_enabled = sgqlc.types.Field(Boolean, graphql_name='isCheerEnabled')
    is_sub_gift_enabled = sgqlc.types.Field(Boolean, graphql_name='isSubGiftEnabled')
    time_period = sgqlc.types.Field(LeaderboardTimePeriodType, graphql_name='timePeriod')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateLiveUpNotificationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('live_up_notification', 'user_id')
    live_up_notification = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='liveUpNotification')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateLobbyParticipantScoreInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('competition_id', 'lobby_id', 'participant_id', 'phase_id', 'score')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    lobby_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='lobbyID')
    participant_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='participantID')
    phase_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='phaseID')
    score = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='score')


class UpdateMultiviewContentAttributesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('params',)
    params = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(MultiviewContentAttributeParams))), graphql_name='params')


class UpdateOnboardingSkippedChannelsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_ids', 'user_id')
    channel_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='channelIDs')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateOrganizationMemberRoleInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('organization_id', 'role', 'user_id')
    organization_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='organizationID')
    role = sgqlc.types.Field(sgqlc.types.non_null(OrganizationMemberRole), graphql_name='role')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateOwnerChanletAttributesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'is_chanlet_feature_enabled')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    is_chanlet_feature_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isChanletFeatureEnabled')


class UpdatePanelInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('description', 'id', 'image_url', 'link_url', 'slot_id', 'title')
    description = sgqlc.types.Field(String, graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    link_url = sgqlc.types.Field(String, graphql_name='linkURL')
    slot_id = sgqlc.types.Field(String, graphql_name='slotID')
    title = sgqlc.types.Field(String, graphql_name='title')


class UpdatePhoneNumberConfirmationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('one_time_password', 'phone_number', 'user_id')
    one_time_password = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='oneTimePassword')
    phone_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='phoneNumber')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdatePhoneNumberInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('phone_number', 'user_id')
    phone_number = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='phoneNumber')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdatePrimeOfferStatusInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('status_changes', 'user_id')
    status_changes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(OfferAndStatus))), graphql_name='statusChanges')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdatePrimeSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('prime_emoticons_set_name', 'should_enable_sub_credit_chat_notification', 'user_id')
    prime_emoticons_set_name = sgqlc.types.Field(PrimeEmoticonsSetName, graphql_name='primeEmoticonsSetName')
    should_enable_sub_credit_chat_notification = sgqlc.types.Field(Boolean, graphql_name='shouldEnableSubCreditChatNotification')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateRaidSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('incoming_raids_policy', 'user_id')
    incoming_raids_policy = sgqlc.types.Field(IncomingRaidsPolicy, graphql_name='incomingRaidsPolicy')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateRoomInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_previewable', 'minimum_allowed_role', 'minimum_read_messages_role', 'minimum_send_messages_role', 'name', 'room_id', 'topic')
    is_previewable = sgqlc.types.Field(Boolean, graphql_name='isPreviewable')
    minimum_allowed_role = sgqlc.types.Field(RoomRole, graphql_name='minimumAllowedRole')
    minimum_read_messages_role = sgqlc.types.Field(RoomRole, graphql_name='minimumReadMessagesRole')
    minimum_send_messages_role = sgqlc.types.Field(RoomRole, graphql_name='minimumSendMessagesRole')
    name = sgqlc.types.Field(String, graphql_name='name')
    room_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='roomID')
    topic = sgqlc.types.Field(String, graphql_name='topic')


class UpdateRoomModesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('enable_emotes_only_mode', 'enable_r9_kmode', 'enable_slow_mode', 'room_id', 'slow_mode_duration_seconds')
    enable_emotes_only_mode = sgqlc.types.Field(Boolean, graphql_name='enableEmotesOnlyMode')
    enable_r9_kmode = sgqlc.types.Field(Boolean, graphql_name='enableR9KMode')
    enable_slow_mode = sgqlc.types.Field(Boolean, graphql_name='enableSlowMode')
    room_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='roomID')
    slow_mode_duration_seconds = sgqlc.types.Field(Int, graphql_name='slowModeDurationSeconds')


class UpdateRoomViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_archived', 'is_muted', 'last_read_at', 'room_id')
    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    is_muted = sgqlc.types.Field(Boolean, graphql_name='isMuted')
    last_read_at = sgqlc.types.Field(Time, graphql_name='lastReadAt')
    room_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='roomID')


class UpdateScheduleSegmentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('categories', 'duration_minutes', 'first_occurrence_date', 'is_cancelled', 'schedule_id', 'segment_id', 'start', 'timezone', 'title')
    categories = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='categories')
    duration_minutes = sgqlc.types.Field(Int, graphql_name='durationMinutes')
    first_occurrence_date = sgqlc.types.Field(Time, graphql_name='firstOccurrenceDate')
    is_cancelled = sgqlc.types.Field(Boolean, graphql_name='isCancelled')
    schedule_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='scheduleID')
    segment_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='segmentID')
    start = sgqlc.types.Field(SegmentStartTimeInput, graphql_name='start')
    timezone = sgqlc.types.Field(String, graphql_name='timezone')
    title = sgqlc.types.Field(String, graphql_name='title')


class UpdateSeenCreatorOnboardingContentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('onboarding_content_ids', 'user_id')
    onboarding_content_ids = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='onboardingContentIDs')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateSocialMediaInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'id', 'title', 'url')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(String, graphql_name='title')
    url = sgqlc.types.Field(String, graphql_name='url')


class UpdateSquadInvitePolicyInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('incoming_invite_policy', 'user_id')
    incoming_invite_policy = sgqlc.types.Field(sgqlc.types.non_null(SquadStreamIncomingInvitePolicy), graphql_name='incomingInvitePolicy')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateSquadStreamInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('squad_stream_id', 'status')
    squad_stream_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='squadStreamID')
    status = sgqlc.types.Field(SquadStreamStatus, graphql_name='status')


class UpdateStuccoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'description', 'image_data1x', 'image_data2x', 'image_data4x', 'stucco_id', 'suffix')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    image_data1x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageData1x')
    image_data2x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageData2x')
    image_data4x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageData4x')
    stucco_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='stuccoID')
    suffix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='suffix')


class UpdateStuccoPackInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'stucco_pack_id', 'stuccos')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    stucco_pack_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='stuccoPackID')
    stuccos = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UpdateStuccoPackItemInput')), graphql_name='stuccos')


class UpdateStuccoPackItemInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('slot_index', 'stucco_id')
    slot_index = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='slotIndex')
    stucco_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='stuccoID')


class UpdateSubscriptionProductInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('display_name', 'has_ad_free', 'has_fast_chat', 'has_sub_only_chat', 'has_sub_only_video_archive', 'id', 'target_user_id')
    display_name = sgqlc.types.Field(String, graphql_name='displayName')
    has_ad_free = sgqlc.types.Field(Boolean, graphql_name='hasAdFree')
    has_fast_chat = sgqlc.types.Field(Boolean, graphql_name='hasFastChat')
    has_sub_only_chat = sgqlc.types.Field(Boolean, graphql_name='hasSubOnlyChat')
    has_sub_only_video_archive = sgqlc.types.Field(Boolean, graphql_name='hasSubOnlyVideoArchive')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    target_user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='targetUserID')


class UpdateUserColorsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('primary_color_hex', 'user_id')
    primary_color_hex = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='primaryColorHex')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateUserCreateDateHiddenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_create_date_hidden', 'user_id')
    is_create_date_hidden = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCreateDateHidden')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateUserDirectoryHiddenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_directory_hidden',)
    is_directory_hidden = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='IsDirectoryHidden')


class UpdateUserEmailReusableInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_email_reusable', 'user_id')
    is_email_reusable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='IsEmailReusable')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateUserInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('delete_phone_number', 'description', 'display_name', 'email', 'include_verification_code', 'user_id')
    delete_phone_number = sgqlc.types.Field(Boolean, graphql_name='deletePhoneNumber')
    description = sgqlc.types.Field(String, graphql_name='description')
    display_name = sgqlc.types.Field(String, graphql_name='displayName')
    email = sgqlc.types.Field(String, graphql_name='email')
    include_verification_code = sgqlc.types.Field(Boolean, graphql_name='includeVerificationCode')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateUserIsEmailRevertSuccessInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_email_revert_success', 'user_id')
    is_email_revert_success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEmailRevertSuccess')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateUserPredictionSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('has_accepted_tos', 'is_temporary_chat_badge_enabled')
    has_accepted_tos = sgqlc.types.Field(Boolean, graphql_name='hasAcceptedTOS')
    is_temporary_chat_badge_enabled = sgqlc.types.Field(Boolean, graphql_name='isTemporaryChatBadgeEnabled')


class UpdateUserSubscriptionSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('gifts_in_followed_channels_only', 'is_badge_modifier_hidden', 'is_founder_badges_hidden', 'is_gift_count_hidden', 'is_subscription_status_hidden')
    gifts_in_followed_channels_only = sgqlc.types.Field(Boolean, graphql_name='giftsInFollowedChannelsOnly')
    is_badge_modifier_hidden = sgqlc.types.Field(Boolean, graphql_name='isBadgeModifierHidden')
    is_founder_badges_hidden = sgqlc.types.Field(Boolean, graphql_name='isFounderBadgesHidden')
    is_gift_count_hidden = sgqlc.types.Field(Boolean, graphql_name='isGiftCountHidden')
    is_subscription_status_hidden = sgqlc.types.Field(Boolean, graphql_name='isSubscriptionStatusHidden')


class UpdateUserTeamMembershipInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('primary', 'revenue_revealed', 'stats_revealed', 'team_id', 'user_id')
    primary = sgqlc.types.Field(Boolean, graphql_name='primary')
    revenue_revealed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='revenueRevealed')
    stats_revealed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='statsRevealed')
    team_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='teamID')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class UpdateUserVideoShelvesInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'shelf_options')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    shelf_options = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ShelvesAvailableOptions))), graphql_name='shelfOptions')


class UpdateUserViewedVideoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('position', 'user_id', 'video_id', 'video_type')
    position = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='position')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')
    video_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='videoID')
    video_type = sgqlc.types.Field(sgqlc.types.non_null(VideoType), graphql_name='videoType')


class UpdateVideoCommentInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('comment_id', 'state')
    comment_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='commentID')
    state = sgqlc.types.Field(sgqlc.types.non_null(VideoCommentState), graphql_name='state')


class UpdateVideoInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('description', 'game', 'language', 'scope', 'thumbnail_path', 'title', 'video_id')
    description = sgqlc.types.Field(String, graphql_name='description')
    game = sgqlc.types.Field(String, graphql_name='game')
    language = sgqlc.types.Field(String, graphql_name='language')
    scope = sgqlc.types.Field(VideoPrivacyScope, graphql_name='scope')
    thumbnail_path = sgqlc.types.Field(String, graphql_name='thumbnailPath')
    title = sgqlc.types.Field(String, graphql_name='title')
    video_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='videoID')


class UpdateVideoStreamSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'delay_seconds', 'is_low_latency', 'should_archive_vods', 'should_show_disconnect_slate')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    delay_seconds = sgqlc.types.Field(Int, graphql_name='delaySeconds')
    is_low_latency = sgqlc.types.Field(Boolean, graphql_name='isLowLatency')
    should_archive_vods = sgqlc.types.Field(Boolean, graphql_name='shouldArchiveVODs')
    should_show_disconnect_slate = sgqlc.types.Field(Boolean, graphql_name='shouldShowDisconnectSlate')


class UpdateVisibilityInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('visibility',)
    visibility = sgqlc.types.Field(sgqlc.types.non_null(VisibilityInput), graphql_name='visibility')


class UpdateWhisperSettingsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_blocking_whispers_from_strangers',)
    is_blocking_whispers_from_strangers = sgqlc.types.Field(Boolean, graphql_name='isBlockingWhispersFromStrangers')


class UpdateWhisperThreadInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('is_archived', 'is_muted', 'is_spam', 'last_read_message_id', 'remove_whitelist', 'thread_id')
    is_archived = sgqlc.types.Field(Boolean, graphql_name='isArchived')
    is_muted = sgqlc.types.Field(Boolean, graphql_name='isMuted')
    is_spam = sgqlc.types.Field(Boolean, graphql_name='isSpam')
    last_read_message_id = sgqlc.types.Field(ID, graphql_name='lastReadMessageID')
    remove_whitelist = sgqlc.types.Field(Boolean, graphql_name='removeWhitelist')
    thread_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='threadID')


class UploadCompetitionImageInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('competition_id', 'image_type')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    image_type = sgqlc.types.Field(sgqlc.types.non_null(CompetitionImageType), graphql_name='imageType')


class UseChatNotificationTokenInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_login', 'include_streak', 'message', 'token_id')
    channel_login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='channelLogin')
    include_streak = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='includeStreak')
    message = sgqlc.types.Field(String, graphql_name='message')
    token_id = sgqlc.types.Field(ID, graphql_name='tokenID')


class UserByAttribute(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('broadcaster_of_clip_slug', 'login', 'owns_collection_id', 'owns_video_id')
    broadcaster_of_clip_slug = sgqlc.types.Field(String, graphql_name='broadcasterOfClipSlug')
    login = sgqlc.types.Field(String, graphql_name='login')
    owns_collection_id = sgqlc.types.Field(ID, graphql_name='ownsCollectionID')
    owns_video_id = sgqlc.types.Field(ID, graphql_name='ownsVideoID')


class UserClipsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('broadcaster_id', 'curator_id', 'filter', 'game_name', 'period', 'sort')
    broadcaster_id = sgqlc.types.Field(ID, graphql_name='broadcasterID')
    curator_id = sgqlc.types.Field(ID, graphql_name='curatorID')
    filter = sgqlc.types.Field(ClipsFilter, graphql_name='filter')
    game_name = sgqlc.types.Field(String, graphql_name='gameName')
    period = sgqlc.types.Field(ClipsPeriod, graphql_name='period')
    sort = sgqlc.types.Field(ClipsSort, graphql_name='sort')


class ValidateVerificationCodeInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('address', 'code', 'key')
    address = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='address')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')


class VendorConsentStatusInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('consent_status', 'name')
    consent_status = sgqlc.types.Field(sgqlc.types.non_null(ConsentStatus), graphql_name='consentStatus')
    name = sgqlc.types.Field(sgqlc.types.non_null(VendorName), graphql_name='name')


class VerifyContactMethodInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('opaque_id',)
    opaque_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='opaqueID')


class VerifyOneTimePasswordInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('one_time_password', 'user_id')
    one_time_password = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='oneTimePassword')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class VerifyRewardedVideoEligibilityCaptchaInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('arkose_endpoint_version', 'session_token')
    arkose_endpoint_version = sgqlc.types.Field(sgqlc.types.non_null(ArkoseEndpointVersion), graphql_name='arkoseEndpointVersion')
    session_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sessionToken')


class VerticalSubDirectoryContentContext(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('category_ids', 'tag_ids')
    category_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='categoryIDs')
    tag_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='tagIDs')


class VideoConnectionOptionsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('game_ids', 'include_private', 'max_length_seconds', 'min_length_seconds', 'search_range_end_at', 'search_range_start_at')
    game_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='gameIDs')
    include_private = sgqlc.types.Field(Boolean, graphql_name='includePrivate')
    max_length_seconds = sgqlc.types.Field(Int, graphql_name='maxLengthSeconds')
    min_length_seconds = sgqlc.types.Field(Int, graphql_name='minLengthSeconds')
    search_range_end_at = sgqlc.types.Field(Time, graphql_name='searchRangeEndAt')
    search_range_start_at = sgqlc.types.Field(Time, graphql_name='searchRangeStartAt')


class VideoConnectionSearchParams(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('term',)
    term = sgqlc.types.Field(String, graphql_name='term')


class VideoOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('include_private',)
    include_private = sgqlc.types.Field(Boolean, graphql_name='includePrivate')


class VideoOverlayActivationInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('slot',)
    slot = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slot')


class VideoOverlayViewInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('viewer_path',)
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')


class VideoTopClipsInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('curator_id', 'period', 'sort')
    curator_id = sgqlc.types.Field(ID, graphql_name='curatorID')
    period = sgqlc.types.Field(ClipsPeriod, graphql_name='period')
    sort = sgqlc.types.Field(ClipsSort, graphql_name='sort')


class VisitStreamManagerInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class VoteInAdPollInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('choice_id', 'poll_id', 'user_id', 'vote_id')
    choice_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='choiceID')
    poll_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='pollID')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')
    vote_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='voteID')


class VoteInPollByChoiceIndexInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('channel_id', 'choice_index', 'tokens', 'user_id', 'vote_id')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    choice_index = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='choiceIndex')
    tokens = sgqlc.types.Field(PollVoteTokensInput, graphql_name='tokens')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')
    vote_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='voteID')


class VoteInPollInput(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('choice_id', 'poll_id', 'tokens', 'user_id', 'vote_id')
    choice_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='choiceID')
    poll_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='pollID')
    tokens = sgqlc.types.Field(PollVoteTokensInput, graphql_name='tokens')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')
    vote_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='voteID')


class WatchPartyItemSearchOptions(sgqlc.types.Input):
    __schema__ = schema
    __field_names__ = ('parent_id', 'search_query')
    parent_id = sgqlc.types.Field(ID, graphql_name='parentID')
    search_query = sgqlc.types.Field(String, graphql_name='searchQuery')



########################################################################
# Output Objects and Interfaces
########################################################################
class ADASProperties(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('partner', 'program_id')
    partner = sgqlc.types.Field(String, graphql_name='partner')
    program_id = sgqlc.types.Field(ID, graphql_name='programID')


class AcceptFriendRequestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class AcceptOrganizationInviteError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(AcceptOrganizationInviteErrorCode), graphql_name='code')


class AcceptOrganizationInvitePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(AcceptOrganizationInviteError, graphql_name='error')


class AcceptProgramAgreementPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'workflow')
    error = sgqlc.types.Field(AcceptProgramAgreementError, graphql_name='error')
    workflow = sgqlc.types.Field('PayoutOnboardingWorkflow', graphql_name='workflow')


class AcceptSquadStreamInvitationError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(AcceptSquadStreamInvitationErrorCode), graphql_name='code')


class AcceptSquadStreamInvitationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'invitation')
    error = sgqlc.types.Field(AcceptSquadStreamInvitationError, graphql_name='error')
    invitation = sgqlc.types.Field('SquadStreamInvitation', graphql_name='invitation')


class AccountConnectionSet(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('blizzard', 'facebook', 'has_connected_amazon', 'riot', 'steam', 'twitter', 'youtube')
    blizzard = sgqlc.types.Field('UserBlizzardConnectionLink', graphql_name='blizzard')
    facebook = sgqlc.types.Field('UserFacebookConnectionLink', graphql_name='facebook')
    has_connected_amazon = sgqlc.types.Field(Boolean, graphql_name='hasConnectedAmazon')
    riot = sgqlc.types.Field('UserRiotConnectionLink', graphql_name='riot')
    steam = sgqlc.types.Field('UserSteamConnectionLink', graphql_name='steam')
    twitter = sgqlc.types.Field('UserTwitterConnectionLink', graphql_name='twitter')
    youtube = sgqlc.types.Field('UserYoutubeConnectionLink', graphql_name='youtube')


class AcknowledgePredictionResultError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(AcknowledgePredictionResultErrorCode), graphql_name='code')


class AcknowledgePredictionResultPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'prediction')
    error = sgqlc.types.Field(AcknowledgePredictionResultError, graphql_name='error')
    prediction = sgqlc.types.Field('Prediction', graphql_name='prediction')


class AcknowledgeSubscriptionStatePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('state',)
    state = sgqlc.types.Field(UnacknowledgedSubscriptionEventState, graphql_name='state')


class AcknowledgeUnbanRequestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'unban_request')
    error = sgqlc.types.Field('UnbanRequestError', graphql_name='error')
    unban_request = sgqlc.types.Field('UnbanRequest', graphql_name='unbanRequest')


class ActivateExtensionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('installed_extensions',)
    installed_extensions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExtensionInstallation'))), graphql_name='installedExtensions')


class Activity(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('type',)
    type = sgqlc.types.Field(ActivityType, graphql_name='type')


class AdContext(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('decline_state', 'id', 'rad_token')
    decline_state = sgqlc.types.Field(sgqlc.types.non_null('AdContextDeclineState'), graphql_name='declineState')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    rad_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='radToken')


class AdContextDeclineState(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('reason', 'should_decline')
    reason = sgqlc.types.Field(String, graphql_name='reason')
    should_decline = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldDecline')


class AdCreative(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'integrated_loudness')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    integrated_loudness = sgqlc.types.Field(Float, graphql_name='integratedLoudness')


class AdPollVote(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('choice_id', 'id', 'poll_id', 'user_id')
    choice_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='choiceID')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    poll_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='pollID')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class AdProperties(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('ad_server', 'ad_server_default', 'adas_properties', 'costreamers', 'density', 'disable_prerolls_ability', 'experiment_treatment', 'frequency', 'has_postrolls_disabled', 'has_prerolls_disabled', 'has_turbo_disabled', 'has_vod_ads_enabled', 'is_multiplayer_ads_for_subs_enabled', 'is_picture_by_picture_ad_eligible', 'max_ad_break_length', 'multiplayer_ad_offers', 'required_age', 'tracking_pixels', 'vod_archive_midrolls', 'vod_archive_midrolls_break_length', 'vod_archive_midrolls_frequency')
    ad_server = sgqlc.types.Field(String, graphql_name='adServer')
    ad_server_default = sgqlc.types.Field(String, graphql_name='adServerDefault')
    adas_properties = sgqlc.types.Field(ADASProperties, graphql_name='adasProperties')
    costreamers = sgqlc.types.Field(sgqlc.types.list_of('User'), graphql_name='costreamers')
    density = sgqlc.types.Field('Density', graphql_name='density')
    disable_prerolls_ability = sgqlc.types.Field('DisablePrerollsAbility', graphql_name='disablePrerollsAbility')
    experiment_treatment = sgqlc.types.Field(String, graphql_name='experimentTreatment', args=sgqlc.types.ArgDict((
        ('bucket', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='bucket', default=None)),
))
    )
    frequency = sgqlc.types.Field(Int, graphql_name='frequency')
    has_postrolls_disabled = sgqlc.types.Field(Boolean, graphql_name='hasPostrollsDisabled')
    has_prerolls_disabled = sgqlc.types.Field(Boolean, graphql_name='hasPrerollsDisabled')
    has_turbo_disabled = sgqlc.types.Field(Boolean, graphql_name='hasTurboDisabled')
    has_vod_ads_enabled = sgqlc.types.Field(Boolean, graphql_name='hasVodAdsEnabled')
    is_multiplayer_ads_for_subs_enabled = sgqlc.types.Field(Boolean, graphql_name='isMultiplayerAdsForSubsEnabled')
    is_picture_by_picture_ad_eligible = sgqlc.types.Field(Boolean, graphql_name='isPictureByPictureAdEligible')
    max_ad_break_length = sgqlc.types.Field(Int, graphql_name='maxAdBreakLength')
    multiplayer_ad_offers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('MultiplayerAdOffer')), graphql_name='multiplayerAdOffers')
    required_age = sgqlc.types.Field(Int, graphql_name='requiredAge')
    tracking_pixels = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TrackingPixel')), graphql_name='trackingPixels', args=sgqlc.types.ArgDict((
        ('consent', sgqlc.types.Arg(GDPRConsent, graphql_name='consent', default=None)),
))
    )
    vod_archive_midrolls = sgqlc.types.Field(String, graphql_name='vodArchiveMidrolls')
    vod_archive_midrolls_break_length = sgqlc.types.Field(Int, graphql_name='vodArchiveMidrollsBreakLength')
    vod_archive_midrolls_frequency = sgqlc.types.Field(Int, graphql_name='vodArchiveMidrollsFrequency')


class AdSession(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'length_seconds', 'retry_after_seconds')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    length_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='lengthSeconds')
    retry_after_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='retryAfterSeconds')


class AdSlot(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('duration_seconds', 'run_at_time')
    duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationSeconds')
    run_at_time = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='runAtTime')


class AddAutohostChannelsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class AddBrowserPushSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('browser_push_subscription_id',)
    browser_push_subscription_id = sgqlc.types.Field(ID, graphql_name='browserPushSubscriptionID')


class AddChannelBlockedTermPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('added_at', 'error', 'phrases')
    added_at = sgqlc.types.Field(Time, graphql_name='addedAt')
    error = sgqlc.types.Field(AddChannelBlockedTermError, graphql_name='error')
    phrases = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='phrases')


class AddChannelPermittedTermPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('added_at', 'error', 'phrases')
    added_at = sgqlc.types.Field(Time, graphql_name='addedAt')
    error = sgqlc.types.Field(AddChannelPermittedTermError, graphql_name='error')
    phrases = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='phrases')


class AddCollectionItemPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('collection',)
    collection = sgqlc.types.Field('Collection', graphql_name='collection')


class AddCompetitionPhasePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field('Competition', graphql_name='competition')
    error = sgqlc.types.Field('CompetitionError', graphql_name='error')


class AddCompetitionPlayerPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field('Competition', graphql_name='competition')
    error = sgqlc.types.Field('CompetitionError', graphql_name='error')


class AddCompetitionTeamPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field('Competition', graphql_name='competition')
    error = sgqlc.types.Field('CompetitionError', graphql_name='error')


class AddDeviceTokenPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('device_token',)
    device_token = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='deviceToken')


class AddDropToCampaignPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop', 'error')
    drop = sgqlc.types.Field('DropType', graphql_name='drop')
    error = sgqlc.types.Field('DropsError', graphql_name='error')


class AddEditorError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(AddEditorErrorCode), graphql_name='code')


class AddEditorPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error', 'target_user')
    channel = sgqlc.types.Field('User', graphql_name='channel')
    error = sgqlc.types.Field(AddEditorError, graphql_name='error')
    target_user = sgqlc.types.Field('User', graphql_name='targetUser')


class AddRadioRecentlyPlayedError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(AddRadioRecentlyPlayedErrorCode), graphql_name='code')


class AddRadioRecentlyPlayedPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'recent')
    error = sgqlc.types.Field(AddRadioRecentlyPlayedError, graphql_name='error')
    recent = sgqlc.types.Field('RadioRecentlyPlayed', graphql_name='recent')


class AddReactionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content',)
    content = sgqlc.types.Field(sgqlc.types.non_null('ReactableContent'), graphql_name='content')


class AddRecommendationFeedbackPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('recommendation_feedback',)
    recommendation_feedback = sgqlc.types.Field('RecommendationFeedback', graphql_name='recommendationFeedback')


class AddStreamAuthorizedUserError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(AddStreamAuthorizedUserErrorCode), graphql_name='code')


class AddStreamAuthorizedUserPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error')
    channel = sgqlc.types.Field('Channel', graphql_name='channel')
    error = sgqlc.types.Field(AddStreamAuthorizedUserError, graphql_name='error')


class AggregatedReferrals(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count', 'name')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class AllocateKeysForBountyError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(AllocateKeysForBountyErrorCode), graphql_name='code')


class AllocateKeysForBountyPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bounty', 'error')
    bounty = sgqlc.types.Field('Bounty', graphql_name='bounty')
    error = sgqlc.types.Field(AllocateKeysForBountyError, graphql_name='error')


class AllowRejectedChatMessagePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('message',)
    message = sgqlc.types.Field('RejectedChatMessage', graphql_name='message')


class AllowRejectedCheerPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class ApplyExtensionActivationsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('installed_extensions',)
    installed_extensions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExtensionInstallation'))), graphql_name='installedExtensions')


class ApproveUnbanRequestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'unban_request')
    error = sgqlc.types.Field('UnbanRequestError', graphql_name='error')
    unban_request = sgqlc.types.Field('UnbanRequest', graphql_name='unbanRequest')


class ArchiveChanletPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('chanlet',)
    chanlet = sgqlc.types.Field(sgqlc.types.non_null('Channel'), graphql_name='chanlet')


class ArchiveCommunityPointsCommunityGoalError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(ArchiveCommunityPointsCommunityGoalErrorCode), graphql_name='code')


class ArchiveCommunityPointsCommunityGoalPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'goal')
    error = sgqlc.types.Field(ArchiveCommunityPointsCommunityGoalError, graphql_name='error')
    goal = sgqlc.types.Field('CommunityPointsCommunityGoal', graphql_name='goal')


class ArchivePollInChannelPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('poll',)
    poll = sgqlc.types.Field('Poll', graphql_name='poll')


class ArchivePollPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('poll',)
    poll = sgqlc.types.Field('Poll', graphql_name='poll')


class AssignExtensionBillingManagerError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(AssignExtensionBillingManagerErrorCode), graphql_name='code')


class AssignExtensionBillingManagerPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'extension_client')
    error = sgqlc.types.Field(AssignExtensionBillingManagerError, graphql_name='error')
    extension_client = sgqlc.types.Field('ExtensionClient', graphql_name='extensionClient')


class AssociatesStore(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'is_payout_enabled', 'store_id')
    id = sgqlc.types.Field(sgqlc.types.non_null('ID'), graphql_name='ID')
    is_payout_enabled = sgqlc.types.Field(Boolean, graphql_name='isPayoutEnabled')
    store_id = sgqlc.types.Field(String, graphql_name='storeID')


class AuthenticatedSession(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('client_id', 'created_at', 'deleted_at', 'location', 'user_agent', 'user_id')
    client_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='clientID')
    created_at = sgqlc.types.Field(Time, graphql_name='createdAt')
    deleted_at = sgqlc.types.Field(Time, graphql_name='deletedAt')
    location = sgqlc.types.Field(String, graphql_name='location')
    user_agent = sgqlc.types.Field(String, graphql_name='userAgent')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class AutoMod(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('topics',)
    topics = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('AutoModTopic'))), graphql_name='topics')


class AutoModCaughtMessage(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('category', 'id', 'mod_logs_message', 'resolved_at', 'resolver', 'status')
    category = sgqlc.types.Field(sgqlc.types.non_null(AutoModCaughtMessageCategory), graphql_name='category')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    mod_logs_message = sgqlc.types.Field(sgqlc.types.non_null('ModLogsMessage'), graphql_name='modLogsMessage')
    resolved_at = sgqlc.types.Field(Time, graphql_name='resolvedAt')
    resolver = sgqlc.types.Field('User', graphql_name='resolver')
    status = sgqlc.types.Field(sgqlc.types.non_null(AutoModCaughtMessageStatus), graphql_name='status')


class AutoModLevels(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('ableism_level', 'aggression_level', 'homophobia_level', 'misogyny_level', 'name_calling_level', 'overall_level', 'profanity_level', 'racism_level', 'sexual_level', 'white_nationalism_level')
    ableism_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='ableismLevel')
    aggression_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='aggressionLevel')
    homophobia_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='homophobiaLevel')
    misogyny_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='misogynyLevel')
    name_calling_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='nameCallingLevel')
    overall_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='overallLevel')
    profanity_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='profanityLevel')
    racism_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='racismLevel')
    sexual_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sexualLevel')
    white_nationalism_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='whiteNationalismLevel')


class AutoModProperties(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('aggressive_level', 'identity_level', 'profanity_level', 'sexual_level')
    aggressive_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='aggressiveLevel')
    identity_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='identityLevel')
    profanity_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='profanityLevel')
    sexual_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='sexualLevel')


class AutoModTopic(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('type', 'weight')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    weight = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='weight')


class AutoRefill(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('actions', 'profiles', 'xsolla_payment_methods')
    actions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CheckoutAction))), graphql_name='actions', args=sgqlc.types.ArgDict((
        ('payment_provider', sgqlc.types.Arg(sgqlc.types.non_null(PaymentProvider), graphql_name='paymentProvider', default=None)),
))
    )
    profiles = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('AutoRefillProfile'))), graphql_name='profiles')
    xsolla_payment_methods = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PaymentMethod')), graphql_name='xsollaPaymentMethods')


class AutoRefillProfile(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('charge_instrument', 'id', 'is_enabled', 'offer_id', 'threshold')
    charge_instrument = sgqlc.types.Field('ChargeInstrument', graphql_name='chargeInstrument')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    offer_id = sgqlc.types.Field(ID, graphql_name='offerID')
    threshold = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='threshold')


class AutohostChannelConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('nodes',)
    nodes = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('User')), graphql_name='nodes')


class AutohostSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('deprioritize_vodcast', 'enabled', 'incoming_raids_policy', 'strategy', 'team_host')
    deprioritize_vodcast = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='deprioritizeVodcast')
    enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='enabled')
    incoming_raids_policy = sgqlc.types.Field(sgqlc.types.non_null(AutohostSettingsIncomingRaidsPolicy), graphql_name='incomingRaidsPolicy')
    strategy = sgqlc.types.Field(sgqlc.types.non_null(AutohostSettingsStrategy), graphql_name='strategy')
    team_host = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='teamHost')


class AutohostedByChannelConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('nodes',)
    nodes = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('User')), graphql_name='nodes')


class AutomodContentResponse(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'text')
    content = sgqlc.types.Field('RoomMessageContent', graphql_name='content')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class BackupIngestSession(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('stitched_from', 'stitched_to')
    stitched_from = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BackupStreamSession')), graphql_name='stitchedFrom')
    stitched_to = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BackupStreamSession')), graphql_name='stitchedTo')


class BackupStreamSession(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcast_format', 'id', 'stitched_time_at')
    broadcast_format = sgqlc.types.Field(sgqlc.types.non_null(BroadcastFormat), graphql_name='broadcastFormat')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    stitched_time_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='stitchedTimeAt')


class Badge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('click_action', 'click_url', 'description', 'id', 'image_url', 'on_click_action', 'set_id', 'title', 'user', 'version')
    click_action = sgqlc.types.Field(BadgeClickAction, graphql_name='clickAction')
    click_url = sgqlc.types.Field(String, graphql_name='clickURL')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL', args=sgqlc.types.ArgDict((
        ('size', sgqlc.types.Arg(BadgeImageSize, graphql_name='size', default='NORMAL')),
))
    )
    on_click_action = sgqlc.types.Field(BadgeClickAction, graphql_name='onClickAction')
    set_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='setID')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    user = sgqlc.types.Field('User', graphql_name='user')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')


class Balance(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('amount', 'currency', 'expires_at', 'exponent')
    amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='amount')
    currency = sgqlc.types.Field(sgqlc.types.non_null(Currency), graphql_name='currency')
    expires_at = sgqlc.types.Field(Time, graphql_name='expiresAt')
    exponent = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='exponent')


class BanUserFromChatRoomError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'max_timeout_duration_seconds', 'min_timeout_duration_seconds')
    code = sgqlc.types.Field(sgqlc.types.non_null(BanUserFromChatRoomErrorCode), graphql_name='code')
    max_timeout_duration_seconds = sgqlc.types.Field(Int, graphql_name='maxTimeoutDurationSeconds')
    min_timeout_duration_seconds = sgqlc.types.Field(Int, graphql_name='minTimeoutDurationSeconds')


class BanUserFromChatRoomPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('ban', 'error')
    ban = sgqlc.types.Field('ChatRoomBanStatus', graphql_name='ban')
    error = sgqlc.types.Field(BanUserFromChatRoomError, graphql_name='error')


class BanVideoCommenterPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class BeginUseBitsInExtensionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('balance', 'bits_required', 'is_prompt_required', 'transaction_id')
    balance = sgqlc.types.Field(Int, graphql_name='balance')
    bits_required = sgqlc.types.Field(Int, graphql_name='bitsRequired')
    is_prompt_required = sgqlc.types.Field(Boolean, graphql_name='isPromptRequired')
    transaction_id = sgqlc.types.Field(ID, graphql_name='transactionID')


class BitsBadgeTier(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('badge', 'can_upload_emoticons', 'emoticon_upload_configurations', 'emoticons', 'is_enabled', 'last_updated', 'threshold', 'unlocked_users_count')
    badge = sgqlc.types.Field(Badge, graphql_name='badge')
    can_upload_emoticons = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canUploadEmoticons')
    emoticon_upload_configurations = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('EmoteUploadConfiguration')), graphql_name='emoticonUploadConfigurations')
    emoticons = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('Emote')), graphql_name='emoticons')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    last_updated = sgqlc.types.Field(Time, graphql_name='lastUpdated')
    threshold = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='threshold')
    unlocked_users_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='unlockedUsersCount')


class BitsBadgeTierNotification(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_share', 'id', 'threshold', 'unlocked_emoticons')
    can_share = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canShare')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    threshold = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='threshold')
    unlocked_emoticons = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('Emote')), graphql_name='unlockedEmoticons')


class BitsEvent(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('amount', 'channel', 'id', 'type', 'used_at')
    amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='amount')
    channel = sgqlc.types.Field('User', graphql_name='channel')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    type = sgqlc.types.Field(sgqlc.types.non_null(BitsEventType), graphql_name='type')
    used_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='usedAt')


class BitsEventConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('BitsEventEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class BitsEventEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(BitsEvent), graphql_name='node')


class BitsHashtagConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges',)
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BitsHashtagEdge')), graphql_name='edges')


class BitsHashtagEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null('BitsHashtagEntry'), graphql_name='node')


class BitsHashtagEntry(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('description', 'id', 'image_url')
    description = sgqlc.types.Field(String, graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')


class BitsLeaderboard(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('entries', 'id', 'items', 'seconds_remaining')
    entries = sgqlc.types.Field(sgqlc.types.non_null('BitsLeaderboardConnection'), graphql_name='entries')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    items = sgqlc.types.Field(sgqlc.types.non_null('BitsLeaderboardItemConnection'), graphql_name='items')
    seconds_remaining = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='secondsRemaining')


class BitsLeaderboardConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges',)
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('BitsLeaderboardEdge')), graphql_name='edges')


class BitsLeaderboardEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='cursor')
    node = sgqlc.types.Field('BitsLeaderboardEntry', graphql_name='node')


class BitsLeaderboardEntry(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'rank', 'score')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    rank = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='rank')
    score = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='score')


class BitsLeaderboardItem(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('entry_key', 'id', 'rank', 'score')
    entry_key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='entryKey')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    rank = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='rank')
    score = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='score')


class BitsLeaderboardItemConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of('BitsLeaderboardItemEdge'), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class BitsLeaderboardItemEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(BitsLeaderboardItem, graphql_name='node')


class BitsLeaderboardSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'time_period_type')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    time_period_type = sgqlc.types.Field(LeaderboardTimePeriodType, graphql_name='timePeriodType')


class BitsOffer(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('bits', 'id', 'type')
    bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bits')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    type = sgqlc.types.Field(sgqlc.types.non_null(BitsOfferType), graphql_name='type')


class BitsPaymentMethods(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('payment_methods',)
    payment_methods = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BitsPaymentMethodType)), graphql_name='paymentMethods')


class BitsProduct(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('amount', 'id', 'max_quantity', 'offer_id', 'promo', 'self', 'type')
    amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='amount')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    max_quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='maxQuantity')
    offer_id = sgqlc.types.Field(ID, graphql_name='offerID')
    promo = sgqlc.types.Field('BitsProductPromotion', graphql_name='promo')
    self = sgqlc.types.Field('BitsProductSelfEdge', graphql_name='self')
    type = sgqlc.types.Field(sgqlc.types.non_null(BitsProductType), graphql_name='type')


class BitsProductEligibility(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_purchase', 'reason_code')
    can_purchase = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canPurchase')
    reason_code = sgqlc.types.Field(String, graphql_name='reasonCode')


class BitsProductPromotion(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'title', 'type')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')


class BitsProductPurchaseInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('actions', 'error', 'preview_price_info')
    actions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CheckoutAction))), graphql_name='actions')
    error = sgqlc.types.Field('BitsProductPurchaseInfoError', graphql_name='error')
    preview_price_info = sgqlc.types.Field('PriceInfo', graphql_name='previewPriceInfo')


class BitsProductPurchaseInfoError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(BitsProductPurchaseInfoErrorCode), graphql_name='code')


class BitsProductSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('checkout_configuration', 'eligibility', 'purchase_info')
    checkout_configuration = sgqlc.types.Field('CheckoutConfiguration', graphql_name='checkoutConfiguration')
    eligibility = sgqlc.types.Field(sgqlc.types.non_null(BitsProductEligibility), graphql_name='eligibility', args=sgqlc.types.ArgDict((
        ('quantity', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='quantity', default=None)),
))
    )
    purchase_info = sgqlc.types.Field(sgqlc.types.non_null(BitsProductPurchaseInfo), graphql_name='purchaseInfo', args=sgqlc.types.ArgDict((
        ('quantity', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='quantity', default=None)),
        ('payment_session', sgqlc.types.Arg(PaymentSession, graphql_name='paymentSession', default=None)),
))
    )


class BitsPromotion(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'type')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')


class BitsUserSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('first_cheer_tutorial',)
    first_cheer_tutorial = sgqlc.types.Field('FirstCheerTutorial', graphql_name='firstCheerTutorial')


class BlizzardUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('battle_tag', 'id', 'region')
    battle_tag = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='battleTag')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    region = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='region')


class BlockUserPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('target_user',)
    target_user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='targetUser')


class BoostSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_earned_enabled', 'is_eligible', 'is_enabled', 'is_paid_enabled')
    is_earned_enabled = sgqlc.types.Field(Boolean, graphql_name='isEarnedEnabled')
    is_eligible = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEligible')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')
    is_paid_enabled = sgqlc.types.Field(Boolean, graphql_name='isPaidEnabled')


class Bounty(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('campaign', 'chat_cta', 'claim_time', 'claimed_at', 'end_at', 'end_time', 'expires_at', 'id', 'keys', 'last_modified_at', 'maximum_payout_ccu', 'maximum_payout_cents', 'minimum_payout_ccu', 'moderation_metadata', 'moderation_status', 'payout_cents', 'platform', 'region', 'restriction', 'start_at', 'start_time', 'status', 'tracking_started_at', 'tracking_stopped_at', 'videos')
    campaign = sgqlc.types.Field(sgqlc.types.non_null('BountyCampaign'), graphql_name='campaign')
    chat_cta = sgqlc.types.Field('BountyChatCTA', graphql_name='chatCTA')
    claim_time = sgqlc.types.Field(Time, graphql_name='claimTime')
    claimed_at = sgqlc.types.Field(Time, graphql_name='claimedAt')
    end_at = sgqlc.types.Field(Time, graphql_name='endAt')
    end_time = sgqlc.types.Field(Time, graphql_name='endTime')
    expires_at = sgqlc.types.Field(Time, graphql_name='expiresAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    keys = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BountyProductKey')), graphql_name='keys')
    last_modified_at = sgqlc.types.Field(Time, graphql_name='lastModifiedAt')
    maximum_payout_ccu = sgqlc.types.Field(Int, graphql_name='maximumPayoutCCU')
    maximum_payout_cents = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='maximumPayoutCents')
    minimum_payout_ccu = sgqlc.types.Field(Int, graphql_name='minimumPayoutCCU')
    moderation_metadata = sgqlc.types.Field('BountyModerationMetadata', graphql_name='moderationMetadata')
    moderation_status = sgqlc.types.Field(BountyModerationStatus, graphql_name='moderationStatus')
    payout_cents = sgqlc.types.Field(Int, graphql_name='payoutCents')
    platform = sgqlc.types.Field(String, graphql_name='platform')
    region = sgqlc.types.Field(String, graphql_name='region')
    restriction = sgqlc.types.Field('BountyRestriction', graphql_name='restriction')
    start_at = sgqlc.types.Field(Time, graphql_name='startAt')
    start_time = sgqlc.types.Field(Time, graphql_name='startTime')
    status = sgqlc.types.Field(sgqlc.types.non_null(BountyStatus), graphql_name='status')
    tracking_started_at = sgqlc.types.Field(Time, graphql_name='trackingStartedAt')
    tracking_stopped_at = sgqlc.types.Field(Time, graphql_name='trackingStoppedAt')
    videos = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BountyVideo')), graphql_name='videos')


class BountyBoardSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('has_notification', 'is_enabled', 'status')
    has_notification = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasNotification')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    status = sgqlc.types.Field(sgqlc.types.non_null(BountyBoardUserStatus), graphql_name='status')


class BountyCampaign(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('allowed_games', 'available_platforms', 'bounty_length_days', 'box_art_url', 'brand_details', 'cover_url', 'details', 'display_name', 'end_at', 'end_time', 'game', 'id', 'is_promotion_eligible', 'key_descriptors', 'rejection_reason', 'should_allow_all_games', 'sponsor', 'start_at', 'start_time', 'status', 'stream_length_seconds', 'target_promotional_video_clicks', 'terms_and_conditions_url', 'title', 'tracking_pixels', 'type', 'video_url', 'videos')
    allowed_games = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Game')), graphql_name='allowedGames')
    available_platforms = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='availablePlatforms')
    bounty_length_days = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bountyLengthDays')
    box_art_url = sgqlc.types.Field(String, graphql_name='boxArtURL')
    brand_details = sgqlc.types.Field('BountyCampaignBrandDetails', graphql_name='brandDetails')
    cover_url = sgqlc.types.Field(String, graphql_name='coverURL')
    details = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='details')
    display_name = sgqlc.types.Field(String, graphql_name='displayName')
    end_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endAt')
    end_time = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endTime')
    game = sgqlc.types.Field('Game', graphql_name='game')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_promotion_eligible = sgqlc.types.Field(Boolean, graphql_name='isPromotionEligible')
    key_descriptors = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BountyCampaignKeyDescriptor')), graphql_name='keyDescriptors')
    rejection_reason = sgqlc.types.Field(String, graphql_name='rejectionReason')
    should_allow_all_games = sgqlc.types.Field(Boolean, graphql_name='shouldAllowAllGames')
    sponsor = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sponsor')
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')
    start_time = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startTime')
    status = sgqlc.types.Field(BountyCampaignStatus, graphql_name='status')
    stream_length_seconds = sgqlc.types.Field(Int, graphql_name='streamLengthSeconds')
    target_promotional_video_clicks = sgqlc.types.Field(Int, graphql_name='targetPromotionalVideoClicks')
    terms_and_conditions_url = sgqlc.types.Field(String, graphql_name='termsAndConditionsURL')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    tracking_pixels = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TrackingPixel')), graphql_name='trackingPixels')
    type = sgqlc.types.Field(sgqlc.types.non_null(BountyCampaignType), graphql_name='type')
    video_url = sgqlc.types.Field(String, graphql_name='videoURL')
    videos = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BountyCampaignVideo')), graphql_name='videos')


class BountyCampaignBrandDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('blacklisted_broadcasters', 'broadcaster_multiplier', 'campaign_reporting', 'chat_ctas', 'claimed_bounty_count', 'claimed_budget_cents', 'completed_bounty_count', 'expanded_bounty_count', 'includes_all_broadcasters', 'includes_all_countries', 'includes_all_games', 'includes_variety_broadcasters', 'performance_metrics', 'rejection_reason', 'spent_budget_cents', 'status', 'targeted_countries', 'targeted_games', 'total_blocked_broadcasters', 'total_budget_cents', 'viewed_bounty_count')
    blacklisted_broadcasters = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('User')), graphql_name='blacklistedBroadcasters')
    broadcaster_multiplier = sgqlc.types.Field(Float, graphql_name='broadcasterMultiplier')
    campaign_reporting = sgqlc.types.Field('BountyCampaignReporting', graphql_name='campaignReporting')
    chat_ctas = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BountyChatCTA')), graphql_name='chatCTAs')
    claimed_bounty_count = sgqlc.types.Field(Int, graphql_name='claimedBountyCount')
    claimed_budget_cents = sgqlc.types.Field(Int, graphql_name='claimedBudgetCents')
    completed_bounty_count = sgqlc.types.Field(Int, graphql_name='completedBountyCount')
    expanded_bounty_count = sgqlc.types.Field(Int, graphql_name='expandedBountyCount')
    includes_all_broadcasters = sgqlc.types.Field(Boolean, graphql_name='includesAllBroadcasters')
    includes_all_countries = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='includesAllCountries')
    includes_all_games = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='includesAllGames')
    includes_variety_broadcasters = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='includesVarietyBroadcasters')
    performance_metrics = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BountyCampaignPerformanceMetric')), graphql_name='performanceMetrics')
    rejection_reason = sgqlc.types.Field(String, graphql_name='rejectionReason')
    spent_budget_cents = sgqlc.types.Field(Int, graphql_name='spentBudgetCents')
    status = sgqlc.types.Field(BountyCampaignStatus, graphql_name='status')
    targeted_countries = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='targetedCountries')
    targeted_games = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Game')), graphql_name='targetedGames')
    total_blocked_broadcasters = sgqlc.types.Field(Int, graphql_name='totalBlockedBroadcasters')
    total_budget_cents = sgqlc.types.Field(Int, graphql_name='totalBudgetCents')
    viewed_bounty_count = sgqlc.types.Field(Int, graphql_name='viewedBountyCount')


class BountyCampaignConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of('BountyCampaignEdge'), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class BountyCampaignEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(BountyCampaign, graphql_name='node')


class BountyCampaignKeyDescriptor(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('platform', 'region')
    platform = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='platform')
    region = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='region')


class BountyCampaignPerformanceMetric(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('chat_ctaclick_through_count', 'completed_bounty_count', 'end_time', 'minutes_watched', 'start_time', 'thirty_second_viewer_count', 'total_viewer_count', 'two_minute_viewer_count')
    chat_ctaclick_through_count = sgqlc.types.Field(Int, graphql_name='chatCTAClickThroughCount')
    completed_bounty_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='completedBountyCount')
    end_time = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endTime')
    minutes_watched = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='minutesWatched')
    start_time = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startTime')
    thirty_second_viewer_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='thirtySecondViewerCount')
    total_viewer_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalViewerCount')
    two_minute_viewer_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='twoMinuteViewerCount')


class BountyCampaignReporting(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('chat_ctas_clicks', 'chat_ctas_impressions', 'claimed_bounty_count', 'claimed_budget_cents', 'completed_bounty_count', 'expanded_bounty_count', 'performance_metrics', 'spent_budget_cents', 'viewed_bounty_count')
    chat_ctas_clicks = sgqlc.types.Field(Int, graphql_name='chatCTAsClicks')
    chat_ctas_impressions = sgqlc.types.Field(Int, graphql_name='chatCTAsImpressions')
    claimed_bounty_count = sgqlc.types.Field(Int, graphql_name='claimedBountyCount')
    claimed_budget_cents = sgqlc.types.Field(Int, graphql_name='claimedBudgetCents')
    completed_bounty_count = sgqlc.types.Field(Int, graphql_name='completedBountyCount')
    expanded_bounty_count = sgqlc.types.Field(Int, graphql_name='expandedBountyCount')
    performance_metrics = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BountyCampaignPerformanceMetric)), graphql_name='performanceMetrics')
    spent_budget_cents = sgqlc.types.Field(Int, graphql_name='spentBudgetCents')
    viewed_bounty_count = sgqlc.types.Field(Int, graphql_name='viewedBountyCount')


class BountyCampaignVideo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('country', 'title', 'url')
    country = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='country')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class BountyChatCTA(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('country_code', 'frequency_seconds', 'initial_delay_seconds', 'title', 'url')
    country_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='countryCode')
    frequency_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='frequencySeconds')
    initial_delay_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='initialDelaySeconds')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class BountyConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('BountyEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class BountyEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(Bounty, graphql_name='node')


class BountyModerationMetadata(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('reason', 'status', 'updated_at')
    reason = sgqlc.types.Field(BountyModerationFailReason, graphql_name='reason')
    status = sgqlc.types.Field(BountyModerationStatus, graphql_name='status')
    updated_at = sgqlc.types.Field(Time, graphql_name='updatedAt')


class BountyProductKey(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'platform', 'product_type', 'region')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')
    platform = sgqlc.types.Field(String, graphql_name='platform')
    product_type = sgqlc.types.Field(BountyKeyProductType, graphql_name='productType')
    region = sgqlc.types.Field(String, graphql_name='region')


class BountyRestriction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('days', 'end_time', 'start_time')
    days = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='days')
    end_time = sgqlc.types.Field(Int, graphql_name='endTime')
    start_time = sgqlc.types.Field(Int, graphql_name='startTime')


class BountyVideo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('title', 'url')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class BrandPortalSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_access_all_games', 'is_enabled')
    can_access_all_games = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canAccessAllGames')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class Broadcast(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('game', 'id', 'started_at', 'title')
    game = sgqlc.types.Field('Game', graphql_name='game')
    id = sgqlc.types.Field(ID, graphql_name='id')
    started_at = sgqlc.types.Field(Time, graphql_name='startedAt')
    title = sgqlc.types.Field(String, graphql_name='title')


class BroadcastSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('game', 'id', 'is_mature', 'language', 'live_up_notification', 'live_up_notification_info', 'title')
    game = sgqlc.types.Field('Game', graphql_name='game')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_mature = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isMature')
    language = sgqlc.types.Field(sgqlc.types.non_null(Language), graphql_name='language')
    live_up_notification = sgqlc.types.Field(String, graphql_name='liveUpNotification')
    live_up_notification_info = sgqlc.types.Field('LiveUpNotificationInfo', graphql_name='liveUpNotificationInfo')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class BroadcasterViewerReach(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcaster_pool', 'minutes_watched', 'viewer_pool')
    broadcaster_pool = sgqlc.types.Field(sgqlc.types.non_null('Range'), graphql_name='broadcasterPool')
    minutes_watched = sgqlc.types.Field(sgqlc.types.non_null('Range'), graphql_name='minutesWatched')
    viewer_pool = sgqlc.types.Field(sgqlc.types.non_null('Range'), graphql_name='viewerPool')


class BuildACommunity(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('badge_url', 'completed_at', 'followers', 'unique_chatters')
    badge_url = sgqlc.types.Field(String, graphql_name='badgeURL')
    completed_at = sgqlc.types.Field(Time, graphql_name='completedAt')
    followers = sgqlc.types.Field('QuestGoalInt', graphql_name='followers')
    unique_chatters = sgqlc.types.Field('QuestGoalInt', graphql_name='uniqueChatters')


class BulkApproveUnbanRequestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'unban_requests')
    error = sgqlc.types.Field('UnbanRequestError', graphql_name='error')
    unban_requests = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UnbanRequest')), graphql_name='unbanRequests')


class BulkDenyUnbanRequestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'unban_requests')
    error = sgqlc.types.Field('UnbanRequestError', graphql_name='error')
    unban_requests = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UnbanRequest')), graphql_name='unbanRequests')


class Campaign(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('domain', 'end_date', 'id', 'objectives', 'start_date')
    domain = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='domain')
    end_date = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endDate')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    objectives = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CampaignObjective'))), graphql_name='objectives')
    start_date = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startDate')


class CampaignCheergroup(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cheer_codes', 'division', 'image_url', 'name')
    cheer_codes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='cheerCodes')
    division = sgqlc.types.Field(String, graphql_name='division')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageUrl')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class CampaignObjective(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cheergroup', 'description', 'id', 'is_active', 'milestones', 'participation', 'progress', 'tag', 'title')
    cheergroup = sgqlc.types.Field(CampaignCheergroup, graphql_name='cheergroup')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    milestones = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Milestone')), graphql_name='milestones')
    participation = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='participation')
    progress = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='progress')
    tag = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='tag')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CampaignProperties(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('active_campaigns', 'domains', 'has_pass', 'objectives', 'triggers')
    active_campaigns = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='activeCampaigns')
    domains = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='domains')
    has_pass = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasPass')
    objectives = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CampaignObjective)), graphql_name='objectives')
    triggers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CampaignTrigger')), graphql_name='triggers')


class CampaignRewardMetadata(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_pending', 'sub_type')
    is_pending = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPending')
    sub_type = sgqlc.types.Field(String, graphql_name='subType')


class CampaignTrigger(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('description', 'id', 'is_active', 'rewards', 'title', 'trigger_amount_max', 'trigger_amount_min', 'trigger_type')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    rewards = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TournamentReward')), graphql_name='rewards')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    trigger_amount_max = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='triggerAmountMax')
    trigger_amount_min = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='triggerAmountMin')
    trigger_type = sgqlc.types.Field(sgqlc.types.non_null(TriggerType), graphql_name='triggerType')


class CancelActiveBoostOrdersError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CancelActiveBoostOrdersErrorCode), graphql_name='code')


class CancelActiveBoostOrdersPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(CancelActiveBoostOrdersError, graphql_name='error')


class CancelBountyError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CancelBountyErrorCode), graphql_name='code')


class CancelBountyPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bounty', 'error', 'user')
    bounty = sgqlc.types.Field(Bounty, graphql_name='bounty')
    error = sgqlc.types.Field(CancelBountyError, graphql_name='error')
    user = sgqlc.types.Field('User', graphql_name='user')


class CancelFriendRequestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class CancelPayoutOnboardingWorkflowPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('workflow',)
    workflow = sgqlc.types.Field('PayoutOnboardingWorkflow', graphql_name='workflow')


class CancelPredictionEventError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CancelPredictionEventErrorCode), graphql_name='code')


class CancelPredictionEventPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'prediction_event')
    error = sgqlc.types.Field(CancelPredictionEventError, graphql_name='error')
    prediction_event = sgqlc.types.Field('PredictionEvent', graphql_name='predictionEvent')


class CancelRaidError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CancelRaidErrorCode), graphql_name='code')


class CancelRaidPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'raid')
    error = sgqlc.types.Field(CancelRaidError, graphql_name='error')
    raid = sgqlc.types.Field('Raid', graphql_name='raid')


class CancelSubscriptionGiftPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('gift',)
    gift = sgqlc.types.Field('SubscriptionGift', graphql_name='gift')


class CancelUnbanRequestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'unban_request')
    error = sgqlc.types.Field('UnbanRequestError', graphql_name='error')
    unban_request = sgqlc.types.Field('UnbanRequest', graphql_name='unbanRequest')


class Celebration(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('area', 'duration_milliseconds', 'effect', 'event_threshold', 'event_type', 'id', 'intensity', 'is_enabled')
    area = sgqlc.types.Field(sgqlc.types.non_null(CelebrationArea), graphql_name='area')
    duration_milliseconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationMilliseconds')
    effect = sgqlc.types.Field(sgqlc.types.non_null(CelebrationEffect), graphql_name='effect')
    event_threshold = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='eventThreshold')
    event_type = sgqlc.types.Field(sgqlc.types.non_null(CelebrationEventType), graphql_name='eventType')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    intensity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='intensity')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class CelebrationConfig(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('celebrations', 'id', 'is_enabled')
    celebrations = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Celebration))), graphql_name='celebrations')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class CelebrationError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CelebrationErrorCode), graphql_name='code')


class CelebrationUserSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_opted_out',)
    is_opted_out = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isOptedOut')


class ChallengeCondition(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('created_at', 'effect_settings', 'id', 'name', 'owner', 'participant_summary', 'state', 'supported_effects', 'timeout_at', 'updated_at', 'will_disable_when_satisfied')
    created_at = sgqlc.types.Field(Time, graphql_name='createdAt')
    effect_settings = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChallengeEffectSettings')), graphql_name='effectSettings')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner = sgqlc.types.Field('User', graphql_name='owner')
    participant_summary = sgqlc.types.Field('ChallengeConditionParticipantSummaryByState', graphql_name='participantSummary')
    state = sgqlc.types.Field(sgqlc.types.non_null(ChallengeConditionState), graphql_name='state')
    supported_effects = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ChallengeEffectType))), graphql_name='supportedEffects')
    timeout_at = sgqlc.types.Field(Time, graphql_name='timeoutAt')
    updated_at = sgqlc.types.Field(Time, graphql_name='updatedAt')
    will_disable_when_satisfied = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='willDisableWhenSatisfied')


class ChallengeConditionParticipant(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('condition', 'effect', 'end_state', 'id', 'owner', 'processing_state')
    condition = sgqlc.types.Field(ChallengeCondition, graphql_name='condition')
    effect = sgqlc.types.Field(sgqlc.types.non_null('ChallengeEffect'), graphql_name='effect')
    end_state = sgqlc.types.Field(sgqlc.types.non_null(ChallengeConditionParticipantEndState), graphql_name='endState')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    owner = sgqlc.types.Field('User', graphql_name='owner')
    processing_state = sgqlc.types.Field(sgqlc.types.non_null(ChallengeConditionParticipantProcessingState), graphql_name='processingState')


class ChallengeConditionParticipantSummary(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('effects', 'total')
    effects = sgqlc.types.Field('ChallengeEffectSummary', graphql_name='effects')
    total = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='total')


class ChallengeConditionParticipantSummaryByState(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('canceled', 'condition_canceled', 'condition_timeout', 'failed_validation', 'pending', 'satisfied', 'timeout', 'total')
    canceled = sgqlc.types.Field(ChallengeConditionParticipantSummary, graphql_name='canceled')
    condition_canceled = sgqlc.types.Field(ChallengeConditionParticipantSummary, graphql_name='conditionCanceled')
    condition_timeout = sgqlc.types.Field(ChallengeConditionParticipantSummary, graphql_name='conditionTimeout')
    failed_validation = sgqlc.types.Field(ChallengeConditionParticipantSummary, graphql_name='failedValidation')
    pending = sgqlc.types.Field(ChallengeConditionParticipantSummary, graphql_name='pending')
    satisfied = sgqlc.types.Field(ChallengeConditionParticipantSummary, graphql_name='satisfied')
    timeout = sgqlc.types.Field(ChallengeConditionParticipantSummary, graphql_name='timeout')
    total = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='total')


class ChallengeEffect(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('details', 'type')
    details = sgqlc.types.Field(sgqlc.types.non_null('ChallengeEffectDetails'), graphql_name='details')
    type = sgqlc.types.Field(sgqlc.types.non_null(ChallengeEffectType), graphql_name='type')


class ChallengeEffectSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('details', 'type')
    details = sgqlc.types.Field(sgqlc.types.non_null('ChallengeEffectSettingsDetails'), graphql_name='details')
    type = sgqlc.types.Field(sgqlc.types.non_null(ChallengeEffectType), graphql_name='type')


class ChallengeEffectSummary(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('use_bits',)
    use_bits = sgqlc.types.Field('ChallengeUseBitsEffectSummary', graphql_name='useBits')


class ChallengeUseBitsEffectDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('benefactor', 'bits_amount')
    benefactor = sgqlc.types.Field('User', graphql_name='benefactor')
    bits_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bitsAmount')


class ChallengeUseBitsEffectSettingsDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bits_recipient_weighted_shares',)
    bits_recipient_weighted_shares = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ChallengeUseBitsPoolRecipientWeightedShare'))), graphql_name='bitsRecipientWeightedShares')


class ChallengeUseBitsEffectSummary(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('total_bits_amount', 'total_effects')
    total_bits_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalBitsAmount')
    total_effects = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalEffects')


class ChallengeUseBitsPoolRecipientWeightedShare(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('recipient', 'weight')
    recipient = sgqlc.types.Field('User', graphql_name='recipient')
    weight = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='weight')


class ChangeUsernameCodeError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(ChangeUsernameErrorCode), graphql_name='code')


class ChangeUsernamePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'user')
    error = sgqlc.types.Field(ChangeUsernameCodeError, graphql_name='error')
    user = sgqlc.types.Field('User', graphql_name='user')


class ChangelogEntry(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'icon_url', 'id', 'link_text', 'link_url', 'position', 'published_at', 'title')
    content = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='content')
    icon_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='iconURL')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    link_text = sgqlc.types.Field(String, graphql_name='linkText')
    link_url = sgqlc.types.Field(String, graphql_name='linkURL')
    position = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='position')
    published_at = sgqlc.types.Field(Time, graphql_name='publishedAt')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class Channel(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('active_prediction_events', 'auto_mod_levels', 'available_content_attributes', 'available_drops', 'banned_users', 'boost_settings', 'broadcaster_language', 'celebrations', 'chanlet_stream_key', 'chanlets', 'chatters', 'clips_settings', 'community_points_custom_reward_redemption', 'community_points_redemption_queue', 'community_points_settings', 'content_attributes', 'creator_badge_flair', 'current_radio_track', 'display_name', 'drop_campaign', 'drop_campaigns', 'founder_badge_availability', 'game', 'home', 'hype_train', 'id', 'is_clips_enabled', 'is_hidden_chanlet', 'is_mature', 'is_opted_out_of_drops', 'leaderboard_set', 'leaderboard_time_period', 'locked_prediction_events', 'managed_videos', 'moderation_logs', 'name', 'owner', 'owner_chanlet_attributes', 'prediction_settings', 'recent_chat_messages', 'resolved_prediction_events', 'restriction', 'schedule', 'self', 'self_installed_extensions', 'social_medias', 'status', 'stream', 'streams', 'trailer', 'unban_requests', 'unban_requests_settings', 'url', 'video_stream_settings', 'viewer_drop_campaigns')
    active_prediction_events = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PredictionEvent')), graphql_name='activePredictionEvents')
    auto_mod_levels = sgqlc.types.Field(AutoModLevels, graphql_name='autoModLevels')
    available_content_attributes = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('MultiviewContentAttribute')), graphql_name='availableContentAttributes')
    available_drops = sgqlc.types.Field(sgqlc.types.list_of('DropObject'), graphql_name='availableDrops')
    banned_users = sgqlc.types.Field('ChannelBannedUserConnection', graphql_name='bannedUsers', args=sgqlc.types.ArgDict((
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=25)),
))
    )
    boost_settings = sgqlc.types.Field(BoostSettings, graphql_name='boostSettings')
    broadcaster_language = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='broadcasterLanguage')
    celebrations = sgqlc.types.Field(CelebrationConfig, graphql_name='celebrations')
    chanlet_stream_key = sgqlc.types.Field(String, graphql_name='chanletStreamKey')
    chanlets = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Channel')), graphql_name='chanlets', args=sgqlc.types.ArgDict((
        ('sort', sgqlc.types.Arg(ChanletSort, graphql_name='sort', default='NONE')),
        ('bypass_disable_flag', sgqlc.types.Arg(Boolean, graphql_name='bypassDisableFlag', default=False)),
))
    )
    chatters = sgqlc.types.Field('ChattersInfo', graphql_name='chatters')
    clips_settings = sgqlc.types.Field('ChannelClipsSettings', graphql_name='clipsSettings')
    community_points_custom_reward_redemption = sgqlc.types.Field('CommunityPointsCustomRewardRedemption', graphql_name='communityPointsCustomRewardRedemption', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    community_points_redemption_queue = sgqlc.types.Field('CommunityPointsCustomRewardRedemptionConnection', graphql_name='communityPointsRedemptionQueue', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('options', sgqlc.types.Arg(CommunityPointsRedemptionQueueOptions, graphql_name='options', default=None)),
))
    )
    community_points_settings = sgqlc.types.Field('CommunityPointsChannelSettings', graphql_name='communityPointsSettings')
    content_attributes = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('MultiviewContentAttribute')), graphql_name='contentAttributes')
    creator_badge_flair = sgqlc.types.Field('CreatorBadgeFlair', graphql_name='creatorBadgeFlair')
    current_radio_track = sgqlc.types.Field('RadioCurrentlyPlaying', graphql_name='currentRadioTrack')
    display_name = sgqlc.types.Field(String, graphql_name='displayName')
    drop_campaign = sgqlc.types.Field('DropCampaign', graphql_name='dropCampaign', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    drop_campaigns = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DropCampaign')), graphql_name='dropCampaigns')
    founder_badge_availability = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='founderBadgeAvailability')
    game = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='game')
    home = sgqlc.types.Field('ChannelHome', graphql_name='home')
    hype_train = sgqlc.types.Field(sgqlc.types.non_null('HypeTrain'), graphql_name='hypeTrain')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_clips_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isClipsEnabled')
    is_hidden_chanlet = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isHiddenChanlet')
    is_mature = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isMature')
    is_opted_out_of_drops = sgqlc.types.Field(Boolean, graphql_name='isOptedOutOfDrops')
    leaderboard_set = sgqlc.types.Field('LeaderboardSet', graphql_name='leaderboardSet', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
))
    )
    leaderboard_time_period = sgqlc.types.Field(LeaderboardTimePeriodType, graphql_name='leaderboardTimePeriod')
    locked_prediction_events = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PredictionEvent')), graphql_name='lockedPredictionEvents')
    managed_videos = sgqlc.types.Field('VideoConnection', graphql_name='managedVideos', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('statuses', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(VideoStatus)), graphql_name='statuses', default=None)),
        ('types', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BroadcastType)), graphql_name='types', default=None)),
        ('sort', sgqlc.types.Arg(VideoSort, graphql_name='sort', default='TIME')),
))
    )
    moderation_logs = sgqlc.types.Field('ModerationLogs', graphql_name='moderationLogs')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner = sgqlc.types.Field('User', graphql_name='owner')
    owner_chanlet_attributes = sgqlc.types.Field('OwnerChanletAttributes', graphql_name='ownerChanletAttributes')
    prediction_settings = sgqlc.types.Field('ChannelPredictionSettings', graphql_name='predictionSettings')
    recent_chat_messages = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('Message'))), graphql_name='recentChatMessages')
    resolved_prediction_events = sgqlc.types.Field('PredictionEventConnection', graphql_name='resolvedPredictionEvents', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    restriction = sgqlc.types.Field('ResourceRestriction', graphql_name='restriction')
    schedule = sgqlc.types.Field('Schedule', graphql_name='schedule')
    self = sgqlc.types.Field('ChannelSelfEdge', graphql_name='self')
    self_installed_extensions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExtensionInstallationSelfEdge')), graphql_name='selfInstalledExtensions', args=sgqlc.types.ArgDict((
        ('is_mobile', sgqlc.types.Arg(Boolean, graphql_name='isMobile', default=False)),
))
    )
    social_medias = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SocialMedia')), graphql_name='socialMedias')
    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='status')
    stream = sgqlc.types.Field('Stream', graphql_name='stream')
    streams = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Stream')), graphql_name='streams')
    trailer = sgqlc.types.Field('Trailer', graphql_name='trailer')
    unban_requests = sgqlc.types.Field('UnbanRequestConnection', graphql_name='unbanRequests', args=sgqlc.types.ArgDict((
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=25)),
        ('options', sgqlc.types.Arg(UnbanRequestsOptions, graphql_name='options', default=None)),
))
    )
    unban_requests_settings = sgqlc.types.Field('UnbanRequestsSettings', graphql_name='unbanRequestsSettings')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    video_stream_settings = sgqlc.types.Field('VideoStreamSettings', graphql_name='videoStreamSettings')
    viewer_drop_campaigns = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DropCampaign')), graphql_name='viewerDropCampaigns')


class ChannelAnalytics(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('sub_count_series',)
    sub_count_series = sgqlc.types.Field('SubCountSeries', graphql_name='subCountSeries')


class ChannelAnalyticsContentOverlap(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channels', 'games')
    channels = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChannelOverlap')), graphql_name='channels')
    games = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('GameOverlap')), graphql_name='games')


class ChannelBannedUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('banned_at', 'banned_user', 'mod_user')
    banned_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='bannedAt')
    banned_user = sgqlc.types.Field('User', graphql_name='bannedUser')
    mod_user = sgqlc.types.Field('User', graphql_name='modUser')


class ChannelBannedUserConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChannelBannedUserEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ChannelBannedUserEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(ChannelBannedUser, graphql_name='node')


class ChannelBlockedTerm(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('category', 'created_at', 'expires_at', 'is_mod_editable', 'phrases', 'source', 'updated_at')
    category = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='category')
    created_at = sgqlc.types.Field(Time, graphql_name='createdAt')
    expires_at = sgqlc.types.Field(Time, graphql_name='expiresAt')
    is_mod_editable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isModEditable')
    phrases = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='phrases')
    source = sgqlc.types.Field(String, graphql_name='source')
    updated_at = sgqlc.types.Field(Time, graphql_name='updatedAt')


class ChannelChallenge(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('bits_amount', 'created_at', 'created_by', 'duration_seconds', 'id', 'owned_by', 'remaining_duration_milliseconds', 'self', 'status', 'updated_at')
    bits_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bitsAmount')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    created_by = sgqlc.types.Field('User', graphql_name='createdBy')
    duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationSeconds')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    owned_by = sgqlc.types.Field('User', graphql_name='ownedBy')
    remaining_duration_milliseconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='remainingDurationMilliseconds')
    self = sgqlc.types.Field('ChannelChallengeSelfEdge', graphql_name='self')
    status = sgqlc.types.Field(sgqlc.types.non_null(ChannelChallengeStatus), graphql_name='status')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='updatedAt')


class ChannelChallengeConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChannelChallengeEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ChannelChallengeEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(ChannelChallenge), graphql_name='node')


class ChannelChallengeParticipant(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bits', 'challenge', 'first_contributed_at', 'id', 'last_contributed_at')
    bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bits')
    challenge = sgqlc.types.Field(ChannelChallenge, graphql_name='challenge')
    first_contributed_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='firstContributedAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    last_contributed_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='lastContributedAt')


class ChannelChallengeSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('participant',)
    participant = sgqlc.types.Field(ChannelChallengeParticipant, graphql_name='participant')


class ChannelClipsCreationRestrictedTo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_follower', 'is_subscriber')
    is_follower = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isFollower')
    is_subscriber = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSubscriber')


class ChannelClipsCreationRestrictionOptions(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('following_length_minutes',)
    following_length_minutes = sgqlc.types.Field(Int, graphql_name='followingLengthMinutes')


class ChannelClipsSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('creation_restricted_to', 'creation_restriction_options', 'is_clips_creation_enabled')
    creation_restricted_to = sgqlc.types.Field(ChannelClipsCreationRestrictedTo, graphql_name='creationRestrictedTo')
    creation_restriction_options = sgqlc.types.Field(ChannelClipsCreationRestrictionOptions, graphql_name='creationRestrictionOptions')
    is_clips_creation_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isClipsCreationEnabled')


class ChannelHome(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('preferences', 'shelves')
    preferences = sgqlc.types.Field('ChannelHomePreferences', graphql_name='preferences')
    shelves = sgqlc.types.Field('ChannelHomeShelves', graphql_name='shelves')


class ChannelHomeCategoryShelf(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('edges',)
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ChannelHomeCategoryShelfEdge'))), graphql_name='edges')


class ChannelHomeCategoryShelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node',)
    node = sgqlc.types.Field('Game', graphql_name='node')


class ChannelHomeCategorySuggestionsShelf(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('edges',)
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ChannelHomeCategorySuggestionsShelfEdge'))), graphql_name='edges')


class ChannelHomeCategorySuggestionsShelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_hidden', 'node')
    is_hidden = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isHidden')
    node = sgqlc.types.Field('Game', graphql_name='node')


class ChannelHomePreferences(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('hero_preset', 'streamer_shelf_type')
    hero_preset = sgqlc.types.Field(sgqlc.types.non_null(HeroPreset), graphql_name='heroPreset')
    streamer_shelf_type = sgqlc.types.Field(sgqlc.types.non_null(StreamerShelfType), graphql_name='streamerShelfType')


class ChannelHomeShelves(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('category_shelf', 'category_shelf_suggestions', 'streamer_shelf')
    category_shelf = sgqlc.types.Field(ChannelHomeCategoryShelf, graphql_name='categoryShelf', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=20)),
))
    )
    category_shelf_suggestions = sgqlc.types.Field(ChannelHomeCategorySuggestionsShelf, graphql_name='categoryShelfSuggestions', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=20)),
))
    )
    streamer_shelf = sgqlc.types.Field('ChannelHomeStreamerShelf', graphql_name='streamerShelf', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=20)),
))
    )


class ChannelHomeStreamerShelf(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('edges', 'type')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ChannelHomeStreamerShelfEdge'))), graphql_name='edges')
    type = sgqlc.types.Field(sgqlc.types.non_null(StreamerShelfType), graphql_name='type')


class ChannelHomeStreamerShelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node',)
    node = sgqlc.types.Field('User', graphql_name='node')


class ChannelModerationActionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ChannelModerationActionEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ChannelModerationActionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('ChannelModerationActionEntry', graphql_name='node')


class ChannelModerationActionEntry(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('action', 'created_at', 'id', 'moderator')
    action = sgqlc.types.Field(sgqlc.types.non_null(ModerationAction), graphql_name='action')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    moderator = sgqlc.types.Field('User', graphql_name='moderator')


class ChannelNotificationSetting(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('category', 'is_enabled', 'setting_state')
    category = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='category')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    setting_state = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='settingState')


class ChannelNotificationSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'nodes')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ChannelNotificationSetting))), graphql_name='nodes')


class ChannelOverlap(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('score', 'viewers_also_watch')
    score = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='score')
    viewers_also_watch = sgqlc.types.Field('User', graphql_name='viewersAlsoWatch')


class ChannelPermittedTerm(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('category', 'created_at', 'expires_at', 'is_mod_editable', 'phrases', 'source', 'updated_at')
    category = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='category')
    created_at = sgqlc.types.Field(Time, graphql_name='createdAt')
    expires_at = sgqlc.types.Field(Time, graphql_name='expiresAt')
    is_mod_editable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isModEditable')
    phrases = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='phrases')
    source = sgqlc.types.Field(String, graphql_name='source')
    updated_at = sgqlc.types.Field(Time, graphql_name='updatedAt')


class ChannelPredictionSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_moderators_manage_predictions', 'is_eligible_for_predictions')
    can_moderators_manage_predictions = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canModeratorsManagePredictions')
    is_eligible_for_predictions = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEligibleForPredictions')


class ChannelRestriction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('ends_at', 'exemption_info', 'id', 'starts_at', 'type')
    ends_at = sgqlc.types.Field(Time, graphql_name='endsAt')
    exemption_info = sgqlc.types.Field(sgqlc.types.non_null('ChannelRestrictionExemptionInfo'), graphql_name='exemptionInfo')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    starts_at = sgqlc.types.Field(Time, graphql_name='startsAt')
    type = sgqlc.types.Field(sgqlc.types.non_null(ChannelRestrictionType), graphql_name='type')


class ChannelRestrictionExemptionInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('exemption_type',)
    exemption_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='exemptionType')


class ChannelSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_request_unban', 'community_points', 'is_authorized', 'is_resource_restricted', 'last_unban_request', 'mod_chat_logs', 'permissions', 'quick_action_layout', 'quick_action_store', 'recent_predictions', 'restriction_type', 'unban_request_restriction')
    can_request_unban = sgqlc.types.Field(Boolean, graphql_name='canRequestUnban')
    community_points = sgqlc.types.Field('CommunityPointsProperties', graphql_name='communityPoints')
    is_authorized = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAuthorized')
    is_resource_restricted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isResourceRestricted')
    last_unban_request = sgqlc.types.Field('UnbanRequest', graphql_name='lastUnbanRequest')
    mod_chat_logs = sgqlc.types.Field('ModLogsMessageConnection', graphql_name='modChatLogs', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=100)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order', sgqlc.types.Arg(SortOrder, graphql_name='order', default='DESC')),
        ('include_message_count', sgqlc.types.Arg(Boolean, graphql_name='includeMessageCount', default=False)),
        ('include_targeted_actions', sgqlc.types.Arg(Boolean, graphql_name='includeTargetedActions', default=False)),
        ('include_auto_mod_caught_messages', sgqlc.types.Arg(Boolean, graphql_name='includeAutoModCaughtMessages', default=True)),
))
    )
    permissions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ChannelPermission))), graphql_name='permissions')
    quick_action_layout = sgqlc.types.Field('QuickActionLayout', graphql_name='quickActionLayout')
    quick_action_store = sgqlc.types.Field('QuickActionStore', graphql_name='quickActionStore')
    recent_predictions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Prediction')), graphql_name='recentPredictions')
    restriction_type = sgqlc.types.Field(ResourceRestrictionType, graphql_name='restrictionType')
    unban_request_restriction = sgqlc.types.Field(UnbanRequestRestrictionReason, graphql_name='unbanRequestRestriction')


class ChargeInstrument(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class ChargeModel(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('credit', 'external', 'internal')
    credit = sgqlc.types.Field('CreditChargeModel', graphql_name='credit')
    external = sgqlc.types.Field('ExternalChargeModel', graphql_name='external')
    internal = sgqlc.types.Field('InternalChargeModel', graphql_name='internal')


class ChargeModelPlan(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('interval', 'renewal_policy')
    interval = sgqlc.types.Field(sgqlc.types.non_null('ChargeModelPlanInterval'), graphql_name='interval')
    renewal_policy = sgqlc.types.Field(sgqlc.types.non_null(RenewalPolicy), graphql_name='renewalPolicy')


class ChargeModelPlanInterval(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('duration', 'unit')
    duration = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='duration')
    unit = sgqlc.types.Field(sgqlc.types.non_null(ChargeModelPlanIntervalUnit), graphql_name='unit')


class ChatRoomBanStatus(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('banned_user', 'created_at', 'expires_at', 'expires_in_ms', 'is_permanent', 'moderator', 'reason', 'room_owner')
    banned_user = sgqlc.types.Field('User', graphql_name='bannedUser')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    expires_at = sgqlc.types.Field(Time, graphql_name='expiresAt')
    expires_in_ms = sgqlc.types.Field(Int, graphql_name='expiresInMs')
    is_permanent = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPermanent')
    moderator = sgqlc.types.Field('User', graphql_name='moderator')
    reason = sgqlc.types.Field(String, graphql_name='reason')
    room_owner = sgqlc.types.Field('User', graphql_name='roomOwner')


class ChatSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('auto_mod_level', 'block_links', 'chat_delay_ms', 'followers_only_duration_minutes', 'is_broadcaster_language_mode_enabled', 'is_emote_only_mode_enabled', 'is_fast_subs_mode_enabled', 'is_opted_out_of_global_banned_words_list', 'is_subscribers_only_mode_enabled', 'is_unique_chat_mode_enabled', 'require_verified_account', 'rules', 'slow_mode_duration_seconds')
    auto_mod_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='autoModLevel')
    block_links = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='blockLinks')
    chat_delay_ms = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='chatDelayMs')
    followers_only_duration_minutes = sgqlc.types.Field(Int, graphql_name='followersOnlyDurationMinutes')
    is_broadcaster_language_mode_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isBroadcasterLanguageModeEnabled')
    is_emote_only_mode_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEmoteOnlyModeEnabled')
    is_fast_subs_mode_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isFastSubsModeEnabled')
    is_opted_out_of_global_banned_words_list = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isOptedOutOfGlobalBannedWordsList')
    is_subscribers_only_mode_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSubscribersOnlyModeEnabled')
    is_unique_chat_mode_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isUniqueChatModeEnabled')
    require_verified_account = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='requireVerifiedAccount')
    rules = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='rules')
    slow_mode_duration_seconds = sgqlc.types.Field(Int, graphql_name='slowModeDurationSeconds')


class ChatUISettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('chat_pause_setting', 'deleted_message_display_setting', 'is_emote_animations_enabled', 'is_readable_chat_colors_enabled')
    chat_pause_setting = sgqlc.types.Field(ChatPauseSetting, graphql_name='chatPauseSetting')
    deleted_message_display_setting = sgqlc.types.Field(DeletedMessageDisplaySetting, graphql_name='deletedMessageDisplaySetting')
    is_emote_animations_enabled = sgqlc.types.Field(Boolean, graphql_name='isEmoteAnimationsEnabled')
    is_readable_chat_colors_enabled = sgqlc.types.Field(Boolean, graphql_name='isReadableChatColorsEnabled')


class Chatter(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('login',)
    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='login')


class ChattersInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcasters', 'count', 'moderators', 'staff', 'viewers', 'vips')
    broadcasters = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Chatter))), graphql_name='broadcasters')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')
    moderators = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Chatter))), graphql_name='moderators')
    staff = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Chatter))), graphql_name='staff')
    viewers = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Chatter))), graphql_name='viewers')
    vips = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Chatter))), graphql_name='vips')


class CheckoutConfiguration(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('xsolla',)
    xsolla = sgqlc.types.Field('Xsolla', graphql_name='xsolla', args=sgqlc.types.ArgDict((
        ('product_type', sgqlc.types.Arg(PurchaseableProductType, graphql_name='productType', default=None)),
        ('product_id', sgqlc.types.Arg(ID, graphql_name='productID', default=None)),
        ('offer_tag_bindings', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OfferTagBindingInput)), graphql_name='offerTagBindings', default=None)),
        ('quantity', sgqlc.types.Arg(Int, graphql_name='quantity', default=None)),
        ('gift_recipient_ids', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='giftRecipientIDs', default=None)),
        ('tenant_tracking', sgqlc.types.Arg(String, graphql_name='tenantTracking', default=None)),
        ('payment_session', sgqlc.types.Arg(PaymentSession, graphql_name='paymentSession', default=None)),
        ('is_dark_mode', sgqlc.types.Arg(Boolean, graphql_name='isDarkMode', default=None)),
))
    )


class CheckoutPriceSummary(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('currency', 'description', 'discount', 'exponent', 'id', 'is_tax_inclusive', 'price', 'pricing_identifier', 'tax', 'total')
    currency = sgqlc.types.Field(sgqlc.types.non_null(Currency), graphql_name='currency')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    discount = sgqlc.types.Field('DiscountBreakdown', graphql_name='discount')
    exponent = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='exponent')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_tax_inclusive = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isTaxInclusive')
    price = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='price')
    pricing_identifier = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='pricingIdentifier')
    tax = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='tax')
    total = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='total')


class CheerInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('available_badges', 'badge_tier_emotes', 'cheer_groups', 'emotes', 'hashtags', 'id', 'leaderboard', 'recent_timeout_ms', 'settings')
    available_badges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Badge)), graphql_name='availableBadges')
    badge_tier_emotes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('Emote')), graphql_name='badgeTierEmotes', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(sgqlc.types.non_null(BadgeTierEmotesFilter), graphql_name='filter', default=None)),
))
    )
    cheer_groups = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CheermoteGroup'))), graphql_name='cheerGroups')
    emotes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('Cheermote')), graphql_name='emotes', args=sgqlc.types.ArgDict((
        ('prefixes', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='prefixes', default=None)),
        ('type', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CheermoteType)), graphql_name='type', default=None)),
        ('include_upper_tiers', sgqlc.types.Arg(Boolean, graphql_name='includeUpperTiers', default=None)),
        ('include_sponsored', sgqlc.types.Arg(Boolean, graphql_name='includeSponsored', default=None)),
))
    )
    hashtags = sgqlc.types.Field(BitsHashtagConnection, graphql_name='hashtags', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
))
    )
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    leaderboard = sgqlc.types.Field(BitsLeaderboard, graphql_name='leaderboard', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='first', default=None)),
))
    )
    recent_timeout_ms = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='recentTimeoutMs')
    settings = sgqlc.types.Field(sgqlc.types.non_null('CheerSettings'), graphql_name='settings')


class CheerPartnerBadgeSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_upload_badge_tier_emoticons', 'tiers')
    can_upload_badge_tier_emoticons = sgqlc.types.Field(Boolean, graphql_name='canUploadBadgeTierEmoticons')
    tiers = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(BitsBadgeTier))), graphql_name='tiers')


class CheerPartnerChatMessageSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_opted_out_of_project_v', 'min_bits_per_emote', 'min_bits_to_cheer')
    is_opted_out_of_project_v = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isOptedOutOfProjectV')
    min_bits_per_emote = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='minBitsPerEmote')
    min_bits_to_cheer = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='minBitsToCheer')


class CheerPartnerCheerBombSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_opted_out',)
    is_opted_out = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isOptedOut')


class CheerPartnerCustomPrefixSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'prefix', 'tiers')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    prefix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='prefix')
    tiers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CheermoteTier')), graphql_name='tiers')


class CheerPartnerLeaderboardSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'time_period')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    time_period = sgqlc.types.Field(sgqlc.types.non_null(LeaderboardTimePeriodType), graphql_name='timePeriod')


class CheerPartnerRecentCheerSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_pin', 'minimum_bits', 'timeout_milliseconds')
    can_pin = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canPin')
    minimum_bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='minimumBits')
    timeout_milliseconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='timeoutMilliseconds')


class CheerPartnerSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('badges', 'chat_message', 'cheer_bomb', 'custom_prefix', 'has_signed_bits_amendment', 'id', 'is_onboarded', 'leaderboard', 'recent_cheer', 'sponsored_cheermotes')
    badges = sgqlc.types.Field(CheerPartnerBadgeSettings, graphql_name='badges')
    chat_message = sgqlc.types.Field(sgqlc.types.non_null(CheerPartnerChatMessageSettings), graphql_name='chatMessage')
    cheer_bomb = sgqlc.types.Field(sgqlc.types.non_null(CheerPartnerCheerBombSettings), graphql_name='cheerBomb')
    custom_prefix = sgqlc.types.Field(sgqlc.types.non_null(CheerPartnerCustomPrefixSettings), graphql_name='customPrefix')
    has_signed_bits_amendment = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasSignedBitsAmendment')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_onboarded = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isOnboarded')
    leaderboard = sgqlc.types.Field(sgqlc.types.non_null(CheerPartnerLeaderboardSettings), graphql_name='leaderboard')
    recent_cheer = sgqlc.types.Field(sgqlc.types.non_null(CheerPartnerRecentCheerSettings), graphql_name='recentCheer')
    sponsored_cheermotes = sgqlc.types.Field(sgqlc.types.non_null('CheerPartnerSponsoredCheermoteSettings'), graphql_name='sponsoredCheermotes')


class CheerPartnerSponsoredCheermoteSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('campaigns',)
    campaigns = sgqlc.types.Field('SponsoredCheermoteChannelSettingsConnection', graphql_name='campaigns')


class CheerSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cheer_minimum_bits', 'emote_minimum_bits', 'event', 'id', 'is_cheer_bomb_event_enabled', 'is_polls_enabled', 'is_recent_enabled', 'is_top_enabled', 'leaderboard', 'recent_minimum_bits', 'recent_timeout_ms')
    cheer_minimum_bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cheerMinimumBits')
    emote_minimum_bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='emoteMinimumBits')
    event = sgqlc.types.Field(String, graphql_name='event')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_cheer_bomb_event_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCheerBombEventEnabled')
    is_polls_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPollsEnabled')
    is_recent_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRecentEnabled')
    is_top_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isTopEnabled')
    leaderboard = sgqlc.types.Field(BitsLeaderboardSettings, graphql_name='leaderboard')
    recent_minimum_bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='recentMinimumBits')
    recent_timeout_ms = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='recentTimeoutMs')


class Cheermote(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('campaign', 'id', 'prefix', 'tiers', 'type')
    campaign = sgqlc.types.Field('CheermoteCampaign', graphql_name='campaign')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    prefix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='prefix')
    tiers = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CheermoteTier'))), graphql_name='tiers')
    type = sgqlc.types.Field(sgqlc.types.non_null(CheermoteType), graphql_name='type')


class CheermoteCampaign(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bits_percentage_remaining', 'bits_total', 'bits_used', 'brand_image_url', 'brand_name', 'id', 'minimum_bits_amount', 'self', 'thresholds', 'user_limit')
    bits_percentage_remaining = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='bitsPercentageRemaining')
    bits_total = sgqlc.types.Field(Int, graphql_name='bitsTotal')
    bits_used = sgqlc.types.Field(Int, graphql_name='bitsUsed')
    brand_image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='brandImageURL')
    brand_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='brandName')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    minimum_bits_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='minimumBitsAmount')
    self = sgqlc.types.Field('CheermoteCampaignSelfEdge', graphql_name='self')
    thresholds = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CheermoteCampaignThreshold'))), graphql_name='thresholds')
    user_limit = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='userLimit')


class CheermoteCampaignSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bits_used', 'can_be_sponsored', 'id')
    bits_used = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bitsUsed')
    can_be_sponsored = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canBeSponsored')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class CheermoteCampaignThreshold(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'matched_percent', 'minimum_bits')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    matched_percent = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='matchedPercent')
    minimum_bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='minimumBits')


class CheermoteColorConfig(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bits', 'color')
    bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bits')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')


class CheermoteDisplayConfig(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('backgrounds', 'colors', 'order', 'scales', 'types')
    backgrounds = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='backgrounds')
    colors = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CheermoteColorConfig))), graphql_name='colors')
    order = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CheermoteType))), graphql_name='order')
    scales = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='scales')
    types = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CheermoteDisplayType'))), graphql_name='types')


class CheermoteDisplayType(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('animation', 'extension')
    animation = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='animation')
    extension = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='extension')


class CheermoteGroup(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('nodes', 'template_url')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Cheermote))), graphql_name='nodes')
    template_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='templateURL')


class CheermoteImage(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('dpi_scale', 'id', 'is_animated', 'theme', 'url')
    dpi_scale = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='dpiScale')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_animated = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAnimated')
    theme = sgqlc.types.Field(sgqlc.types.non_null(ChatTheme), graphql_name='theme')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class CheermoteTier(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bits', 'can_cheer', 'can_show_in_bits_card', 'color', 'id', 'images', 'tier_id')
    bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bits')
    can_cheer = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canCheer')
    can_show_in_bits_card = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canShowInBitsCard')
    color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='color')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    images = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(CheermoteImage)), graphql_name='images', args=sgqlc.types.ArgDict((
        ('theme', sgqlc.types.Arg(ChatTheme, graphql_name='theme', default=None)),
        ('is_animated', sgqlc.types.Arg(Boolean, graphql_name='isAnimated', default=None)),
        ('dpi_scale', sgqlc.types.Arg(Float, graphql_name='dpiScale', default=None)),
))
    )
    tier_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='tierID')


class CheermoteToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bits_amount', 'prefix', 'tier')
    bits_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bitsAmount')
    prefix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='prefix')
    tier = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='tier')


class ClaimBountyError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(ClaimBountyErrorCode), graphql_name='code')


class ClaimBountyPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('claimed_bounty', 'error', 'user')
    claimed_bounty = sgqlc.types.Field(Bounty, graphql_name='claimedBounty')
    error = sgqlc.types.Field(ClaimBountyError, graphql_name='error')
    user = sgqlc.types.Field('User', graphql_name='user')


class ClaimCommunityPointsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(ClaimCommunityPointsErrorCode, graphql_name='code')


class ClaimCommunityPointsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('claim', 'current_points', 'error')
    claim = sgqlc.types.Field('CommunityPointsClaim', graphql_name='claim')
    current_points = sgqlc.types.Field(Int, graphql_name='currentPoints')
    error = sgqlc.types.Field(ClaimCommunityPointsError, graphql_name='error')


class ClaimDropRewardsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop', 'drop_instance_id', 'drop_type', 'is_user_account_connected', 'rewards', 'status')
    drop = sgqlc.types.Field('DropObject', graphql_name='drop')
    drop_instance_id = sgqlc.types.Field(ID, graphql_name='dropInstanceID')
    drop_type = sgqlc.types.Field('DropType', graphql_name='dropType')
    is_user_account_connected = sgqlc.types.Field(Boolean, graphql_name='isUserAccountConnected')
    rewards = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('DropReward'))), graphql_name='rewards')
    status = sgqlc.types.Field(DropInstanceEligibilityStatus, graphql_name='status')


class ClaimPrimeOfferError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(ClaimPrimeOfferErrorCode), graphql_name='code')


class ClaimPrimeOfferPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'self')
    error = sgqlc.types.Field(ClaimPrimeOfferError, graphql_name='error')
    self = sgqlc.types.Field('PrimeOfferSelfConnection', graphql_name='self')


class Claimable(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('description', 'id', 'self', 'type')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    self = sgqlc.types.Field('SelfClaimEdge', graphql_name='self')
    type = sgqlc.types.Field(sgqlc.types.non_null(ClaimableType), graphql_name='type')


class ClearUnreadFriendRequestsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class ClientAuthorization(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('client_id', 'client_name', 'created_at')
    client_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='clientID')
    client_name = sgqlc.types.Field(String, graphql_name='clientName')
    created_at = sgqlc.types.Field(Time, graphql_name='createdAt')


class Clip(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcast', 'broadcaster', 'champ_badge', 'created_at', 'creation_state', 'curator', 'duration_seconds', 'embed_url', 'game', 'id', 'is_published', 'language', 'playback_access_token', 'raw_media', 'raw_video_qualities', 'reactions', 'related_clips', 'slug', 'thumbnail_url', 'title', 'url', 'video', 'video_offset_seconds', 'video_qualities', 'view_count')
    broadcast = sgqlc.types.Field(Broadcast, graphql_name='broadcast')
    broadcaster = sgqlc.types.Field('User', graphql_name='broadcaster')
    champ_badge = sgqlc.types.Field(Badge, graphql_name='champBadge')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    creation_state = sgqlc.types.Field(ClipCreationState, graphql_name='creationState')
    curator = sgqlc.types.Field('User', graphql_name='curator')
    duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationSeconds')
    embed_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='embedURL')
    game = sgqlc.types.Field('Game', graphql_name='game')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_published = sgqlc.types.Field(Boolean, graphql_name='isPublished')
    language = sgqlc.types.Field(sgqlc.types.non_null(Language), graphql_name='language')
    playback_access_token = sgqlc.types.Field('PlaybackAccessToken', graphql_name='playbackAccessToken', args=sgqlc.types.ArgDict((
        ('params', sgqlc.types.Arg(sgqlc.types.non_null(PlaybackAccessTokenParams), graphql_name='params', default=None)),
))
    )
    raw_media = sgqlc.types.Field(sgqlc.types.non_null('ClipRawMedia'), graphql_name='rawMedia')
    raw_video_qualities = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ClipVideoQuality')), graphql_name='rawVideoQualities')
    reactions = sgqlc.types.Field(sgqlc.types.list_of('Reaction'), graphql_name='reactions')
    related_clips = sgqlc.types.Field('ClipRelatedClips', graphql_name='relatedClips')
    slug = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='slug')
    thumbnail_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='thumbnailURL', args=sgqlc.types.ArgDict((
        ('width', sgqlc.types.Arg(Int, graphql_name='width', default=260)),
        ('height', sgqlc.types.Arg(Int, graphql_name='height', default=147)),
))
    )
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    video = sgqlc.types.Field('Video', graphql_name='video')
    video_offset_seconds = sgqlc.types.Field(Int, graphql_name='videoOffsetSeconds')
    video_qualities = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ClipVideoQuality')), graphql_name='videoQualities')
    view_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='viewCount')


class ClipConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of('ClipEdge'), graphql_name='edges')
    page_info = sgqlc.types.Field('PageInfo', graphql_name='pageInfo')


class ClipEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    node = sgqlc.types.Field(Clip, graphql_name='node')


class ClipRawMedia(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('default_clip_initial_offset', 'duration', 'film_strip_frames', 'film_strip_seconds_per_frame', 'frame_height', 'frame_width', 'spritesheet_url', 'status', 'video_url')
    default_clip_initial_offset = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='defaultClipInitialOffset')
    duration = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='duration')
    film_strip_frames = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='filmStripFrames')
    film_strip_seconds_per_frame = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='filmStripSecondsPerFrame')
    frame_height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='frameHeight')
    frame_width = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='frameWidth')
    spritesheet_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='spritesheetURL')
    status = sgqlc.types.Field(sgqlc.types.non_null(ClipCreationState), graphql_name='status')
    video_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='videoURL')


class ClipRelatedClips(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcaster', 'combined', 'curator', 'game', 'similar', 'top')
    broadcaster = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Clip)), graphql_name='broadcaster')
    combined = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Clip)), graphql_name='combined')
    curator = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Clip)), graphql_name='curator')
    game = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Clip)), graphql_name='game')
    similar = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Clip)), graphql_name='similar')
    top = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Clip)), graphql_name='top')


class ClipVideoQuality(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('frame_rate', 'quality', 'source_url')
    frame_rate = sgqlc.types.Field(Float, graphql_name='frameRate')
    quality = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='quality')
    source_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sourceURL')


class CloneExtensionDiscoveryDataPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'manifest')
    error = sgqlc.types.Field(CloneExtensionDiscoveryDataError, graphql_name='error')
    manifest = sgqlc.types.Field('ExtensionVersionDiscoveryManifest', graphql_name='manifest')


class CloneExtensionManifestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'manifest')
    error = sgqlc.types.Field(CloneExtensionManifestError, graphql_name='error')
    manifest = sgqlc.types.Field('ExtensionManifest', graphql_name='manifest')


class CloudBroadcast(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'state', 'uri')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    state = sgqlc.types.Field(sgqlc.types.non_null(CloudBroadcastState), graphql_name='state')
    uri = sgqlc.types.Field(String, graphql_name='uri')


class CloudBroadcastProvider(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('capabilities', 'display_name', 'id')
    capabilities = sgqlc.types.Field('CloudBroadcastProviderCapabilities', graphql_name='capabilities')
    display_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='displayName')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class CloudBroadcastProviderCapabilities(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('framerate', 'height', 'id', 'is_available', 'width')
    framerate = sgqlc.types.Field(Int, graphql_name='framerate')
    height = sgqlc.types.Field(Int, graphql_name='height')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_available = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAvailable')
    width = sgqlc.types.Field(Int, graphql_name='width')


class CloudBroadcastProviderKey(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('display_name', 'id')
    display_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='displayName')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class Collection(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('description', 'id', 'items', 'length_seconds', 'owner', 'thumbnail_url', 'title', 'type', 'updated_at', 'view_count')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    items = sgqlc.types.Field(sgqlc.types.non_null('CollectionConnection'), graphql_name='items', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    length_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='lengthSeconds')
    owner = sgqlc.types.Field('User', graphql_name='owner')
    thumbnail_url = sgqlc.types.Field(String, graphql_name='thumbnailURL', args=sgqlc.types.ArgDict((
        ('height', sgqlc.types.Arg(Int, graphql_name='height', default=None)),
        ('width', sgqlc.types.Arg(Int, graphql_name='width', default=None)),
))
    )
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(CollectionType), graphql_name='type')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='updatedAt')
    view_count = sgqlc.types.Field(Int, graphql_name='viewCount')


class CollectionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('CollectionItemEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class CollectionItemEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null('CollectionItem'), graphql_name='node')


class CollectionsConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('CollectionsItemEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class CollectionsItemEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Collection), graphql_name='node')


class CommunityPointsAutomaticReward(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('background_color', 'cost', 'default_background_color', 'default_cost', 'default_image', 'globally_updated_for_indicator_at', 'id', 'image', 'is_enabled', 'is_hidden_for_subs', 'minimum_cost', 'type', 'updated_for_indicator_at')
    background_color = sgqlc.types.Field(String, graphql_name='backgroundColor')
    cost = sgqlc.types.Field(Int, graphql_name='cost')
    default_background_color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='defaultBackgroundColor')
    default_cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='defaultCost')
    default_image = sgqlc.types.Field(sgqlc.types.non_null('CommunityPointsImage'), graphql_name='defaultImage')
    globally_updated_for_indicator_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='globallyUpdatedForIndicatorAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image = sgqlc.types.Field('CommunityPointsImage', graphql_name='image')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    is_hidden_for_subs = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isHiddenForSubs')
    minimum_cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='minimumCost')
    type = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsAutomaticRewardType), graphql_name='type')
    updated_for_indicator_at = sgqlc.types.Field(Time, graphql_name='updatedForIndicatorAt')


class CommunityPointsChannelEarningSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('average_points_per_hour', 'average_points_per_hour_subscriber', 'cheer_points', 'claim_period_minutes', 'claim_points', 'follow_points', 'id', 'multipliers', 'passive_watch_period_minutes', 'passive_watch_points', 'raid_points', 'subscriber_multiplier', 'subscription_gift_points', 'watch_streak_points')
    average_points_per_hour = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='averagePointsPerHour')
    average_points_per_hour_subscriber = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='averagePointsPerHourSubscriber')
    cheer_points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cheerPoints')
    claim_period_minutes = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='claimPeriodMinutes')
    claim_points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='claimPoints')
    follow_points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='followPoints')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    multipliers = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CommunityPointsMultiplier'))), graphql_name='multipliers')
    passive_watch_period_minutes = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='passiveWatchPeriodMinutes')
    passive_watch_points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='passiveWatchPoints')
    raid_points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='raidPoints')
    subscriber_multiplier = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='subscriberMultiplier')
    subscription_gift_points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='subscriptionGiftPoints')
    watch_streak_points = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CommunityPointsWatchStreakEarningSettings'))), graphql_name='watchStreakPoints')


class CommunityPointsChannelSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('archived_goals', 'automatic_rewards', 'community_goal_max_contribution_per_stream', 'community_goal_small_contribution', 'custom_reward', 'custom_reward_template_collections', 'custom_rewards', 'default_image', 'early_access', 'earning', 'emote_variants', 'goals', 'image', 'is_available', 'is_available_at_launch', 'is_enabled', 'is_enabled_at_launch', 'name', 'raid_point_amount', 'smart_costs_acknowledgements', 'summarized_rewards', 'update_custom_reward_redemption_statuses_progress')
    archived_goals = sgqlc.types.Field('CommunityPointsCommunityGoalConnection', graphql_name='archivedGoals', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    automatic_rewards = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommunityPointsAutomaticReward)), graphql_name='automaticRewards')
    community_goal_max_contribution_per_stream = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='communityGoalMaxContributionPerStream')
    community_goal_small_contribution = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='communityGoalSmallContribution')
    custom_reward = sgqlc.types.Field('CommunityPointsCustomReward', graphql_name='customReward', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    custom_reward_template_collections = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommunityPointsCustomRewardTemplateCollection')), graphql_name='customRewardTemplateCollections')
    custom_rewards = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommunityPointsCustomReward')), graphql_name='customRewards')
    default_image = sgqlc.types.Field(sgqlc.types.non_null('CommunityPointsImage'), graphql_name='defaultImage')
    early_access = sgqlc.types.Field('CommunityPointsEarlyAccessSettings', graphql_name='earlyAccess')
    earning = sgqlc.types.Field(CommunityPointsChannelEarningSettings, graphql_name='earning')
    emote_variants = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommunityPointsEmoteVariant')), graphql_name='emoteVariants')
    goals = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommunityPointsCommunityGoal')), graphql_name='goals', args=sgqlc.types.ArgDict((
        ('include_goal_types', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(CommunityPointsCommunityGoalType)), graphql_name='includeGoalTypes', default=None)),
))
    )
    image = sgqlc.types.Field('CommunityPointsImage', graphql_name='image')
    is_available = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAvailable')
    is_available_at_launch = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAvailableAtLaunch')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    is_enabled_at_launch = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabledAtLaunch')
    name = sgqlc.types.Field(String, graphql_name='name')
    raid_point_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='raidPointAmount')
    smart_costs_acknowledgements = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SmartCostsAcknowledgement')), graphql_name='smartCostsAcknowledgements')
    summarized_rewards = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommunityPointsRewardSummary')), graphql_name='summarizedRewards')
    update_custom_reward_redemption_statuses_progress = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommunityPointsUpdateCustomRewardRedemptionStatusesProgress')), graphql_name='updateCustomRewardRedemptionStatusesProgress')


class CommunityPointsClaim(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'multipliers', 'points_earned_baseline', 'points_earned_total')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    multipliers = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CommunityPointsMultiplier'))), graphql_name='multipliers')
    points_earned_baseline = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='pointsEarnedBaseline')
    points_earned_total = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='pointsEarnedTotal')


class CommunityPointsCommunityGoal(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('amount_needed', 'background_color', 'default_image', 'description', 'duration_days', 'ended_at', 'id', 'image', 'is_in_stock', 'per_stream_user_maximum_contribution', 'points_contributed', 'small_contribution', 'started_at', 'status', 'title', 'type')
    amount_needed = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='amountNeeded')
    background_color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='backgroundColor')
    default_image = sgqlc.types.Field(sgqlc.types.non_null('CommunityPointsImage'), graphql_name='defaultImage')
    description = sgqlc.types.Field(String, graphql_name='description')
    duration_days = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationDays')
    ended_at = sgqlc.types.Field(Time, graphql_name='endedAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image = sgqlc.types.Field('CommunityPointsImage', graphql_name='image')
    is_in_stock = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isInStock')
    per_stream_user_maximum_contribution = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='perStreamUserMaximumContribution')
    points_contributed = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='pointsContributed')
    small_contribution = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='smallContribution')
    started_at = sgqlc.types.Field(Time, graphql_name='startedAt')
    status = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCommunityGoalStatus), graphql_name='status')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCommunityGoalType), graphql_name='type')


class CommunityPointsCommunityGoalConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CommunityPointsCommunityGoalEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class CommunityPointsCommunityGoalContribution(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('goal', 'user_points_contributed_this_stream')
    goal = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCommunityGoal), graphql_name='goal')
    user_points_contributed_this_stream = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='userPointsContributedThisStream')


class CommunityPointsCommunityGoalEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCommunityGoal), graphql_name='node')


class CommunityPointsCustomReward(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('background_color', 'cooldown_expires_at', 'cost', 'default_image', 'global_cooldown_setting', 'has_real_world_value', 'id', 'image', 'is_enabled', 'is_in_stock', 'is_paused', 'is_sub_only', 'is_user_input_required', 'max_per_stream_setting', 'max_per_user_per_stream_setting', 'prompt', 'redemptions_redeemed_current_stream', 'should_redemptions_skip_request_queue', 'template_id', 'title', 'updated_for_indicator_at')
    background_color = sgqlc.types.Field(String, graphql_name='backgroundColor')
    cooldown_expires_at = sgqlc.types.Field(Time, graphql_name='cooldownExpiresAt')
    cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cost')
    default_image = sgqlc.types.Field(sgqlc.types.non_null('CommunityPointsImage'), graphql_name='defaultImage')
    global_cooldown_setting = sgqlc.types.Field(sgqlc.types.non_null('CommunityPointsCustomRewardGlobalCooldownSetting'), graphql_name='globalCooldownSetting')
    has_real_world_value = sgqlc.types.Field(Boolean, graphql_name='hasRealWorldValue')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image = sgqlc.types.Field('CommunityPointsImage', graphql_name='image')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    is_in_stock = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isInStock')
    is_paused = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPaused')
    is_sub_only = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSubOnly')
    is_user_input_required = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isUserInputRequired')
    max_per_stream_setting = sgqlc.types.Field(sgqlc.types.non_null('CommunityPointsCustomRewardMaxPerStreamSetting'), graphql_name='maxPerStreamSetting')
    max_per_user_per_stream_setting = sgqlc.types.Field(sgqlc.types.non_null('CommunityPointsCustomRewardMaxPerUserPerStreamSetting'), graphql_name='maxPerUserPerStreamSetting')
    prompt = sgqlc.types.Field(String, graphql_name='prompt')
    redemptions_redeemed_current_stream = sgqlc.types.Field(Int, graphql_name='redemptionsRedeemedCurrentStream')
    should_redemptions_skip_request_queue = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldRedemptionsSkipRequestQueue')
    template_id = sgqlc.types.Field(ID, graphql_name='templateID')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    updated_for_indicator_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='updatedForIndicatorAt')


class CommunityPointsCustomRewardGlobalCooldownSetting(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('global_cooldown_seconds', 'is_enabled')
    global_cooldown_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='globalCooldownSeconds')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class CommunityPointsCustomRewardMaxPerStreamSetting(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'max_per_stream')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    max_per_stream = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='maxPerStream')


class CommunityPointsCustomRewardMaxPerUserPerStreamSetting(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'max_per_user_per_stream')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    max_per_user_per_stream = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='maxPerUserPerStream')


class CommunityPointsCustomRewardRedemption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'input', 'reward', 'reward_id', 'reward_title', 'status', 'timestamp', 'user')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    input = sgqlc.types.Field(String, graphql_name='input')
    reward = sgqlc.types.Field(CommunityPointsCustomReward, graphql_name='reward')
    reward_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='rewardID')
    reward_title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='rewardTitle')
    status = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardRedemptionStatus), graphql_name='status')
    timestamp = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='timestamp')
    user = sgqlc.types.Field('User', graphql_name='user')


class CommunityPointsCustomRewardRedemptionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CommunityPointsCustomRewardRedemptionEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class CommunityPointsCustomRewardRedemptionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardRedemption), graphql_name='node')


class CommunityPointsCustomRewardTemplate(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('background_color', 'cost', 'global_cooldown_setting', 'id', 'image', 'is_sub_only', 'is_user_input_required', 'max_per_stream_setting', 'max_per_user_per_stream_setting', 'prompt', 'should_redemptions_skip_request_queue', 'title')
    background_color = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='backgroundColor')
    cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cost')
    global_cooldown_setting = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardGlobalCooldownSetting), graphql_name='globalCooldownSetting')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image = sgqlc.types.Field(sgqlc.types.non_null('CommunityPointsImage'), graphql_name='image')
    is_sub_only = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSubOnly')
    is_user_input_required = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isUserInputRequired')
    max_per_stream_setting = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardMaxPerStreamSetting), graphql_name='maxPerStreamSetting')
    max_per_user_per_stream_setting = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardMaxPerUserPerStreamSetting), graphql_name='maxPerUserPerStreamSetting')
    prompt = sgqlc.types.Field(String, graphql_name='prompt')
    should_redemptions_skip_request_queue = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldRedemptionsSkipRequestQueue')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CommunityPointsCustomRewardTemplateCollection(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('category', 'custom_reward_templates')
    category = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardTemplateCollectionCategory), graphql_name='category')
    custom_reward_templates = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CommunityPointsCustomRewardTemplate))), graphql_name='customRewardTemplates')


class CommunityPointsCustomRewardUserRedemption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('reward', 'user_redemptions_current_stream')
    reward = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomReward), graphql_name='reward')
    user_redemptions_current_stream = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='userRedemptionsCurrentStream')


class CommunityPointsEarlyAccessSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_sign_up', 'is_signed_up')
    can_sign_up = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canSignUp')
    is_signed_up = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSignedUp')


class CommunityPointsEmote(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'token')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='token')


class CommunityPointsEmoteModification(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('emote', 'globally_updated_for_indicator_at', 'id', 'modifier_icon_dark', 'modifier_icon_light', 'title')
    emote = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsEmote), graphql_name='emote')
    globally_updated_for_indicator_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='globallyUpdatedForIndicatorAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    modifier_icon_dark = sgqlc.types.Field(sgqlc.types.non_null('CommunityPointsImage'), graphql_name='modifierIconDark')
    modifier_icon_light = sgqlc.types.Field(sgqlc.types.non_null('CommunityPointsImage'), graphql_name='modifierIconLight')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CommunityPointsEmoteVariant(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('emote', 'id', 'is_unlockable', 'modifications')
    emote = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsEmote), graphql_name='emote')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_unlockable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isUnlockable')
    modifications = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CommunityPointsEmoteModification))), graphql_name='modifications')


class CommunityPointsImage(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('url', 'url2x', 'url4x')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    url2x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url2x')
    url4x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url4x')


class CommunityPointsImageUploadInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('upload_id', 'url')
    upload_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='uploadID')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class CommunityPointsLastViewedContentByType(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content_type', 'last_viewed_at')
    content_type = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsContentType), graphql_name='contentType')
    last_viewed_at = sgqlc.types.Field(Time, graphql_name='lastViewedAt')


class CommunityPointsLastViewedContentByTypeAndID(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content_id', 'content_type', 'last_viewed_at')
    content_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='contentID')
    content_type = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsContentType), graphql_name='contentType')
    last_viewed_at = sgqlc.types.Field(Time, graphql_name='lastViewedAt')


class CommunityPointsLimitedEarnings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cheer_available_at', 'id', 'is_cheer_available', 'is_follow_available', 'is_subscription_gift_available', 'subscription_gift_available_at')
    cheer_available_at = sgqlc.types.Field(Time, graphql_name='cheerAvailableAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_cheer_available = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCheerAvailable')
    is_follow_available = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isFollowAvailable')
    is_subscription_gift_available = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSubscriptionGiftAvailable')
    subscription_gift_available_at = sgqlc.types.Field(Time, graphql_name='subscriptionGiftAvailableAt')


class CommunityPointsMultiplier(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('factor', 'reason_code')
    factor = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='factor')
    reason_code = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsMultiplierReason), graphql_name='reasonCode')


class CommunityPointsProperties(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('active_multipliers', 'available_claim', 'balance', 'can_redeem_rewards_for_free', 'goal_contributions', 'last_viewed_content', 'limited_earnings', 'user_redemptions')
    active_multipliers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommunityPointsMultiplier)), graphql_name='activeMultipliers')
    available_claim = sgqlc.types.Field(CommunityPointsClaim, graphql_name='availableClaim')
    balance = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='balance')
    can_redeem_rewards_for_free = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canRedeemRewardsForFree')
    goal_contributions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommunityPointsCommunityGoalContribution)), graphql_name='goalContributions')
    last_viewed_content = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommunityPointsLastViewedContentByType)), graphql_name='lastViewedContent')
    limited_earnings = sgqlc.types.Field(CommunityPointsLimitedEarnings, graphql_name='limitedEarnings')
    user_redemptions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommunityPointsCustomRewardUserRedemption)), graphql_name='userRedemptions')


class CommunityPointsRewardSummary(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count', 'is_count_at_maximum', 'node')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')
    is_count_at_maximum = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCountAtMaximum')
    node = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomReward), graphql_name='node')


class CommunityPointsUnlockEmoteError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsUnlockEmoteErrorCode), graphql_name='code')


class CommunityPointsUpdateCustomRewardRedemptionStatusesProgress(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel_id', 'id', 'method', 'new_status', 'processed', 'reward_id', 'total')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    method = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsUpdateCustomRewardRedemptionStatusesMethod), graphql_name='method')
    new_status = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCustomRewardRedemptionStatus), graphql_name='newStatus')
    processed = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='processed')
    reward_id = sgqlc.types.Field(ID, graphql_name='rewardID')
    total = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='total')


class CommunityPointsUserProperties(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('last_viewed_content',)
    last_viewed_content = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommunityPointsLastViewedContentByTypeAndID)), graphql_name='lastViewedContent')


class CommunityPointsWatchStreakEarningSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('points', 'streak_length')
    points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='points')
    streak_length = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='streakLength')


class Company(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bounty_campaigns', 'brand_portal_settings', 'curse_company_id', 'estimated_broadcaster_viewer_reach', 'games', 'id', 'is_campaigns_enabled', 'is_contract_signed', 'is_legacy', 'name', 'type', 'url')
    bounty_campaigns = sgqlc.types.Field(BountyCampaignConnection, graphql_name='bountyCampaigns', args=sgqlc.types.ArgDict((
        ('campaign_id', sgqlc.types.Arg(ID, graphql_name='campaignID', default=None)),
        ('status', sgqlc.types.Arg(BountyCampaignStatus, graphql_name='status', default=None)),
))
    )
    brand_portal_settings = sgqlc.types.Field(BrandPortalSettings, graphql_name='brandPortalSettings')
    curse_company_id = sgqlc.types.Field(ID, graphql_name='curseCompanyID')
    estimated_broadcaster_viewer_reach = sgqlc.types.Field(BroadcasterViewerReach, graphql_name='estimatedBroadcasterViewerReach', args=sgqlc.types.ArgDict((
        ('game_names', sgqlc.types.Arg(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='gameNames', default=None)),
        ('target_all_broadcasters', sgqlc.types.Arg(sgqlc.types.non_null(Boolean), graphql_name='targetAllBroadcasters', default=None)),
        ('target_variety_broadcasters', sgqlc.types.Arg(sgqlc.types.non_null(Boolean), graphql_name='targetVarietyBroadcasters', default=None)),
        ('stream_length_seconds', sgqlc.types.Arg(Int, graphql_name='streamLengthSeconds', default=None)),
        ('target_all_countries', sgqlc.types.Arg(Boolean, graphql_name='targetAllCountries', default=False)),
        ('target_all_games', sgqlc.types.Arg(Boolean, graphql_name='targetAllGames', default=False)),
        ('countries', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='countries', default=[])),
))
    )
    games = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Game')), graphql_name='games', args=sgqlc.types.ArgDict((
        ('include_bounty_board_games', sgqlc.types.Arg(Boolean, graphql_name='includeBountyBoardGames', default=False)),
))
    )
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_campaigns_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCampaignsEnabled')
    is_contract_signed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isContractSigned')
    is_legacy = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isLegacy')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    type = sgqlc.types.Field(sgqlc.types.non_null(OrganizationType), graphql_name='type')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class Competition(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('banner_image_url', 'check_in_duration_minutes', 'created_at', 'description', 'end_at', 'format', 'game', 'id', 'image_url', 'name', 'owner', 'participant_only_contact_info', 'participant_type', 'participants', 'phases', 'players', 'prize_description', 'public_contact_info', 'registration_end_at', 'registration_limit', 'registration_type', 'rules_description', 'self', 'standings', 'start_at', 'state', 'team_size', 'teams', 'terms_url', 'updated_at', 'visibility')
    banner_image_url = sgqlc.types.Field(String, graphql_name='bannerImageURL')
    check_in_duration_minutes = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='checkInDurationMinutes')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    description = sgqlc.types.Field(String, graphql_name='description')
    end_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endAt')
    format = sgqlc.types.Field(sgqlc.types.non_null('CompetitionFormat'), graphql_name='format')
    game = sgqlc.types.Field('Game', graphql_name='game')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner = sgqlc.types.Field('User', graphql_name='owner')
    participant_only_contact_info = sgqlc.types.Field('CompetitionContactInfo', graphql_name='participantOnlyContactInfo')
    participant_type = sgqlc.types.Field(sgqlc.types.non_null(CompetitionParticipantType), graphql_name='participantType')
    participants = sgqlc.types.Field('CompetitionParticipantConnection', graphql_name='participants', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    phases = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CompetitionPhase'))), graphql_name='phases')
    players = sgqlc.types.Field('CompetitionPlayerConnection', graphql_name='players', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('state', sgqlc.types.Arg(CompetitionPlayerState, graphql_name='state', default=None)),
))
    )
    prize_description = sgqlc.types.Field(String, graphql_name='prizeDescription')
    public_contact_info = sgqlc.types.Field('CompetitionContactInfo', graphql_name='publicContactInfo')
    registration_end_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='registrationEndAt')
    registration_limit = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='registrationLimit')
    registration_type = sgqlc.types.Field(sgqlc.types.non_null(RegistrationType), graphql_name='registrationType')
    rules_description = sgqlc.types.Field(String, graphql_name='rulesDescription')
    self = sgqlc.types.Field('CompetitionSelfEdge', graphql_name='self')
    standings = sgqlc.types.Field('CompetitionStandingConnection', graphql_name='standings', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=100)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')
    state = sgqlc.types.Field(sgqlc.types.non_null(CompetitionState), graphql_name='state')
    team_size = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='teamSize')
    teams = sgqlc.types.Field('CompetitionTeamConnection', graphql_name='teams', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    terms_url = sgqlc.types.Field(String, graphql_name='termsURL')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='updatedAt')
    visibility = sgqlc.types.Field(sgqlc.types.non_null(CompetitionVisibilityState), graphql_name='visibility')


class CompetitionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CompetitionEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class CompetitionContactInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('discord_url', 'email')
    discord_url = sgqlc.types.Field(String, graphql_name='discordURL')
    email = sgqlc.types.Field(String, graphql_name='email')


class CompetitionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Competition), graphql_name='node')


class CompetitionError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('automod_failed_fields', 'code', 'message')
    automod_failed_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompetitionAutomodField)), graphql_name='automodFailedFields')
    code = sgqlc.types.Field(sgqlc.types.non_null(CompetitionErrorCode), graphql_name='code')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')


class CompetitionFormat(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('details', 'type')
    details = sgqlc.types.Field('FormatTypeDetails', graphql_name='details')
    type = sgqlc.types.Field(sgqlc.types.non_null(FormatType), graphql_name='type')


class CompetitionImageUpload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'url')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class CompetitionLobby(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('advance_next_lobby', 'id', 'loss_next_lobby', 'participants', 'reported_score_count', 'state', 'winner')
    advance_next_lobby = sgqlc.types.Field(ID, graphql_name='advanceNextLobby')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    loss_next_lobby = sgqlc.types.Field(ID, graphql_name='lossNextLobby')
    participants = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CompetitionLobbyParticipant')), graphql_name='participants')
    reported_score_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='reportedScoreCount')
    state = sgqlc.types.Field(sgqlc.types.non_null(LobbyState), graphql_name='state')
    winner = sgqlc.types.Field('CompetitionLobbyParticipant', graphql_name='winner')


class CompetitionLobbyParticipant(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('detailed_participant', 'id', 'score', 'tiebreaker_score')
    detailed_participant = sgqlc.types.Field(sgqlc.types.non_null('CompetitionParticipant'), graphql_name='detailedParticipant')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    score = sgqlc.types.Field(Int, graphql_name='score')
    tiebreaker_score = sgqlc.types.Field(Int, graphql_name='tiebreakerScore')


class CompetitionOrganizerCapability(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('allowed_registration_types', 'can_attach_terms', 'can_create_competitions', 'can_manage_participant_status', 'can_use_custom_format')
    allowed_registration_types = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(RegistrationType)), graphql_name='allowedRegistrationTypes')
    can_attach_terms = sgqlc.types.Field(Boolean, graphql_name='canAttachTerms')
    can_create_competitions = sgqlc.types.Field(Boolean, graphql_name='canCreateCompetitions')
    can_manage_participant_status = sgqlc.types.Field(Boolean, graphql_name='canManageParticipantStatus')
    can_use_custom_format = sgqlc.types.Field(Boolean, graphql_name='canUseCustomFormat')


class CompetitionParticipantConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CompetitionParticipantEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class CompetitionParticipantEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null('CompetitionParticipant'), graphql_name='node')


class CompetitionPhase(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'lobbies', 'state', 'type')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    lobbies = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CompetitionLobby))), graphql_name='lobbies')
    state = sgqlc.types.Field(sgqlc.types.non_null(PhaseState), graphql_name='state')
    type = sgqlc.types.Field(CompetitionPhaseType, graphql_name='type')


class CompetitionPlacement(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('position',)
    position = sgqlc.types.Field(Int, graphql_name='position')


class CompetitionPlayer(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition_id', 'created_at', 'discord_username', 'id', 'in_game_username', 'is_disqualified', 'state', 'team', 'total_score', 'user')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    discord_username = sgqlc.types.Field(String, graphql_name='discordUsername')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    in_game_username = sgqlc.types.Field(String, graphql_name='inGameUsername')
    is_disqualified = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isDisqualified')
    state = sgqlc.types.Field(sgqlc.types.non_null(CompetitionPlayerState), graphql_name='state')
    team = sgqlc.types.Field('CompetitionTeam', graphql_name='team')
    total_score = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalScore')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')


class CompetitionPlayerConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CompetitionPlayerEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class CompetitionPlayerEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CompetitionPlayer), graphql_name='node')


class CompetitionSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_invited', 'is_owner', 'is_player', 'is_registered')
    is_invited = sgqlc.types.Field(Boolean, graphql_name='isInvited')
    is_owner = sgqlc.types.Field(Boolean, graphql_name='isOwner')
    is_player = sgqlc.types.Field(Boolean, graphql_name='isPlayer')
    is_registered = sgqlc.types.Field(Boolean, graphql_name='isRegistered')


class CompetitionStanding(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('history', 'participant', 'placement', 'score', 'tiebreaker_score', 'win_percentage')
    history = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HistoricalCompetitionLobby')), graphql_name='history')
    participant = sgqlc.types.Field(sgqlc.types.non_null('CompetitionParticipant'), graphql_name='participant')
    placement = sgqlc.types.Field(sgqlc.types.non_null(CompetitionPlacement), graphql_name='placement')
    score = sgqlc.types.Field(Int, graphql_name='score')
    tiebreaker_score = sgqlc.types.Field(Int, graphql_name='tiebreakerScore')
    win_percentage = sgqlc.types.Field(Int, graphql_name='winPercentage')


class CompetitionStandingConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CompetitionStandingEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class CompetitionStandingEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CompetitionStanding), graphql_name='node')


class CompetitionTeam(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('captain', 'competition_id', 'id', 'is_disqualified', 'members', 'name', 'self', 'total_score')
    captain = sgqlc.types.Field(CompetitionPlayer, graphql_name='captain')
    competition_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='competitionID')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_disqualified = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isDisqualified')
    members = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CompetitionPlayer)), graphql_name='members')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    self = sgqlc.types.Field('CompetitionTeamSelfEdge', graphql_name='self')
    total_score = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalScore')


class CompetitionTeamConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CompetitionTeamEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class CompetitionTeamEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CompetitionTeam), graphql_name='node')


class CompetitionTeamSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_captain',)
    is_captain = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCaptain')


class CompetitionUploadImageError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'message')
    code = sgqlc.types.Field(sgqlc.types.non_null(CompetitionUploadImageErrorCode), graphql_name='code')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')


class ConnectAdIdentityPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('identity_url',)
    identity_url = sgqlc.types.Field(String, graphql_name='identityURL')


class Consent(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'is_denied_underage', 'privacy_law_name', 'should_show_notification', 'should_show_settings_page', 'vendor_status')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_denied_underage = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isDeniedUnderage')
    privacy_law_name = sgqlc.types.Field(sgqlc.types.non_null(PrivacyLawName), graphql_name='privacyLawName')
    should_show_notification = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldShowNotification')
    should_show_settings_page = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldShowSettingsPage')
    vendor_status = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('VendorConsentStatus'))), graphql_name='vendorStatus')


class ContributeCommunityPointsCommunityGoalError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(ContributeCommunityPointsCommunityGoalErrorCode), graphql_name='code')


class ContributeCommunityPointsCommunityGoalPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(ContributeCommunityPointsCommunityGoalError, graphql_name='error')


class ContributeToChallengeError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(ContributeToChallengeErrorCode), graphql_name='code')


class ContributeToChallengePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('challenge_participant', 'error')
    challenge_participant = sgqlc.types.Field(ChannelChallengeParticipant, graphql_name='challengeParticipant')
    error = sgqlc.types.Field(ContributeToChallengeError, graphql_name='error')


class CreateBadgeFlairError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'message')
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateBadgeFlairErrorCode), graphql_name='code')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')


class CreateBadgeFlairPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(CreateBadgeFlairError, graphql_name='error')


class CreateBitsChallengeConditionForExtensionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('condition', 'error')
    condition = sgqlc.types.Field(ChallengeCondition, graphql_name='condition')
    error = sgqlc.types.Field('CreateChallengeConditionError', graphql_name='error')


class CreateBitsChallengeConditionParticipantForExtensionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('condition_participant', 'error')
    condition_participant = sgqlc.types.Field(ChallengeConditionParticipant, graphql_name='conditionParticipant')
    error = sgqlc.types.Field('CreateChallengeConditionParticipantError', graphql_name='error')


class CreateBountyCampaignPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('campaign',)
    campaign = sgqlc.types.Field(BountyCampaign, graphql_name='campaign')


class CreateBountyCampaignUploadConfigPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('image_id', 'upload_id', 'upload_url')
    image_id = sgqlc.types.Field(ID, graphql_name='imageID')
    upload_id = sgqlc.types.Field(ID, graphql_name='uploadID')
    upload_url = sgqlc.types.Field(String, graphql_name='uploadURL')


class CreateCelebrationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('celebration', 'error')
    celebration = sgqlc.types.Field(Celebration, graphql_name='celebration')
    error = sgqlc.types.Field(CelebrationError, graphql_name='error')


class CreateChallengeConditionError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateChallengeConditionErrorCode), graphql_name='code')


class CreateChallengeConditionParticipantError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateChallengeConditionParticipantErrorCode), graphql_name='code')


class CreateChanletPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('chanlet', 'channel_id')
    chanlet = sgqlc.types.Field(sgqlc.types.non_null(Channel), graphql_name='chanlet')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class CreateClipError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(CreateClipErrorCode, graphql_name='code')


class CreateClipPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('clip', 'error')
    clip = sgqlc.types.Field(Clip, graphql_name='clip')
    error = sgqlc.types.Field(CreateClipError, graphql_name='error')


class CreateCollectionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('collection',)
    collection = sgqlc.types.Field(Collection, graphql_name='collection')


class CreateCommunityPointsCommunityGoalError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateCommunityPointsCommunityGoalErrorCode), graphql_name='code')


class CreateCommunityPointsCommunityGoalPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'goal')
    error = sgqlc.types.Field(CreateCommunityPointsCommunityGoalError, graphql_name='error')
    goal = sgqlc.types.Field(CommunityPointsCommunityGoal, graphql_name='goal')


class CreateCommunityPointsCustomRewardError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'max_rewards')
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateCommunityPointsCustomRewardErrorCode), graphql_name='code')
    max_rewards = sgqlc.types.Field(Int, graphql_name='maxRewards')


class CreateCommunityPointsCustomRewardPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'reward')
    error = sgqlc.types.Field(CreateCommunityPointsCustomRewardError, graphql_name='error')
    reward = sgqlc.types.Field(CommunityPointsCustomReward, graphql_name='reward')


class CreateCommunityPointsImageUploadInfoError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(CreateCommunityPointsImageUploadInfoErrorCode, graphql_name='code')


class CreateCommunityPointsImageUploadInfoPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'upload_info_large', 'upload_info_medium', 'upload_info_small')
    error = sgqlc.types.Field(CreateCommunityPointsImageUploadInfoError, graphql_name='error')
    upload_info_large = sgqlc.types.Field(CommunityPointsImageUploadInfo, graphql_name='uploadInfoLarge')
    upload_info_medium = sgqlc.types.Field(CommunityPointsImageUploadInfo, graphql_name='uploadInfoMedium')
    upload_info_small = sgqlc.types.Field(CommunityPointsImageUploadInfo, graphql_name='uploadInfoSmall')


class CreateCompetitionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field(Competition, graphql_name='competition')
    error = sgqlc.types.Field(CompetitionError, graphql_name='error')


class CreateContentTagsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content',)
    content = sgqlc.types.Field('TaggedContent', graphql_name='content')


class CreateDropBenefitPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_benefit', 'error')
    drop_benefit = sgqlc.types.Field('DropBenefit', graphql_name='dropBenefit')
    error = sgqlc.types.Field('DropsError', graphql_name='error')


class CreateDropCampaignPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_campaign', 'error')
    drop_campaign = sgqlc.types.Field('DropCampaign', graphql_name='dropCampaign')
    error = sgqlc.types.Field('DropsError', graphql_name='error')


class CreateDropImageUploadURLPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'upload_id', 'url')
    error = sgqlc.types.Field(CreateDropImageUploadURLErrorCode, graphql_name='error')
    upload_id = sgqlc.types.Field(ID, graphql_name='uploadID')
    url = sgqlc.types.Field(String, graphql_name='url')


class CreateExtensionClientPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('client', 'error')
    client = sgqlc.types.Field('ExtensionClient', graphql_name='client')
    error = sgqlc.types.Field(CreateExtensionClientError, graphql_name='error')


class CreateExtensionImageUploadInfoError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'maximum', 'minimum')
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateExtensionImageUploadInfoErrorCode), graphql_name='code')
    maximum = sgqlc.types.Field(Int, graphql_name='maximum')
    minimum = sgqlc.types.Field(Int, graphql_name='minimum')


class CreateExtensionImageUploadInfoPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('discovery', 'error', 'logo', 'screenshots', 'taskbar')
    discovery = sgqlc.types.Field('ExtensionImageUploadResponse', graphql_name='discovery')
    error = sgqlc.types.Field(CreateExtensionImageUploadInfoError, graphql_name='error')
    logo = sgqlc.types.Field('ExtensionImageUploadResponse', graphql_name='logo')
    screenshots = sgqlc.types.Field(sgqlc.types.list_of('ExtensionImageUploadResponse'), graphql_name='screenshots')
    taskbar = sgqlc.types.Field('ExtensionImageUploadResponse', graphql_name='taskbar')


class CreateExtensionZipUploadInfoPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'response')
    error = sgqlc.types.Field(CreateExtensionZipUploadInfoError, graphql_name='error')
    response = sgqlc.types.Field('ExtensionZipUploadResponse', graphql_name='response')


class CreateFriendRequestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class CreateGameApplicationError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(CreateGameApplicationErrorCode, graphql_name='code')


class CreateGameApplicationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'game_application')
    error = sgqlc.types.Field(CreateGameApplicationError, graphql_name='error')
    game_application = sgqlc.types.Field('GameApplication', graphql_name='gameApplication')


class CreateGameBoxArtUploadURLPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('response',)
    response = sgqlc.types.Field('CreateGameBoxArtUploadURLResponse', graphql_name='response')


class CreateGameBoxArtUploadURLResponse(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('upload_id', 'url')
    upload_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='uploadID')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class CreateLoyaltyBadgePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('badge', 'error_code')
    badge = sgqlc.types.Field('LoyaltyBadge', graphql_name='badge')
    error_code = sgqlc.types.Field(CreateLoyaltyBadgeResponseCode, graphql_name='errorCode')


class CreateLoyaltyBadgeUploadConfigPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error_code', 'upload_config')
    error_code = sgqlc.types.Field(CreateLoyaltyBadgeUploadConfigResponseCode, graphql_name='errorCode')
    upload_config = sgqlc.types.Field('LoyaltyBadgeUploadConfig', graphql_name='uploadConfig')


class CreateModeratorCommentPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('comment',)
    comment = sgqlc.types.Field('ModLogsComment', graphql_name='comment')


class CreateMultiVideoHighlightPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('highlight',)
    highlight = sgqlc.types.Field('Video', graphql_name='highlight')


class CreateMultiviewContentAttributeImageUploadConfigPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'image_url', 'upload_id', 'upload_url')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    upload_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='uploadID')
    upload_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uploadURL')


class CreateMultiviewContentAttributesPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('failed_creates', 'succeeded_creates')
    failed_creates = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('MultiviewContentAttribute'))), graphql_name='failedCreates')
    succeeded_creates = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('MultiviewContentAttribute'))), graphql_name='succeededCreates')


class CreateOrganizationApplicationError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(CreateOrganizationApplicationErrorCode, graphql_name='code')


class CreateOrganizationApplicationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('application_id', 'error')
    application_id = sgqlc.types.Field(ID, graphql_name='applicationID')
    error = sgqlc.types.Field(CreateOrganizationApplicationError, graphql_name='error')


class CreateOrganizationInviteError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateOrganizationInviteErrorCode), graphql_name='code')


class CreateOrganizationInvitePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'invite')
    error = sgqlc.types.Field(CreateOrganizationInviteError, graphql_name='error')
    invite = sgqlc.types.Field('OrganizationInvite', graphql_name='invite')


class CreateOrganizationJWTError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateOrganizationJWTErrorCode), graphql_name='code')


class CreateOrganizationJWTPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'jwt')
    error = sgqlc.types.Field(CreateOrganizationJWTError, graphql_name='error')
    jwt = sgqlc.types.Field(String, graphql_name='jwt')


class CreateOrganizationMemberError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateOrganizationMemberErrorCode), graphql_name='code')


class CreateOrganizationMemberPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'organization_member')
    error = sgqlc.types.Field(CreateOrganizationMemberError, graphql_name='error')
    organization_member = sgqlc.types.Field('OrganizationMember', graphql_name='organizationMember')


class CreatePanelImageUploadInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('upload_id', 'url')
    upload_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='uploadID')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class CreatePanelImageUploadInfoPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('upload_info',)
    upload_info = sgqlc.types.Field(CreatePanelImageUploadInfo, graphql_name='uploadInfo')


class CreatePanelPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('panel',)
    panel = sgqlc.types.Field(sgqlc.types.non_null('Panel'), graphql_name='panel')


class CreatePartnershipApplicationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('partnership_application',)
    partnership_application = sgqlc.types.Field('PartnershipApplication', graphql_name='partnershipApplication')


class CreatePollError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CreatePollErrorCode), graphql_name='code')


class CreatePollPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'poll')
    error = sgqlc.types.Field(CreatePollError, graphql_name='error')
    poll = sgqlc.types.Field('Poll', graphql_name='poll')


class CreatePostPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('post', 'tweet', 'tweet_status')
    post = sgqlc.types.Field('Post', graphql_name='post')
    tweet = sgqlc.types.Field(String, graphql_name='tweet')
    tweet_status = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='tweetStatus')


class CreatePredictionEventError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'max_outcomes', 'max_prediction_window_seconds')
    code = sgqlc.types.Field(sgqlc.types.non_null(CreatePredictionEventErrorCode), graphql_name='code')
    max_outcomes = sgqlc.types.Field(Int, graphql_name='maxOutcomes')
    max_prediction_window_seconds = sgqlc.types.Field(Int, graphql_name='maxPredictionWindowSeconds')


class CreatePredictionEventPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'prediction_event')
    error = sgqlc.types.Field(CreatePredictionEventError, graphql_name='error')
    prediction_event = sgqlc.types.Field('PredictionEvent', graphql_name='predictionEvent')


class CreateRaidError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateRaidErrorCode), graphql_name='code')


class CreateRaidPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'raid')
    error = sgqlc.types.Field(CreateRaidError, graphql_name='error')
    raid = sgqlc.types.Field('Raid', graphql_name='raid')


class CreateRewardedVideoTokenPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('token',)
    token = sgqlc.types.Field(String, graphql_name='token')


class CreateRoomError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'max_allowed_rooms', 'max_length', 'min_length')
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateRoomErrorCode), graphql_name='code')
    max_allowed_rooms = sgqlc.types.Field(Int, graphql_name='maxAllowedRooms')
    max_length = sgqlc.types.Field(Int, graphql_name='maxLength')
    min_length = sgqlc.types.Field(Int, graphql_name='minLength')


class CreateRoomPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'room')
    error = sgqlc.types.Field(CreateRoomError, graphql_name='error')
    room = sgqlc.types.Field('Room', graphql_name='room')


class CreateSchedulePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    error = sgqlc.types.Field(CreateScheduleError, graphql_name='error')


class CreateScheduleSegmentError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'conflicting_segment', 'maximum', 'minimum')
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateScheduleSegmentErrorCode), graphql_name='code')
    conflicting_segment = sgqlc.types.Field('ScheduleSegment', graphql_name='conflictingSegment')
    maximum = sgqlc.types.Field(Int, graphql_name='maximum')
    minimum = sgqlc.types.Field(Int, graphql_name='minimum')


class CreateScheduleSegmentPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'schedule')
    error = sgqlc.types.Field(CreateScheduleSegmentError, graphql_name='error')
    schedule = sgqlc.types.Field('Schedule', graphql_name='schedule')


class CreateSocialMediaPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    error = sgqlc.types.Field(CreateSocialMediaError, graphql_name='error')


class CreateSquadStreamInvitationError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateSquadStreamInvitationErrorCode), graphql_name='code')


class CreateSquadStreamInvitationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'squad_stream')
    error = sgqlc.types.Field(CreateSquadStreamInvitationError, graphql_name='error')
    squad_stream = sgqlc.types.Field('SquadStream', graphql_name='squadStream')


class CreateStuccoPackPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('stucco_pack',)
    stucco_pack = sgqlc.types.Field('StuccoPack', graphql_name='stuccoPack')


class CreateStuccoPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('stucco',)
    stucco = sgqlc.types.Field('Stucco', graphql_name='stucco')


class CreateUnbanRequestError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(CreateUnbanRequestErrorCode), graphql_name='code')


class CreateUnbanRequestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'unban_request')
    error = sgqlc.types.Field(CreateUnbanRequestError, graphql_name='error')
    unban_request = sgqlc.types.Field('UnbanRequest', graphql_name='unbanRequest')


class CreateVideoBookmarkError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(CreateVideoBookmarkErrorCode, graphql_name='code')


class CreateVideoBookmarkPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'video_bookmark')
    error = sgqlc.types.Field(CreateVideoBookmarkError, graphql_name='error')
    video_bookmark = sgqlc.types.Field('VideoBookmark', graphql_name='videoBookmark')


class CreateVideoCommentPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('comment',)
    comment = sgqlc.types.Field(sgqlc.types.non_null('VideoComment'), graphql_name='comment')


class CreateVideoHighlightPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('highlight',)
    highlight = sgqlc.types.Field(sgqlc.types.non_null('Video'), graphql_name='highlight')


class CreateVideoThumbnailUploadRequestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('url',)
    url = sgqlc.types.Field(String, graphql_name='url')


class CreatorBadgeFlair(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('setting', 'assets')
    setting = sgqlc.types.Field(CreatorBadgeFlairSetting, graphql_name='setting')
    assets = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CreatorBadgeFlairAsset')), graphql_name='assets')


class CreatorBadgeFlairAsset(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('tier', 'image1x_url', 'image2x_url', 'image4x_url')
    tier = sgqlc.types.Field(sgqlc.types.non_null(CreatorBadgeFlairTier), graphql_name='tier')
    image1x_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='image1xURL')
    image2x_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='image2xURL')
    image4x_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='image4xURL')


class CreatorCampArticle(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'locale', 'preview_image', 'preview_text', 'title', 'url', 'video_duration_seconds', 'video_url')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    locale = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='locale')
    preview_image = sgqlc.types.Field(String, graphql_name='previewImage')
    preview_text = sgqlc.types.Field(String, graphql_name='previewText')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    video_duration_seconds = sgqlc.types.Field(Int, graphql_name='videoDurationSeconds')
    video_url = sgqlc.types.Field(String, graphql_name='videoURL')


class CreatorCampCategory(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('articles', 'id', 'title')
    articles = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CreatorCampArticle))), graphql_name='articles')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class CreatorDashboard(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel_analytics',)
    channel_analytics = sgqlc.types.Field(ChannelAnalytics, graphql_name='channelAnalytics')


class CreatorGifting(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'subscriptions_balance')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    subscriptions_balance = sgqlc.types.Field(Int, graphql_name='subscriptionsBalance')


class CreatorMetricsByInterval(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items',)
    items = sgqlc.types.Field(sgqlc.types.list_of('CreatorMetricsByIntervalItem'), graphql_name='items')


class CreatorMetricsByIntervalItem(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('ad_breaks_in_seconds_string', 'ad_seconds_per_hour', 'average_viewers', 'clip_views_string', 'clips_created_string', 'follows_string', 'host_raids_percentage', 'live_views_string', 'max_viewers_string', 'minutes_streamed_string', 'minutes_watched_string', 'new_subscriptions_string', 'promotion_click_string', 'promotion_display_string', 'timestamp', 'total_chat_messages_string', 'total_chatters_string', 'unique_viewers_string')
    ad_breaks_in_seconds_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='adBreaksInSecondsString')
    ad_seconds_per_hour = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='adSecondsPerHour')
    average_viewers = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='averageViewers')
    clip_views_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='clipViewsString')
    clips_created_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='clipsCreatedString')
    follows_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='followsString')
    host_raids_percentage = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='hostRaidsPercentage')
    live_views_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='liveViewsString')
    max_viewers_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='maxViewersString')
    minutes_streamed_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='minutesStreamedString')
    minutes_watched_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='minutesWatchedString')
    new_subscriptions_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='newSubscriptionsString')
    promotion_click_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='promotionClickString')
    promotion_display_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='promotionDisplayString')
    timestamp = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='timestamp')
    total_chat_messages_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='totalChatMessagesString')
    total_chatters_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='totalChattersString')
    unique_viewers_string = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='uniqueViewersString')


class CreatorOnboardingContent(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('first_seen_at', 'id')
    first_seen_at = sgqlc.types.Field(Time, graphql_name='firstSeenAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class CreatorReferralLink(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('description', 'id', 'image_url', 'title', 'url')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class CreatorReferralLinkConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CreatorReferralLinkEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class CreatorReferralLinkEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(CreatorReferralLink), graphql_name='node')


class CreatorReferralLinkStat(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('link', 'referral_count')
    link = sgqlc.types.Field(sgqlc.types.non_null(CreatorReferralLink), graphql_name='link')
    referral_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='referralCount')


class CreatorReferralSummary(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('average_referrals', 'days', 'total_referrals', 'trend')
    average_referrals = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='averageReferrals')
    days = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('CreatorReferralSummaryDay'))), graphql_name='days')
    total_referrals = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalReferrals')
    trend = sgqlc.types.Field(sgqlc.types.non_null(CreatorReferralTrend), graphql_name='trend')


class CreatorReferralSummaryDay(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('date', 'link_stats', 'referral_count_sum')
    date = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='date')
    link_stats = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CreatorReferralLinkStat))), graphql_name='linkStats')
    referral_count_sum = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='referralCountSum')


class CreatorTimeseriesItem(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('minutes_streamed', 'timestamp', 'value')
    minutes_streamed = sgqlc.types.Field(Int, graphql_name='minutesStreamed')
    timestamp = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='timestamp')
    value = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='value')


class CreatorTimeseriesMetric(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'total')
    items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CreatorTimeseriesItem)), graphql_name='items')
    total = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='total')


class CreatorTimeseriesMetrics(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('ad_breaks_in_seconds', 'ad_time_per_hour', 'average_viewers', 'chat_messages', 'clip_views', 'clips_created', 'follows', 'granularity', 'host_raid_viewers', 'live_views', 'max_viewers', 'minutes_watched', 'new_subscriptions', 'promotion_click', 'promotion_display', 'time_streamed', 'unique_chatters', 'unique_viewers')
    ad_breaks_in_seconds = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='adBreaksInSeconds')
    ad_time_per_hour = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='adTimePerHour')
    average_viewers = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='averageViewers')
    chat_messages = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='chatMessages')
    clip_views = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='clipViews')
    clips_created = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='clipsCreated')
    follows = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='follows')
    granularity = sgqlc.types.Field(sgqlc.types.non_null(Granularity), graphql_name='granularity')
    host_raid_viewers = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='hostRaidViewers')
    live_views = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='liveViews')
    max_viewers = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='maxViewers')
    minutes_watched = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='minutesWatched')
    new_subscriptions = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='newSubscriptions')
    promotion_click = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='promotionClick')
    promotion_display = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='promotionDisplay')
    time_streamed = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='timeStreamed')
    unique_chatters = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='uniqueChatters')
    unique_viewers = sgqlc.types.Field(sgqlc.types.non_null(CreatorTimeseriesMetric), graphql_name='uniqueViewers')


class CreditChargeModel(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('amount', 'credit_type')
    amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='amount')
    credit_type = sgqlc.types.Field(sgqlc.types.non_null(CreditType), graphql_name='creditType')


class CurrentPrimePayout(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('past_cycle_payout_amount', 'this_cycle_payout_amount', 'total_payout_amount')
    past_cycle_payout_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='pastCyclePayoutAmount')
    this_cycle_payout_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='thisCyclePayoutAmount')
    total_payout_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalPayoutAmount')


class DashboardActivityFeedActivity(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('alert_status', 'id', 'timestamp')
    alert_status = sgqlc.types.Field(DashboardActivityFeedActivityAlertStatus, graphql_name='alertStatus')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    timestamp = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='timestamp')


class DashboardActivityFeedActivityConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('DashboardActivityFeedActivityEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class DashboardActivityFeedActivityEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(DashboardActivityFeedActivity), graphql_name='node')


class DashboardAlertQueueActivityConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('DashboardAlertQueueActivityEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class DashboardAlertQueueActivityEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(DashboardActivityFeedActivity), graphql_name='node')


class DashboardAlertQueuePreferences(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_dndmode_enabled', 'last_modified', 'should_hide_bits', 'should_hide_follows', 'should_hide_gift_subscriptions', 'should_hide_hosts', 'should_hide_raids', 'should_hide_subscriptions')
    is_dndmode_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isDNDModeEnabled')
    last_modified = sgqlc.types.Field(Time, graphql_name='lastModified')
    should_hide_bits = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldHideBits')
    should_hide_follows = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldHideFollows')
    should_hide_gift_subscriptions = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldHideGiftSubscriptions')
    should_hide_hosts = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldHideHosts')
    should_hide_raids = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldHideRaids')
    should_hide_subscriptions = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldHideSubscriptions')


class DateToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('time',)
    time = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='time')


class DeactivateExtensionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('installed_extension',)
    installed_extension = sgqlc.types.Field(sgqlc.types.non_null('ExtensionInstallation'), graphql_name='installedExtension')


class DeclineOrganizationInviteError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(DeclineOrganizationInviteErrorCode), graphql_name='code')


class DeclineOrganizationInvitePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(DeclineOrganizationInviteError, graphql_name='error')


class DeferredPrimePayout(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('total_payout_amount',)
    total_payout_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalPayoutAmount')


class DeleteAllChannelVideosPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('status',)
    status = sgqlc.types.Field('DeleteAllChannelVideosStatus', graphql_name='status')


class DeleteAllChannelVideosStatus(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(DeleteAllChannelVideosStatusCode), graphql_name='code')


class DeleteBitsBadgeTierEmoticonPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('deleted_at',)
    deleted_at = sgqlc.types.Field(Time, graphql_name='deletedAt')


class DeleteCelebrationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(CelebrationError, graphql_name='error')


class DeleteChannelBlockedTermError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(DeleteChannelBlockedTermErrorCode), graphql_name='code')


class DeleteChannelBlockedTermPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('deleted_at', 'error', 'phrases')
    deleted_at = sgqlc.types.Field(Time, graphql_name='deletedAt')
    error = sgqlc.types.Field(DeleteChannelBlockedTermError, graphql_name='error')
    phrases = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='phrases')


class DeleteChannelClipsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class DeleteChannelPermittedTermError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(DeleteChannelPermittedTermErrorCode), graphql_name='code')


class DeleteChannelPermittedTermPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('deleted_at', 'error', 'phrases')
    deleted_at = sgqlc.types.Field(Time, graphql_name='deletedAt')
    error = sgqlc.types.Field(DeleteChannelPermittedTermError, graphql_name='error')
    phrases = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='phrases')


class DeleteChatMessagePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('message', 'response_code')
    message = sgqlc.types.Field('DeletedMessage', graphql_name='message')
    response_code = sgqlc.types.Field(sgqlc.types.non_null(DeleteChatMessageStatusCode), graphql_name='responseCode')


class DeleteCheermoteTierError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(DeleteCheermoteTierErrorCode), graphql_name='code')


class DeleteCheermoteTierPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('deleted_at', 'error')
    deleted_at = sgqlc.types.Field(Time, graphql_name='deletedAt')
    error = sgqlc.types.Field(DeleteCheermoteTierError, graphql_name='error')


class DeleteClipsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('clips', 'count')
    clips = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(Clip)), graphql_name='clips')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class DeleteCollectionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('collection',)
    collection = sgqlc.types.Field(sgqlc.types.non_null(Collection), graphql_name='collection')


class DeleteCommunityPointsCommunityGoalError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(DeleteCommunityPointsCommunityGoalErrorCode), graphql_name='code')


class DeleteCommunityPointsCommunityGoalPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'goal')
    error = sgqlc.types.Field(DeleteCommunityPointsCommunityGoalError, graphql_name='error')
    goal = sgqlc.types.Field(CommunityPointsCommunityGoal, graphql_name='goal')


class DeleteCommunityPointsCustomRewardError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(DeleteCommunityPointsCustomRewardErrorCode), graphql_name='code')


class DeleteCommunityPointsCustomRewardPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'reward')
    error = sgqlc.types.Field(DeleteCommunityPointsCustomRewardError, graphql_name='error')
    reward = sgqlc.types.Field(CommunityPointsCustomReward, graphql_name='reward')


class DeleteCompetitionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field(Competition, graphql_name='competition')
    error = sgqlc.types.Field(CompetitionError, graphql_name='error')


class DeleteContentTagsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content',)
    content = sgqlc.types.Field('TaggedContent', graphql_name='content')


class DeleteDefaultPaymentMethodPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('updated_at', 'user')
    updated_at = sgqlc.types.Field(Time, graphql_name='updatedAt')
    user = sgqlc.types.Field('User', graphql_name='user')


class DeleteDeviceTokenPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('device_token',)
    device_token = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='deviceToken')


class DeleteDropCampaignPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field('DropsError', graphql_name='error')


class DeleteDropPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field('DropsError', graphql_name='error')


class DeleteEmoteError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(DeleteEmoteErrorCode), graphql_name='code')


class DeleteEmotePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(DeleteEmoteError, graphql_name='error')


class DeleteExtensionImagePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'manifest')
    error = sgqlc.types.Field(DeleteExtensionImageError, graphql_name='error')
    manifest = sgqlc.types.Field('ExtensionManifest', graphql_name='manifest')


class DeleteExtensionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(DeleteExtensionError, graphql_name='error')


class DeleteExtensionSecretsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(DeleteExtensionSecretsError, graphql_name='error')


class DeleteLoyaltyBadgePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('badge',)
    badge = sgqlc.types.Field('LoyaltyBadge', graphql_name='badge')


class DeleteModeratorCommentPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('comment',)
    comment = sgqlc.types.Field('ModLogsComment', graphql_name='comment')


class DeleteMultiviewContentAttributesPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('failed_deletes', 'succeeded_deletes')
    failed_deletes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('MultiviewContentAttribute'))), graphql_name='failedDeletes')
    succeeded_deletes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('MultiviewContentAttribute'))), graphql_name='succeededDeletes')


class DeleteNotificationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('notification',)
    notification = sgqlc.types.Field(sgqlc.types.non_null('OnsiteNotification'), graphql_name='notification')


class DeletePanelPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('panel',)
    panel = sgqlc.types.Field(sgqlc.types.non_null('Panel'), graphql_name='panel')


class DeletePostPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('post',)
    post = sgqlc.types.Field('Post', graphql_name='post')


class DeleteRecommendationFeedbackPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('feedback_id',)
    feedback_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='feedbackID')


class DeleteRoomMessagePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('message',)
    message = sgqlc.types.Field('RoomMessage', graphql_name='message')


class DeleteRoomPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('room',)
    room = sgqlc.types.Field('Room', graphql_name='room')


class DeleteSchedulePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    error = sgqlc.types.Field(DeleteScheduleError, graphql_name='error')


class DeleteScheduleSegmentPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'schedule')
    error = sgqlc.types.Field(DeleteScheduleSegmentError, graphql_name='error')
    schedule = sgqlc.types.Field('Schedule', graphql_name='schedule')


class DeleteSocialMediaPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel',)
    channel = sgqlc.types.Field(Channel, graphql_name='channel')


class DeleteSquadStreamInvitationError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(DeleteSquadStreamInvitationErrorCode), graphql_name='code')


class DeleteSquadStreamInvitationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'invitation')
    error = sgqlc.types.Field(DeleteSquadStreamInvitationError, graphql_name='error')
    invitation = sgqlc.types.Field('SquadStreamInvitation', graphql_name='invitation')


class DeleteStreamAuthorizedUserError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(DeleteStreamAuthorizedUserErrorCode), graphql_name='code')


class DeleteStreamAuthorizedUserPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    error = sgqlc.types.Field(AddStreamAuthorizedUserError, graphql_name='error')


class DeleteUserClipsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user_id',)
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class DeleteUserColorsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class DeleteVideoCommentPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('comment',)
    comment = sgqlc.types.Field(sgqlc.types.non_null('VideoComment'), graphql_name='comment')


class DeleteVideosPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('videos',)
    videos = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Video')), graphql_name='videos')


class DeletedMessage(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'id', 'sender')
    content = sgqlc.types.Field(sgqlc.types.non_null('RoomMessageContent'), graphql_name='content')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    sender = sgqlc.types.Field('User', graphql_name='sender')


class Density(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('ad_schedule', 'auto_ad_length_seconds', 'auto_ad_period_minutes', 'is_ccp', 'minutes_elapsed', 'should_enforce_contract', 'target_ad_minutes', 'total_ad_seconds')
    ad_schedule = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AdSlot)), graphql_name='adSchedule')
    auto_ad_length_seconds = sgqlc.types.Field(Int, graphql_name='autoAdLengthSeconds')
    auto_ad_period_minutes = sgqlc.types.Field(Int, graphql_name='autoAdPeriodMinutes')
    is_ccp = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCCP')
    minutes_elapsed = sgqlc.types.Field(Int, graphql_name='minutesElapsed')
    should_enforce_contract = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldEnforceContract')
    target_ad_minutes = sgqlc.types.Field(Int, graphql_name='targetAdMinutes')
    total_ad_seconds = sgqlc.types.Field(Int, graphql_name='totalAdSeconds')


class DenyRejectedChatMessagePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('message',)
    message = sgqlc.types.Field('RejectedChatMessage', graphql_name='message')


class DenyRejectedCheerPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class DenyUnbanRequestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'unban_request')
    error = sgqlc.types.Field('UnbanRequestError', graphql_name='error')
    unban_request = sgqlc.types.Field('UnbanRequest', graphql_name='unbanRequest')


class DeselectChannelBadgePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class DeselectGlobalBadgePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class Directory(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('avatar_url', 'broadcasters_count', 'cover_url', 'directory_type', 'display_name', 'followers_count', 'id', 'name', 'streams', 'viewers_count')
    avatar_url = sgqlc.types.Field(String, graphql_name='avatarURL', args=sgqlc.types.ArgDict((
        ('width', sgqlc.types.Arg(Int, graphql_name='width', default=None)),
        ('height', sgqlc.types.Arg(Int, graphql_name='height', default=None)),
))
    )
    broadcasters_count = sgqlc.types.Field(Int, graphql_name='broadcastersCount')
    cover_url = sgqlc.types.Field(String, graphql_name='coverURL', args=sgqlc.types.ArgDict((
        ('width', sgqlc.types.Arg(Int, graphql_name='width', default=None)),
        ('height', sgqlc.types.Arg(Int, graphql_name='height', default=None)),
))
    )
    directory_type = sgqlc.types.Field(DirectoryType, graphql_name='directoryType')
    display_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='displayName')
    followers_count = sgqlc.types.Field(Int, graphql_name='followersCount')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    streams = sgqlc.types.Field('StreamConnection', graphql_name='streams', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('languages', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='languages', default=None)),
        ('tags', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tags', default=None)),
))
    )
    viewers_count = sgqlc.types.Field(Int, graphql_name='viewersCount')


class DirectoryConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('DirectoryEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class DirectoryEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    node = sgqlc.types.Field(Directory, graphql_name='node')


class DisablePrerollsAbility(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('disable_prerolls_time_earned', 'has_disable_prerolls_ability_access', 'has_disable_prerolls_ability_enabled', 'has_disable_prerolls_notifications_enabled', 'max_disable_prerolls_capacity')
    disable_prerolls_time_earned = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('DisablePrerollsFreeTime')), graphql_name='disablePrerollsTimeEarned')
    has_disable_prerolls_ability_access = sgqlc.types.Field(Boolean, graphql_name='hasDisablePrerollsAbilityAccess')
    has_disable_prerolls_ability_enabled = sgqlc.types.Field(Boolean, graphql_name='hasDisablePrerollsAbilityEnabled')
    has_disable_prerolls_notifications_enabled = sgqlc.types.Field(Boolean, graphql_name='hasDisablePrerollsNotificationsEnabled')
    max_disable_prerolls_capacity = sgqlc.types.Field(Int, graphql_name='maxDisablePrerollsCapacity')


class DisablePrerollsFreeTime(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('midroll_length_seconds', 'preroll_free_time_seconds')
    midroll_length_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='midrollLengthSeconds')
    preroll_free_time_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='prerollFreeTimeSeconds')


class DisableTwoFactorError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'message')
    code = sgqlc.types.Field(sgqlc.types.non_null(DisableTwoFactorErrorCode), graphql_name='code')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')


class DisableTwoFactorPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(DisableTwoFactorError, graphql_name='error')


class DisableUserAccountError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(DisableUserAccountErrorCode), graphql_name='code')


class DisableUserAccountPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'user')
    error = sgqlc.types.Field(DisableUserAccountError, graphql_name='error')
    user = sgqlc.types.Field('User', graphql_name='user')


class DiscountBreakdown(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('price', 'tax', 'total')
    price = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='price')
    tax = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='tax')
    total = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='total')


class DismissFriendRecommendationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class DismissRitualTokenError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(DismissRitualTokenErrorCode), graphql_name='code')


class DismissRitualTokenPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'token')
    error = sgqlc.types.Field(DismissRitualTokenError, graphql_name='error')
    token = sgqlc.types.Field('RitualToken', graphql_name='token')


class DismissVideoSuggestedHighlightPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('video',)
    video = sgqlc.types.Field('Video', graphql_name='video')


class Drop(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('game', 'id', 'image_url', 'name')
    game = sgqlc.types.Field('Game', graphql_name='game')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class DropAccountLink(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('client_id', 'updated_at')
    client_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='clientID')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='updatedAt')


class DropAction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('claim_duration_seconds', 'description', 'id', 'type')
    claim_duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='claimDurationSeconds')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    type = sgqlc.types.Field(sgqlc.types.non_null(DropActionType), graphql_name='type')


class DropAward(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('awarded_at', 'node', 'reason')
    awarded_at = sgqlc.types.Field(Time, graphql_name='awardedAt')
    node = sgqlc.types.Field(Drop, graphql_name='node')
    reason = sgqlc.types.Field(String, graphql_name='reason')


class DropBenefit(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('account_link_url', 'created_at', 'description', 'entitlement_limit', 'game', 'id', 'image_asset_url', 'is_ios_available', 'name', 'owner', 'owner_organization')
    account_link_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='accountLinkURL')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    entitlement_limit = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='entitlementLimit')
    game = sgqlc.types.Field('Game', graphql_name='game')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_asset_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageAssetURL')
    is_ios_available = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isIosAvailable')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='owner')
    owner_organization = sgqlc.types.Field('Organization', graphql_name='ownerOrganization')


class DropBenefitEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('benefit', 'claim_count', 'entitlement_limit')
    benefit = sgqlc.types.Field(sgqlc.types.non_null(DropBenefit), graphql_name='benefit')
    claim_count = sgqlc.types.Field(Int, graphql_name='claimCount')
    entitlement_limit = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='entitlementLimit')


class DropCampaign(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('account_link_url', 'allow', 'applicable_channels', 'applicable_games', 'awardable_drops', 'block', 'connection_url', 'description', 'details_url', 'end_at', 'event_based_drops', 'game', 'id', 'image_url', 'is_available_to_all_channels', 'is_enabled', 'manual_trigger_based_drops', 'name', 'owner', 'self', 'start_at', 'status', 'test_viewers', 'time_based_drops', 'type')
    account_link_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='accountLinkURL')
    allow = sgqlc.types.Field('DropCampaignACL', graphql_name='allow')
    applicable_channels = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('User')), graphql_name='applicableChannels')
    applicable_games = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Game')), graphql_name='applicableGames')
    awardable_drops = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Drop)), graphql_name='awardableDrops')
    block = sgqlc.types.Field('DropCampaignACL', graphql_name='block')
    connection_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='connectionURL')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    details_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='detailsURL')
    end_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endAt')
    event_based_drops = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('EventBasedDrop')), graphql_name='eventBasedDrops')
    game = sgqlc.types.Field('Game', graphql_name='game')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    is_available_to_all_channels = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAvailableToAllChannels')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    manual_trigger_based_drops = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ManualTriggerBasedDrop')), graphql_name='manualTriggerBasedDrops')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner = sgqlc.types.Field('Organization', graphql_name='owner')
    self = sgqlc.types.Field(sgqlc.types.non_null('DropCampaignSelfEdge'), graphql_name='self')
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')
    status = sgqlc.types.Field(sgqlc.types.non_null(DropCampaignStatus), graphql_name='status')
    test_viewers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('User')), graphql_name='testViewers')
    time_based_drops = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TimeBasedDrop')), graphql_name='timeBasedDrops')
    type = sgqlc.types.Field(sgqlc.types.non_null(CampaignType), graphql_name='type')


class DropCampaignACL(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channels', 'is_enabled')
    channels = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Channel)), graphql_name='channels')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class DropCampaignSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_account_connected',)
    is_account_connected = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAccountConnected')


class DropChannelSetting(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_user_account_connected',)
    is_user_account_connected = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isUserAccountConnected')


class DropCurrentSession(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'current_minutes_watched', 'drop_id', 'game', 'required_minutes_watched')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    current_minutes_watched = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='currentMinutesWatched')
    drop_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='dropID')
    game = sgqlc.types.Field('Game', graphql_name='game')
    required_minutes_watched = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='requiredMinutesWatched')


class DropEligibility(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('claim_seconds_remaining', 'drop', 'drop_instance_id', 'drop_type', 'rewards', 'status')
    claim_seconds_remaining = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='claimSecondsRemaining')
    drop = sgqlc.types.Field(sgqlc.types.non_null('DropObject'), graphql_name='drop')
    drop_instance_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='dropInstanceID')
    drop_type = sgqlc.types.Field(sgqlc.types.non_null('DropType'), graphql_name='dropType')
    rewards = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('DropReward'))), graphql_name='rewards')
    status = sgqlc.types.Field(sgqlc.types.non_null(DropInstanceEligibilityStatus), graphql_name='status')


class DropEventCondition(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('key', 'operator', 'value')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    operator = sgqlc.types.Field(sgqlc.types.non_null(DropEventConditionOperator), graphql_name='operator')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')


class DropImageUploadPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('upload_id', 'upload_url')
    upload_id = sgqlc.types.Field(ID, graphql_name='uploadID')
    upload_url = sgqlc.types.Field(String, graphql_name='uploadURL')


class DropObject(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('account_link_url', 'actions', 'description', 'details_url', 'end_date', 'game', 'id', 'image_url', 'name', 'owner_id', 'owner_name', 'quest_name', 'rules', 'start_date')
    account_link_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='accountLinkURL')
    actions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(DropAction))), graphql_name='actions')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    details_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='detailsURL')
    end_date = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endDate')
    game = sgqlc.types.Field(sgqlc.types.non_null('Game'), graphql_name='game')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='ownerID')
    owner_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='ownerName')
    quest_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='questName')
    rules = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('DropRule'))), graphql_name='rules')
    start_date = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startDate')


class DropReward(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('account_link_url', 'availability', 'benefit', 'description', 'id', 'image_asset_url', 'is_ios_available', 'name', 'owner_id', 'owner_name')
    account_link_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='accountLinkURL')
    availability = sgqlc.types.Field(sgqlc.types.non_null(DropRewardAvailability), graphql_name='availability')
    benefit = sgqlc.types.Field(sgqlc.types.non_null(DropBenefit), graphql_name='benefit')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_asset_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageAssetURL')
    is_ios_available = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isIosAvailable')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='ownerID')
    owner_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='ownerName')


class DropRule(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('description', 'id')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class DropType(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('benefit_edges', 'campaign', 'end_at', 'id', 'name', 'start_at')
    benefit_edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DropBenefitEdge)), graphql_name='benefitEdges')
    campaign = sgqlc.types.Field(sgqlc.types.non_null(DropCampaign), graphql_name='campaign')
    end_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')


class DropsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'message')
    code = sgqlc.types.Field(sgqlc.types.non_null(DropsErrorCode), graphql_name='code')
    message = sgqlc.types.Field(String, graphql_name='message')


class EditRoomMessagePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('message',)
    message = sgqlc.types.Field('RoomMessage', graphql_name='message')


class EditableChannelConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('EditableChannelEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class EditableChannelEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('User', graphql_name='node')


class EditorConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('EditorEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class EditorEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'granted_at', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    granted_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='grantedAt')
    node = sgqlc.types.Field('User', graphql_name='node')


class EligiblePaymentMethod(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('availability_status', 'name')
    availability_status = sgqlc.types.Field(sgqlc.types.non_null(PaymentMethodAvailabilityStatus), graphql_name='availabilityStatus')
    name = sgqlc.types.Field(sgqlc.types.non_null(EligiblePaymentMethodName), graphql_name='name')


class EmbeddedEmote(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('emote_id', 'from_', 'id', 'set_id', 'to')
    emote_id = sgqlc.types.Field(ID, graphql_name='emoteID')
    from_ = sgqlc.types.Field(Int, graphql_name='from')
    id = sgqlc.types.Field(ID, graphql_name='id')
    set_id = sgqlc.types.Field(ID, graphql_name='setID')
    to = sgqlc.types.Field(Int, graphql_name='to')


class EmitCampaignDiscoveryEventPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_success',)
    is_success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSuccess')


class Emote(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('asset_type', 'bits_badge_tier_summary', 'created_at', 'id', 'modifiers', 'order', 'owner', 'set_id', 'state', 'subscription_product', 'subscription_summaries', 'subscription_tier', 'suffix', 'text', 'token', 'type')
    asset_type = sgqlc.types.Field(EmoteAssetType, graphql_name='assetType')
    bits_badge_tier_summary = sgqlc.types.Field('EmoteBitsBadgeTierSummary', graphql_name='bitsBadgeTierSummary')
    created_at = sgqlc.types.Field(Time, graphql_name='createdAt')
    id = sgqlc.types.Field(ID, graphql_name='id')
    modifiers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('EmoteModifier')), graphql_name='modifiers')
    order = sgqlc.types.Field(Int, graphql_name='order')
    owner = sgqlc.types.Field('User', graphql_name='owner')
    set_id = sgqlc.types.Field(ID, graphql_name='setID')
    state = sgqlc.types.Field(sgqlc.types.non_null(EmoteState), graphql_name='state')
    subscription_product = sgqlc.types.Field('SubscriptionProduct', graphql_name='subscriptionProduct')
    subscription_summaries = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SubscriptionSummary')), graphql_name='subscriptionSummaries')
    subscription_tier = sgqlc.types.Field(SubscriptionSummaryTier, graphql_name='subscriptionTier')
    suffix = sgqlc.types.Field(String, graphql_name='suffix')
    text = sgqlc.types.Field(String, graphql_name='text')
    token = sgqlc.types.Field(String, graphql_name='token')
    type = sgqlc.types.Field(EmoteType, graphql_name='type')


class EmoteBitsBadgeTierSummary(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('self', 'threshold')
    self = sgqlc.types.Field('EmoteBitsBadgeTierSummarySelfEdge', graphql_name='self')
    threshold = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='threshold')


class EmoteBitsBadgeTierSummarySelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_unlocked', 'number_of_bits_until_unlock')
    is_unlocked = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isUnlocked')
    number_of_bits_until_unlock = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='numberOfBitsUntilUnlock')


class EmoteImageUploadConfiguration(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('upload_id', 'upload_url')
    upload_id = sgqlc.types.Field(ID, graphql_name='uploadID')
    upload_url = sgqlc.types.Field(String, graphql_name='uploadURL')


class EmoteModifier(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'name', 'subscription_tier')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')
    name = sgqlc.types.Field(sgqlc.types.non_null(PermanentEmoteModifier), graphql_name='name')
    subscription_tier = sgqlc.types.Field(SubscriptionSummaryTier, graphql_name='subscriptionTier')


class EmoteModifierGroupPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('modifiers', 'product')
    modifiers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(PermanentEmoteModifier)), graphql_name='modifiers')
    product = sgqlc.types.Field('SubscriptionProduct', graphql_name='product')


class EmoteSet(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('emotes', 'id', 'owner')
    emotes = sgqlc.types.Field(sgqlc.types.list_of(Emote), graphql_name='emotes')
    id = sgqlc.types.Field(ID, graphql_name='id')
    owner = sgqlc.types.Field('User', graphql_name='owner')


class EmoteUploadConfiguration(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('image_upload_config1_x', 'image_upload_config2_x', 'image_upload_config4_x')
    image_upload_config1_x = sgqlc.types.Field(EmoteImageUploadConfiguration, graphql_name='imageUploadConfig1X')
    image_upload_config2_x = sgqlc.types.Field(EmoteImageUploadConfiguration, graphql_name='imageUploadConfig2X')
    image_upload_config4_x = sgqlc.types.Field(EmoteImageUploadConfiguration, graphql_name='imageUploadConfig4X')


class EmoticonPrefix(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_editable', 'name', 'state')
    is_editable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEditable')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    state = sgqlc.types.Field(sgqlc.types.non_null(EmoticonPrefixState), graphql_name='state')


class EndUseBitsInExtensionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('balance',)
    balance = sgqlc.types.Field(Int, graphql_name='balance')


class EndorsedChannelConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('EndorsedChannelEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class EndorsedChannelEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node', 'tracking_id')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Channel), graphql_name='node')
    tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='trackingID')


class EnhancedExperiencesClient(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'name', 'onboarded_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    onboarded_at = sgqlc.types.Field(Time, graphql_name='onboardedAt')


class EpisodeDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('duration_seconds', 'episode', 'season', 'series')
    duration_seconds = sgqlc.types.Field(Int, graphql_name='durationSeconds')
    episode = sgqlc.types.Field(Int, graphql_name='episode')
    season = sgqlc.types.Field(Int, graphql_name='season')
    series = sgqlc.types.Field(String, graphql_name='series')


class EventNotificationSetting(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('category', 'platforms')
    category = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='category')
    platforms = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PlatformEventSetting'))), graphql_name='platforms')


class Experiment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('promoted_stream',)
    promoted_stream = sgqlc.types.Field('Stream', graphql_name='promotedStream', args=sgqlc.types.ArgDict((
        ('promo_location', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='promoLocation', default=None)),
))
    )


class ExpiredSubscription(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel_owner', 'id', 'product', 'tenure')
    channel_owner = sgqlc.types.Field('User', graphql_name='channelOwner')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    product = sgqlc.types.Field('SubscriptionProduct', graphql_name='product')
    tenure = sgqlc.types.Field(sgqlc.types.non_null('SubscriptionTenure'), graphql_name='tenure')


class ExpiredSubscriptionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExpiredSubscriptionEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ExpiredSubscriptionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(ExpiredSubscription, graphql_name='node')


class ExportVideoToYoutubePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('video',)
    video = sgqlc.types.Field('Video', graphql_name='video')


class Extension(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('anchor', 'asset_urls', 'author_name', 'bits_support_level', 'categories', 'challenge_condition', 'challenge_condition_participants', 'challenge_conditions', 'client_id', 'config_url', 'content_matched_games', 'description', 'games', 'has_chat_support', 'has_identity_linking', 'icon_urls', 'id', 'is_bits_enabled', 'live_config_url', 'name', 'panel_height', 'privacy_policy_url', 'screenshot_urls', 'self', 'sku', 'state', 'subscriptions_support_level', 'summary', 'support_email', 'terms_url', 'vendor_code', 'version', 'viewer_url', 'views', 'whitelisted_config_urls', 'whitelisted_panel_urls')
    anchor = sgqlc.types.Field(sgqlc.types.non_null(ExtensionAnchor), graphql_name='anchor')
    asset_urls = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='assetURLs')
    author_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='authorName')
    bits_support_level = sgqlc.types.Field(sgqlc.types.non_null(ExtensionBitsSupportLevel), graphql_name='bitsSupportLevel')
    categories = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExtensionCategory'))), graphql_name='categories')
    challenge_condition = sgqlc.types.Field(ChallengeCondition, graphql_name='challengeCondition', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ExtensionChallengeConditionByIDInput), graphql_name='input', default=None)),
))
    )
    challenge_condition_participants = sgqlc.types.Field('ExtensionChallengeConditionParticipantConnection', graphql_name='challengeConditionParticipants', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=100)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ExtensionChallengeConditionParticipantsInput), graphql_name='input', default=None)),
))
    )
    challenge_conditions = sgqlc.types.Field('ExtensionChallengeConditionConnection', graphql_name='challengeConditions', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=100)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ExtensionChallengeConditionsInput), graphql_name='input', default=None)),
))
    )
    client_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='clientID')
    config_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='configURL')
    content_matched_games = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Game')), graphql_name='contentMatchedGames')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    games = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Game')), graphql_name='games')
    has_chat_support = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasChatSupport')
    has_identity_linking = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasIdentityLinking')
    icon_urls = sgqlc.types.Field(sgqlc.types.non_null('ExtensionIcons'), graphql_name='iconURLs')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_bits_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isBitsEnabled')
    live_config_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='liveConfigURL')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    panel_height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='panelHeight')
    privacy_policy_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='privacyPolicyURL')
    screenshot_urls = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='screenshotURLs')
    self = sgqlc.types.Field('ExtensionSelfConnection', graphql_name='self')
    sku = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sku')
    state = sgqlc.types.Field(sgqlc.types.non_null(ExtensionState), graphql_name='state')
    subscriptions_support_level = sgqlc.types.Field(sgqlc.types.non_null(ExtensionSubscriptionsSupportLevel), graphql_name='subscriptionsSupportLevel')
    summary = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='summary')
    support_email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='supportEmail')
    terms_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='termsURL')
    vendor_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='vendorCode')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')
    viewer_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerURL')
    views = sgqlc.types.Field(sgqlc.types.non_null('ExtensionViews'), graphql_name='views')
    whitelisted_config_urls = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='whitelistedConfigURLs')
    whitelisted_panel_urls = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='whitelistedPanelURLs')


class ExtensionActivationConfig(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('anchor', 'slot', 'state', 'x', 'y')
    anchor = sgqlc.types.Field(ExtensionAnchor, graphql_name='anchor')
    slot = sgqlc.types.Field(String, graphql_name='slot')
    state = sgqlc.types.Field(sgqlc.types.non_null(ActivationState), graphql_name='state')
    x = sgqlc.types.Field(Int, graphql_name='x')
    y = sgqlc.types.Field(Int, graphql_name='y')


class ExtensionAssetManifest(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('asset_hash', 'base_uri', 'file_name', 'file_size', 'uploaded_at', 'uploader')
    asset_hash = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='assetHash')
    base_uri = sgqlc.types.Field(String, graphql_name='baseURI')
    file_name = sgqlc.types.Field(String, graphql_name='fileName')
    file_size = sgqlc.types.Field(String, graphql_name='fileSize')
    uploaded_at = sgqlc.types.Field(Time, graphql_name='uploadedAt')
    uploader = sgqlc.types.Field('User', graphql_name='uploader')


class ExtensionCapabilities(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bits_support_level', 'configuration_location', 'has_bits_support', 'has_chat_support', 'required_configuration', 'subscriptions_support_level', 'whitelists', 'will_request_identity_link')
    bits_support_level = sgqlc.types.Field(sgqlc.types.non_null(ExtensionBitsSupportLevel), graphql_name='bitsSupportLevel')
    configuration_location = sgqlc.types.Field(sgqlc.types.non_null(ExtensionConfigurationLocation), graphql_name='configurationLocation')
    has_bits_support = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasBitsSupport')
    has_chat_support = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasChatSupport')
    required_configuration = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='requiredConfiguration')
    subscriptions_support_level = sgqlc.types.Field(sgqlc.types.non_null(ExtensionSubscriptionsSupportLevel), graphql_name='subscriptionsSupportLevel')
    whitelists = sgqlc.types.Field('ExtensionWhitelists', graphql_name='whitelists')
    will_request_identity_link = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='willRequestIdentityLink')


class ExtensionCarousel(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('entries', 'id')
    entries = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExtensionCarouselEntry'))), graphql_name='entries')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class ExtensionCarouselEntry(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('click_through_url', 'id', 'image_url', 'title')
    click_through_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='clickThroughURL')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class ExtensionCategory(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('description', 'extensions', 'id', 'is_deleted', 'is_read_only', 'is_visible', 'name', 'order', 'slug', 'sort_key', 'type')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    extensions = sgqlc.types.Field('ExtensionConnection', graphql_name='extensions', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_deleted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isDeleted')
    is_read_only = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isReadOnly')
    is_visible = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isVisible')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    order = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='order')
    slug = sgqlc.types.Field(ID, graphql_name='slug')
    sort_key = sgqlc.types.Field(sgqlc.types.non_null(ExtensionCategorySortKey), graphql_name='sortKey')
    type = sgqlc.types.Field(sgqlc.types.non_null(ExtensionCategoryType), graphql_name='type')


class ExtensionCategoryConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExtensionCategoryEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class ExtensionCategoryEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(ExtensionCategory), graphql_name='node')


class ExtensionChallengeConditionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExtensionChallengeConditionEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ExtensionChallengeConditionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(ChallengeCondition), graphql_name='node')


class ExtensionChallengeConditionParticipantConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExtensionChallengeConditionParticipantEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ExtensionChallengeConditionParticipantEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(ChallengeConditionParticipant), graphql_name='node')


class ExtensionClient(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('assigned_billing_manager', 'created_at', 'id', 'name', 'organization', 'redirect_uri')
    assigned_billing_manager = sgqlc.types.Field('OrganizationMember', graphql_name='assignedBillingManager')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    organization = sgqlc.types.Field('Organization', graphql_name='organization')
    redirect_uri = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='redirectURI')


class ExtensionClientConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExtensionClientEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ExtensionClientEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(ExtensionClient), graphql_name='node')


class ExtensionComment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'id')
    content = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='content')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class ExtensionConfiguration(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcaster', 'developer', 'extension_id', 'global_')
    broadcaster = sgqlc.types.Field('ExtensionConfigurationRecord', graphql_name='broadcaster')
    developer = sgqlc.types.Field('ExtensionConfigurationRecord', graphql_name='developer')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')
    global_ = sgqlc.types.Field('ExtensionConfigurationRecord', graphql_name='global')


class ExtensionConfigurationRecord(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'version')
    content = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='content')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')


class ExtensionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExtensionEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class ExtensionDeveloperManifest(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('author_email', 'created_at', 'last_transitioned_at', 'testing_base_uri', 'version_state')
    author_email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='authorEmail')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='createdAt')
    last_transitioned_at = sgqlc.types.Field(Time, graphql_name='lastTransitionedAt')
    testing_base_uri = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='testingBaseURI')
    version_state = sgqlc.types.Field(sgqlc.types.non_null(ExtensionState), graphql_name='versionState')


class ExtensionDiscoveryManifest(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('author_name', 'categories', 'content_matched_games', 'description', 'games', 'icon_urls', 'name', 'privacy_policy_url', 'screenshot_urls', 'summary', 'support_email', 'terms_url', 'viewer_summary')
    author_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='authorName')
    categories = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ExtensionCategory))), graphql_name='categories')
    content_matched_games = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Game')), graphql_name='contentMatchedGames')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    games = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('Game'))), graphql_name='games')
    icon_urls = sgqlc.types.Field('ExtensionIcons', graphql_name='iconURLs')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    privacy_policy_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='privacyPolicyURL')
    screenshot_urls = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='screenshotURLs')
    summary = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='summary')
    support_email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='supportEmail')
    terms_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='termsURL')
    viewer_summary = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerSummary')


class ExtensionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Extension), graphql_name='node')


class ExtensionIcons(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('discovery_splash', 'square100', 'square24')
    discovery_splash = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='discoverySplash')
    square100 = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='square100')
    square24 = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='square24')


class ExtensionImageUploadResponse(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('upload_id', 'url')
    upload_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='uploadID')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class ExtensionInstallation(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('abilities', 'activation_config', 'extension', 'id', 'permitted_features', 'required_actions', 'self')
    abilities = sgqlc.types.Field(sgqlc.types.non_null('ExtensionInstallationAbilities'), graphql_name='abilities')
    activation_config = sgqlc.types.Field(sgqlc.types.non_null(ExtensionActivationConfig), graphql_name='activationConfig')
    extension = sgqlc.types.Field(sgqlc.types.non_null(Extension), graphql_name='extension')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    permitted_features = sgqlc.types.Field(sgqlc.types.non_null('ExtensionInstallationFeatureFlags'), graphql_name='permittedFeatures')
    required_actions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ExtensionRequiredAction')), graphql_name='requiredActions')
    self = sgqlc.types.Field('ExtensionInstallationSelfConnection', graphql_name='self')


class ExtensionInstallationAbilities(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_bits_enabled', 'is_chat_enabled', 'is_subscription_status_available')
    is_bits_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isBitsEnabled')
    is_chat_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isChatEnabled')
    is_subscription_status_available = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSubscriptionStatusAvailable')


class ExtensionInstallationDynamicManagement(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('game', 'is_managed')
    game = sgqlc.types.Field('Game', graphql_name='game')
    is_managed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isManaged')


class ExtensionInstallationFeatureFlags(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_retrieve_subscription_status', 'can_send_chat', 'can_use_bits', 'dynamic_management')
    can_retrieve_subscription_status = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canRetrieveSubscriptionStatus')
    can_send_chat = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canSendChat')
    can_use_bits = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canUseBits')
    dynamic_management = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ExtensionInstallationDynamicManagement)), graphql_name='dynamicManagement')


class ExtensionInstallationSelfConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('can_activate',)
    can_activate = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canActivate')


class ExtensionInstallationSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('installation', 'token', 'configuration', 'issued_at')
    installation = sgqlc.types.Field(ExtensionInstallation, graphql_name='installation')
    token = sgqlc.types.Field('ExtensionToken', graphql_name='token')
    configuration = sgqlc.types.Field(ExtensionConfiguration, graphql_name='configuration')
    issued_at = sgqlc.types.Field(Time, graphql_name='issuedAt')


class ExtensionLinkUserError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(ExtensionLinkUserErrorCode, graphql_name='code')


class ExtensionLinkUserPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'token')
    error = sgqlc.types.Field(ExtensionLinkUserError, graphql_name='error')
    token = sgqlc.types.Field('ExtensionToken', graphql_name='token')


class ExtensionManifest(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('asset_manifest', 'capabilities', 'developer_manifest', 'discovery_manifest', 'id', 'version', 'views')
    asset_manifest = sgqlc.types.Field(sgqlc.types.non_null(ExtensionAssetManifest), graphql_name='assetManifest')
    capabilities = sgqlc.types.Field(sgqlc.types.non_null(ExtensionCapabilities), graphql_name='capabilities')
    developer_manifest = sgqlc.types.Field(sgqlc.types.non_null(ExtensionDeveloperManifest), graphql_name='developerManifest')
    discovery_manifest = sgqlc.types.Field(sgqlc.types.non_null(ExtensionDiscoveryManifest), graphql_name='discoveryManifest')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')
    views = sgqlc.types.Field(sgqlc.types.non_null('ExtensionViews'), graphql_name='views')


class ExtensionManifestConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ExtensionManifestEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ExtensionManifestEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(ExtensionManifest, graphql_name='node')


class ExtensionManifestsSummary(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_deleted', 'manifests')
    is_deleted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isDeleted')
    manifests = sgqlc.types.Field(ExtensionManifestConnection, graphql_name='manifests')


class ExtensionRating(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'is_recommended', 'location')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_recommended = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRecommended')
    location = sgqlc.types.Field(sgqlc.types.non_null(ExtensionRatingLocation), graphql_name='location')


class ExtensionRatingsCSVReportPresignedURL(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('presigned_url',)
    presigned_url = sgqlc.types.Field(String, graphql_name='presignedURL')


class ExtensionRecommendation(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('extension',)
    extension = sgqlc.types.Field(Extension, graphql_name='extension')


class ExtensionRequiredAction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('redirect_uri', 'type')
    redirect_uri = sgqlc.types.Field(String, graphql_name='redirectURI')
    type = sgqlc.types.Field(sgqlc.types.non_null(ExtensionRequiredActionType), graphql_name='type')


class ExtensionSecret(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('active_at', 'content', 'expires_at')
    active_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='activeAt')
    content = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='content')
    expires_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='expiresAt')


class ExtensionSecretsInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'secrets')
    error = sgqlc.types.Field(GetExtensionSecretsError, graphql_name='error')
    secrets = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ExtensionSecret)), graphql_name='secrets')


class ExtensionSelfConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('can_install',)
    can_install = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canInstall')


class ExtensionToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('extension_id', 'jwt')
    extension_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='extensionID')
    jwt = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='jwt')


class ExtensionVersionDiscoveryManifest(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('discovery_manifest', 'id', 'version')
    discovery_manifest = sgqlc.types.Field(sgqlc.types.non_null(ExtensionDiscoveryManifest), graphql_name='discoveryManifest')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')


class ExtensionView(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('viewer_path', 'viewer_url')
    viewer_path = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerPath')
    viewer_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='viewerURL')


class ExtensionViews(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('component', 'config', 'hidden', 'live_config', 'mobile', 'panel', 'video_overlay')
    component = sgqlc.types.Field('ComponentView', graphql_name='component')
    config = sgqlc.types.Field('ConfigView', graphql_name='config')
    hidden = sgqlc.types.Field('HiddenView', graphql_name='hidden')
    live_config = sgqlc.types.Field('LiveConfigView', graphql_name='liveConfig')
    mobile = sgqlc.types.Field('MobileView', graphql_name='mobile')
    panel = sgqlc.types.Field('PanelView', graphql_name='panel')
    video_overlay = sgqlc.types.Field('VideoOverlayView', graphql_name='videoOverlay')


class ExtensionWhitelists(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcasters', 'config_urls', 'panel_urls', 'testers')
    broadcasters = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='broadcasters')
    config_urls = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='configURLs')
    panel_urls = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='panelURLs')
    testers = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ID))), graphql_name='testers')


class ExtensionZipUploadResponse(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('upload_id', 'url')
    upload_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='uploadID')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class ExternalChargeModel(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('provider', 'sku')
    provider = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='provider')
    sku = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sku')


class FeatureFlags(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_pulse_enabled',)
    is_pulse_enabled = sgqlc.types.Field(Boolean, graphql_name='isPulseEnabled')


class FeaturedContentSection(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'items')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('FeaturedItem')), graphql_name='items')


class FeaturedItem(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'description', 'id', 'image_url', 'is_scheduled', 'is_sponsored', 'priority_level', 'title')
    content = sgqlc.types.Field('FeaturedItemContent', graphql_name='content')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    is_scheduled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isScheduled')
    is_sponsored = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSponsored')
    priority_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='priorityLevel')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class FeaturedStream(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcaster', 'channel', 'description', 'description_html', 'image_url', 'is_scheduled', 'is_sponsored', 'priority_level', 'stream', 'title')
    broadcaster = sgqlc.types.Field('User', graphql_name='broadcaster')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    description = sgqlc.types.Field(String, graphql_name='description')
    description_html = sgqlc.types.Field(String, graphql_name='descriptionHTML')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    is_scheduled = sgqlc.types.Field(Boolean, graphql_name='isScheduled')
    is_sponsored = sgqlc.types.Field(Boolean, graphql_name='isSponsored')
    priority_level = sgqlc.types.Field(Int, graphql_name='priorityLevel')
    stream = sgqlc.types.Field('Stream', graphql_name='stream')
    title = sgqlc.types.Field(String, graphql_name='title')


class FeaturedVideo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('description', 'image_url', 'is_scheduled', 'is_sponsored', 'priority_level', 'title', 'video')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    is_scheduled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isScheduled')
    is_sponsored = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSponsored')
    priority_level = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='priorityLevel')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    video = sgqlc.types.Field('Video', graphql_name='video')


class Feed(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'items')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    items = sgqlc.types.Field('FeedItemConnection', graphql_name='items', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=5)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )


class FeedItem(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'reasons', 'tracking')
    content = sgqlc.types.Field('FeedItemContent', graphql_name='content')
    reasons = sgqlc.types.Field(sgqlc.types.list_of('FeedItemReason'), graphql_name='reasons')
    tracking = sgqlc.types.Field('FeedItemTracking', graphql_name='tracking')


class FeedItemConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of('FeedItemEdge'), graphql_name='edges')
    page_info = sgqlc.types.Field('PageInfo', graphql_name='pageInfo')


class FeedItemEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    node = sgqlc.types.Field(FeedItem, graphql_name='node')


class FeedItemReason(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('reason',)
    reason = sgqlc.types.Field(String, graphql_name='reason')


class FeedItemTracking(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('batch_id', 'card_impression_id', 'rec_generation_id', 'rec_generation_index')
    batch_id = sgqlc.types.Field(String, graphql_name='batchID')
    card_impression_id = sgqlc.types.Field(String, graphql_name='cardImpressionID')
    rec_generation_id = sgqlc.types.Field(String, graphql_name='recGenerationID')
    rec_generation_index = sgqlc.types.Field(Int, graphql_name='recGenerationIndex')


class FinalizeCompetitionLobbyPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field(Competition, graphql_name='competition')
    error = sgqlc.types.Field(CompetitionError, graphql_name='error')


class FirstCheerTutorial(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('has_abandoned', 'has_skipped')
    has_abandoned = sgqlc.types.Field(Boolean, graphql_name='hasAbandoned')
    has_skipped = sgqlc.types.Field(Boolean, graphql_name='hasSkipped')


class Follow(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('disable_notifications', 'followed_at', 'user')
    disable_notifications = sgqlc.types.Field(Boolean, graphql_name='disableNotifications')
    followed_at = sgqlc.types.Field(Time, graphql_name='followedAt')
    user = sgqlc.types.Field('User', graphql_name='user')


class FollowConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of('FollowEdge'), graphql_name='edges')
    page_info = sgqlc.types.Field('PageInfo', graphql_name='pageInfo')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class FollowEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'disable_notifications', 'followed_at', 'node', 'notification_settings')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    disable_notifications = sgqlc.types.Field(Boolean, graphql_name='disableNotifications')
    followed_at = sgqlc.types.Field(Time, graphql_name='followedAt')
    node = sgqlc.types.Field('User', graphql_name='node')
    notification_settings = sgqlc.types.Field(ChannelNotificationSettings, graphql_name='notificationSettings')


class FollowGamePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('game',)
    game = sgqlc.types.Field('Game', graphql_name='game')


class FollowUserError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(FollowUserErrorCode), graphql_name='code')


class FollowUserPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'follow')
    error = sgqlc.types.Field(FollowUserError, graphql_name='error')
    follow = sgqlc.types.Field(Follow, graphql_name='follow')


class FollowedGameConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('nodes',)
    nodes = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Game')), graphql_name='nodes')


class FollowedHostConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('nodes',)
    nodes = sgqlc.types.Field(sgqlc.types.list_of('User'), graphql_name='nodes')


class FollowedLiveUserConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'nodes', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('FollowedLiveUserEdge')), graphql_name='edges')
    nodes = sgqlc.types.Field(sgqlc.types.list_of('User'), graphql_name='nodes')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class FollowedLiveUserEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('User', graphql_name='node')


class FollowerConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of('FollowerEdge'), graphql_name='edges')
    page_info = sgqlc.types.Field('PageInfo', graphql_name='pageInfo')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class FollowerEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'disable_notifications', 'followed_at', 'node', 'notification_settings')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    disable_notifications = sgqlc.types.Field(Boolean, graphql_name='disableNotifications')
    followed_at = sgqlc.types.Field(Time, graphql_name='followedAt')
    node = sgqlc.types.Field('User', graphql_name='node')
    notification_settings = sgqlc.types.Field(ChannelNotificationSettings, graphql_name='notificationSettings')


class FriendConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of('FriendEdge'), graphql_name='edges')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class FriendEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('activity', 'availability', 'last_status_change_at', 'node')
    activity = sgqlc.types.Field(Activity, graphql_name='activity')
    availability = sgqlc.types.Field(sgqlc.types.non_null(Availability), graphql_name='availability')
    last_status_change_at = sgqlc.types.Field(Time, graphql_name='lastStatusChangeAt')
    node = sgqlc.types.Field('User', graphql_name='node')


class GameApplication(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('created_at', 'game', 'id', 'organization')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    game = sgqlc.types.Field(sgqlc.types.non_null('Game'), graphql_name='game')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    organization = sgqlc.types.Field(sgqlc.types.non_null('Organization'), graphql_name='organization')


class GameChangeMomentDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('game',)
    game = sgqlc.types.Field('Game', graphql_name='game')


class GameConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('GameEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class GameEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node', 'tracking_id')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    node = sgqlc.types.Field('Game', graphql_name='node')
    tracking_id = sgqlc.types.Field(ID, graphql_name='trackingID')


class GameFollow(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('followed_at', 'game', 'user')
    followed_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='followedAt')
    game = sgqlc.types.Field('Game', graphql_name='game')
    user = sgqlc.types.Field('User', graphql_name='user')


class GameOverlap(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('score', 'viewers_also_watch')
    score = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='score')
    viewers_also_watch = sgqlc.types.Field('Game', graphql_name='viewersAlsoWatch')


class GameSelfConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('follow', 'is_drops_linked')
    follow = sgqlc.types.Field(GameFollow, graphql_name='follow')
    is_drops_linked = sgqlc.types.Field(Boolean, graphql_name='isDropsLinked')


class GenerateExtensionRatingsCSVReportPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('report_filename',)
    report_filename = sgqlc.types.Field(String, graphql_name='reportFilename')


class GenerateSecondFactorQRCodeError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'message')
    code = sgqlc.types.Field(sgqlc.types.non_null(GenerateSecondFactorQRCodeErrorCode), graphql_name='code')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')


class GenerateSecondFactorQRCodePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'qr_code')
    error = sgqlc.types.Field(GenerateSecondFactorQRCodeError, graphql_name='error')
    qr_code = sgqlc.types.Field(String, graphql_name='qrCode')


class GenerateSubscribersCSVPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel_id',)
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')


class GetEmoteUploadConfigPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('upload_config', 'upload_config1x', 'upload_config2x', 'upload_config4x', 'upload_configs')
    upload_config = sgqlc.types.Field('UploadConfig', graphql_name='uploadConfig')
    upload_config1x = sgqlc.types.Field('UploadConfig', graphql_name='uploadConfig1x')
    upload_config2x = sgqlc.types.Field('UploadConfig', graphql_name='uploadConfig2x')
    upload_config4x = sgqlc.types.Field('UploadConfig', graphql_name='uploadConfig4x')
    upload_configs = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UploadConfig')), graphql_name='uploadConfigs')


class GlobalCheerConfig(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('display_config', 'groups')
    display_config = sgqlc.types.Field(sgqlc.types.non_null(CheermoteDisplayConfig), graphql_name='displayConfig')
    groups = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CheermoteGroup))), graphql_name='groups')


class GoLiveNotification(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('custom_text', 'engagements', 'follower_count', 'followers_notified', 'stream_start_time')
    custom_text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='customText')
    engagements = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='engagements')
    follower_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='followerCount')
    followers_notified = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='followersNotified')
    stream_start_time = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='streamStartTime')


class GoLiveNotificationConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('GoLiveNotificationEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class GoLiveNotificationEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(GoLiveNotification, graphql_name='node')


class GoLiveNotificationTimeseries(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'total')
    items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('GoLiveNotificationTimeseriesItem')), graphql_name='items')
    total = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='total')


class GoLiveNotificationTimeseriesItem(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('engagements', 'timestamp')
    engagements = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='engagements')
    timestamp = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='timestamp')


class GoRaidError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(GoRaidErrorCode), graphql_name='code')


class GoRaidPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'raid')
    error = sgqlc.types.Field(GoRaidError, graphql_name='error')
    raid = sgqlc.types.Field('Raid', graphql_name='raid')


class GrantVIPError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(GrantVIPErrorCode), graphql_name='code')


class GrantVIPPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error', 'grantee')
    channel = sgqlc.types.Field('User', graphql_name='channel')
    error = sgqlc.types.Field(GrantVIPError, graphql_name='error')
    grantee = sgqlc.types.Field('User', graphql_name='grantee')


class HearthsoneMomentGameMode(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('type', 'value')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    value = sgqlc.types.Field(String, graphql_name='value')


class HearthstoneMomentDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcaster_hero', 'game_mode', 'opponent_hero')
    broadcaster_hero = sgqlc.types.Field('HearthstoneMomentHero', graphql_name='broadcasterHero')
    game_mode = sgqlc.types.Field(HearthsoneMomentGameMode, graphql_name='gameMode')
    opponent_hero = sgqlc.types.Field('HearthstoneMomentHero', graphql_name='opponentHero')


class HearthstoneMomentHero(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('class_', 'id', 'name')
    class_ = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='class')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class HistoricalCompetitionLobby(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'winner')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    winner = sgqlc.types.Field(CompetitionLobbyParticipant, graphql_name='winner')


class HostConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('HostEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class HostEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('User', graphql_name='node')


class HostTargetChannelError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(HostTargetChannelErrorCode), graphql_name='code')


class HostTargetChannelPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'source', 'target')
    error = sgqlc.types.Field(HostTargetChannelError, graphql_name='error')
    source = sgqlc.types.Field('User', graphql_name='source')
    target = sgqlc.types.Field('User', graphql_name='target')


class HypeTrain(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('config', 'execution')
    config = sgqlc.types.Field('HypeTrainConfig', graphql_name='config')
    execution = sgqlc.types.Field('HypeTrainExecution', graphql_name='execution')


class HypeTrainConductor(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('participation', 'source', 'user')
    participation = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HypeTrainParticipation'))), graphql_name='participation')
    source = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainParticipationSource), graphql_name='source')
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')


class HypeTrainConductorReward(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('rewards', 'source', 'type')
    rewards = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HypeTrainReward'))), graphql_name='rewards')
    source = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainParticipationSource), graphql_name='source')
    type = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainConductorType), graphql_name='type')


class HypeTrainConfig(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('callout_emote', 'conductor_rewards', 'cooldown_period_minutes', 'difficulty', 'difficulty_settings', 'id', 'is_enabled', 'kickoff', 'level_duration_seconds', 'notification_thresholds', 'participation_conversion_rates', 'primary_hex_color', 'should_use_personalized_settings', 'will_use_creator_color')
    callout_emote = sgqlc.types.Field(Emote, graphql_name='calloutEmote')
    conductor_rewards = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(HypeTrainConductorReward))), graphql_name='conductorRewards')
    cooldown_period_minutes = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cooldownPeriodMinutes')
    difficulty = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainDifficulty), graphql_name='difficulty')
    difficulty_settings = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HypeTrainDifficultySettings'))), graphql_name='difficultySettings')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    kickoff = sgqlc.types.Field(sgqlc.types.non_null('HypeTrainKickoffConfig'), graphql_name='kickoff')
    level_duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='levelDurationSeconds')
    notification_thresholds = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HypeTrainNotificationThreshold'))), graphql_name='notificationThresholds')
    participation_conversion_rates = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HypeTrainParticipationConversionRate'))), graphql_name='participationConversionRates')
    primary_hex_color = sgqlc.types.Field(String, graphql_name='primaryHexColor')
    should_use_personalized_settings = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldUsePersonalizedSettings')
    will_use_creator_color = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='willUseCreatorColor')


class HypeTrainDifficultySettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('difficulty', 'levels')
    difficulty = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainDifficulty), graphql_name='difficulty')
    levels = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HypeTrainLevel'))), graphql_name='levels')


class HypeTrainExecution(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('conductors', 'config', 'end_reason', 'ended_at', 'expires_at', 'id', 'is_active', 'participations', 'progress', 'started_at', 'updated_at')
    conductors = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(HypeTrainConductor))), graphql_name='conductors')
    config = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainConfig), graphql_name='config')
    end_reason = sgqlc.types.Field(HypeTrainEndReason, graphql_name='endReason')
    ended_at = sgqlc.types.Field(Time, graphql_name='endedAt')
    expires_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='expiresAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_active = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isActive')
    participations = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HypeTrainParticipation'))), graphql_name='participations')
    progress = sgqlc.types.Field(sgqlc.types.non_null('HypeTrainProgress'), graphql_name='progress')
    started_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startedAt')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='updatedAt')


class HypeTrainKickoffConfig(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('events_threshold', 'min_points', 'period_seconds')
    events_threshold = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='eventsThreshold')
    min_points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='minPoints')
    period_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='periodSeconds')


class HypeTrainLevel(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('goal', 'id', 'rewards', 'value')
    goal = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='goal')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    rewards = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('HypeTrainReward'))), graphql_name='rewards')
    value = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='value')


class HypeTrainNotificationThreshold(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('action', 'source', 'value')
    action = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainParticipationAction), graphql_name='action')
    source = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainParticipationSource), graphql_name='source')
    value = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='value')


class HypeTrainParticipation(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('action', 'quantity', 'source')
    action = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainParticipationAction), graphql_name='action')
    quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='quantity')
    source = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainParticipationSource), graphql_name='source')


class HypeTrainParticipationConversionRate(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('action', 'source', 'value')
    action = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainParticipationAction), graphql_name='action')
    source = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainParticipationSource), graphql_name='source')
    value = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='value')


class HypeTrainProgress(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('goal', 'level', 'progression', 'remaining_seconds', 'total')
    goal = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='goal')
    level = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainLevel), graphql_name='level')
    progression = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='progression')
    remaining_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='remainingSeconds')
    total = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='total')


class HypeTrainReward(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('id', 'type')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    type = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainRewardType), graphql_name='type')


class Image(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('height', 'image_url', 'url', 'width')
    height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='height')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url', args=sgqlc.types.ArgDict((
        ('width', sgqlc.types.Arg(Int, graphql_name='width', default=None)),
        ('height', sgqlc.types.Arg(Int, graphql_name='height', default=None)),
))
    )
    width = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='width')


class IncomingFriendRequestConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'newest_edge', 'page_info', 'total_count', 'total_unread_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('IncomingFriendRequestEdge'))), graphql_name='edges')
    newest_edge = sgqlc.types.Field('IncomingFriendRequestEdge', graphql_name='newestEdge')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    total_unread_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalUnreadCount')


class IncomingFriendRequestEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('created_at', 'cursor', 'node')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('User', graphql_name='node')


class IngestFrameDrop(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('duration_seconds', 'started_at')
    duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='durationSeconds')
    started_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startedAt')


class IngestSession(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcast_format', 'ingest_host', 'ingest_proxy', 'stream_delay_seconds', 'stream_down_at', 'stream_up_at')
    broadcast_format = sgqlc.types.Field(sgqlc.types.non_null(BroadcastFormat), graphql_name='broadcastFormat')
    ingest_host = sgqlc.types.Field(String, graphql_name='ingestHost')
    ingest_proxy = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='ingestProxy')
    stream_delay_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='streamDelaySeconds')
    stream_down_at = sgqlc.types.Field(Time, graphql_name='streamDownAt')
    stream_up_at = sgqlc.types.Field(Time, graphql_name='streamUpAt')


class IngestStarvationEvent(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('duration_seconds', 'started_at')
    duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='durationSeconds')
    started_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startedAt')


class IngestStreamHealth(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('reasons', 'status')
    reasons = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(IngestStreamHealthReason)), graphql_name='reasons')
    status = sgqlc.types.Field(sgqlc.types.non_null(IngestStreamHealthStatus), graphql_name='status')


class InstallExtensionError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'installation_id')
    code = sgqlc.types.Field(sgqlc.types.non_null(InstallExtensionErrorCode), graphql_name='code')
    installation_id = sgqlc.types.Field(ID, graphql_name='installationID')


class InstallExtensionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'installed_extension')
    error = sgqlc.types.Field(InstallExtensionError, graphql_name='error')
    installed_extension = sgqlc.types.Field(ExtensionInstallation, graphql_name='installedExtension')


class IntegerToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('value',)
    value = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='value')


class InternalChargeModel(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('plan', 'preview_price', 'price_id', 'self')
    plan = sgqlc.types.Field(ChargeModelPlan, graphql_name='plan')
    preview_price = sgqlc.types.Field('PriceInfo', graphql_name='previewPrice')
    price_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='priceID')
    self = sgqlc.types.Field('InternalChargeModelSelfEdge', graphql_name='self')


class InternalChargeModelSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('checkout_price',)
    checkout_price = sgqlc.types.Field('ProductPurchase', graphql_name='checkoutPrice', args=sgqlc.types.ArgDict((
        ('quantity', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='quantity', default=None)),
        ('payment_provider', sgqlc.types.Arg(sgqlc.types.non_null(PaymentProvider), graphql_name='paymentProvider', default=None)),
))
    )


class InterruptScheduleError(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(InterruptScheduleErrorCode), graphql_name='code')


class InterruptSchedulePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'schedule')
    error = sgqlc.types.Field(InterruptScheduleError, graphql_name='error')
    schedule = sgqlc.types.Field('Schedule', graphql_name='schedule')


class InvalidateAuthenticatedSessionsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class InvalidateEmailAssociationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('has_succeeded',)
    has_succeeded = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasSucceeded')


class Inventory(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_campaigns_in_progress', 'drops', 'game_event_drops')
    drop_campaigns_in_progress = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DropCampaign)), graphql_name='dropCampaignsInProgress')
    drops = sgqlc.types.Field('UserDropAwardConnection', graphql_name='drops')
    game_event_drops = sgqlc.types.Field(sgqlc.types.list_of('UserDropReward'), graphql_name='gameEventDrops')


class ItBegins(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('badge_url', 'completed_at', 'has_streamed', 'has_updated_category', 'has_updated_stream_title', 'has_visited_dashboard')
    badge_url = sgqlc.types.Field(String, graphql_name='badgeURL')
    completed_at = sgqlc.types.Field(Time, graphql_name='completedAt')
    has_streamed = sgqlc.types.Field(Boolean, graphql_name='hasStreamed')
    has_updated_category = sgqlc.types.Field(Boolean, graphql_name='hasUpdatedCategory')
    has_updated_stream_title = sgqlc.types.Field(Boolean, graphql_name='hasUpdatedStreamTitle')
    has_visited_dashboard = sgqlc.types.Field(Boolean, graphql_name='hasVisitedDashboard')


class JoinChannelRoomsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel',)
    channel = sgqlc.types.Field('User', graphql_name='channel')


class JoinRaidPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('raid_id',)
    raid_id = sgqlc.types.Field(ID, graphql_name='raidID')


class KeyBatchConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('KeyBatchEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class KeyBatchEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('KeyBatchNode', graphql_name='node')


class KeyBatchNode(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'num_keys', 'status')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    num_keys = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='numKeys')
    status = sgqlc.types.Field(sgqlc.types.non_null(KeyBatchStatus), graphql_name='status')


class KeyPoolConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('KeyPoolEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class KeyPoolEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('KeyPoolNode', graphql_name='node')


class KeyPoolNode(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('batches', 'description', 'id', 'product_type', 'sku', 'status')
    batches = sgqlc.types.Field(KeyBatchConnection, graphql_name='batches', args=sgqlc.types.ArgDict((
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
))
    )
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    product_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='productType')
    sku = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sku')
    status = sgqlc.types.Field(sgqlc.types.non_null(KeyPoolStatus), graphql_name='status')


class LWAToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('access_token', 'expires_in', 'refresh_token')
    access_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='accessToken')
    expires_in = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='expiresIn')
    refresh_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='refreshToken')


class LeaderboardDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('lobby_max_size', 'phase_count', 'tiebreaker_label')
    lobby_max_size = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='lobbyMaxSize')
    phase_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='phaseCount')
    tiebreaker_label = sgqlc.types.Field(TiebreakerLabel, graphql_name='tiebreakerLabel')


class LeaderboardSet(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bits', 'sub_gift')
    bits = sgqlc.types.Field('UserLeaderboard', graphql_name='bits')
    sub_gift = sgqlc.types.Field('UserLeaderboard', graphql_name='subGift')


class LeaderboardSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('default_leaderboard', 'is_cheer_enabled', 'is_sub_gift_enabled', 'time_period')
    default_leaderboard = sgqlc.types.Field(sgqlc.types.non_null(LeaderboardType), graphql_name='defaultLeaderboard')
    is_cheer_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCheerEnabled')
    is_sub_gift_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSubGiftEnabled')
    time_period = sgqlc.types.Field(sgqlc.types.non_null(LeaderboardTimePeriodType), graphql_name='timePeriod')


class LeaveChannelRoomsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel',)
    channel = sgqlc.types.Field('User', graphql_name='channel')


class LeaveRaidPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('raid_id',)
    raid_id = sgqlc.types.Field(ID, graphql_name='raidID')


class LeaveSquadStreamError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(LeaveSquadStreamErrorCode), graphql_name='code')


class LeaveSquadStreamPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'squad_stream')
    error = sgqlc.types.Field(LeaveSquadStreamError, graphql_name='error')
    squad_stream = sgqlc.types.Field('SquadStream', graphql_name='squadStream')


class LinkSSOError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(LinkSSOErrorCode), graphql_name='code')


class LinkSSOPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'link')
    error = sgqlc.types.Field(LinkSSOError, graphql_name='error')
    link = sgqlc.types.Field('SSOLink', graphql_name='link')


class LiveRecommendationConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'generation_id', 'nodes', 'response_id')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StreamRecommendationEdge')), graphql_name='edges')
    generation_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='generationID')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('Stream')), graphql_name='nodes')
    response_id = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='responseID')


class LiveUpNotificationInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_default', 'live_up_notification')
    is_default = sgqlc.types.Field(Boolean, graphql_name='isDefault')
    live_up_notification = sgqlc.types.Field(String, graphql_name='liveUpNotification')


class LockPredictionEventError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(LockPredictionEventErrorCode), graphql_name='code')


class LockPredictionEventPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'prediction_event')
    error = sgqlc.types.Field(LockPredictionEventError, graphql_name='error')
    prediction_event = sgqlc.types.Field('PredictionEvent', graphql_name='predictionEvent')


class LoyaltyBadge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel_tenure_method_id', 'id', 'image1x_url', 'image2x_url', 'image4x_url', 'required_tenure_months', 'title')
    channel_tenure_method_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelTenureMethodID')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image1x_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='image1xURL')
    image2x_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='image2xURL')
    image4x_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='image4xURL')
    required_tenure_months = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='requiredTenureMonths')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class LoyaltyBadgeUploadConfig(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('image_id', 'image_url', 'upload_id', 'upload_url')
    image_id = sgqlc.types.Field(ID, graphql_name='imageID')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    upload_id = sgqlc.types.Field(ID, graphql_name='uploadID')
    upload_url = sgqlc.types.Field(String, graphql_name='uploadURL')


class MakeKeyBatchDownloadURLPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('decryption_key', 'url')
    decryption_key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='decryptionKey')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class MakePredictionError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'max_points_per_event', 'user_points_spent')
    code = sgqlc.types.Field(sgqlc.types.non_null(MakePredictionErrorCode), graphql_name='code')
    max_points_per_event = sgqlc.types.Field(Int, graphql_name='maxPointsPerEvent')
    user_points_spent = sgqlc.types.Field(Int, graphql_name='userPointsSpent')


class MakePredictionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'prediction')
    error = sgqlc.types.Field(MakePredictionError, graphql_name='error')
    prediction = sgqlc.types.Field('Prediction', graphql_name='prediction')


class ManuallyTriggerDropPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'trigger_results')
    error = sgqlc.types.Field(DropsError, graphql_name='error')
    trigger_results = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TriggerResult')), graphql_name='triggerResults')


class MarkAllCreatorNotificationsAsReadPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('has_succeeded',)
    has_succeeded = sgqlc.types.Field(Boolean, graphql_name='hasSucceeded')


class MarkAllViewerNotificationsAsReadPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('has_succeeded',)
    has_succeeded = sgqlc.types.Field(Boolean, graphql_name='hasSucceeded')


class Message(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'deleted_at', 'id', 'parent_message', 'replies', 'sender', 'sent_at')
    content = sgqlc.types.Field(sgqlc.types.non_null('MessageContent'), graphql_name='content')
    deleted_at = sgqlc.types.Field(Time, graphql_name='deletedAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    parent_message = sgqlc.types.Field('Message', graphql_name='parentMessage')
    replies = sgqlc.types.Field('MessageReplyConnection', graphql_name='replies')
    sender = sgqlc.types.Field('User', graphql_name='sender')
    sent_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='sentAt')


class MessageBody(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'emotes')
    content = sgqlc.types.Field(String, graphql_name='content')
    emotes = sgqlc.types.Field(sgqlc.types.list_of(EmbeddedEmote), graphql_name='emotes')


class MessageContent(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('fragments', 'text')
    fragments = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('MessageFragment'))), graphql_name='fragments')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class MessageFragment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'text')
    content = sgqlc.types.Field('FragmentContent', graphql_name='content')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class MessageReplyConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('nodes', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Message))), graphql_name='nodes')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class Milestone(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('end_date', 'id', 'is_prime_only', 'objective_tag', 'participation_threshold', 'required_subscriptions', 'rewards', 'start_date', 'threshold')
    end_date = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='endDate')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_prime_only = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPrimeOnly')
    objective_tag = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='objectiveTag')
    participation_threshold = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='participationThreshold')
    required_subscriptions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SubscriptionProduct')), graphql_name='requiredSubscriptions')
    rewards = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('TournamentReward'))), graphql_name='rewards')
    start_date = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='startDate')
    threshold = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='threshold')


class ModConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ModEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ModEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'granted_at', 'is_active', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    granted_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='grantedAt')
    is_active = sgqlc.types.Field(Boolean, graphql_name='isActive')
    node = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='node')


class ModLogs(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('comments', 'messages_by_sender', 'targeted_mod_actions')
    comments = sgqlc.types.Field('ModLogsCommentConnection', graphql_name='comments', args=sgqlc.types.ArgDict((
        ('target_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='targetID', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=100)),
        ('order', sgqlc.types.Arg(SortOrder, graphql_name='order', default='DESC')),
))
    )
    messages_by_sender = sgqlc.types.Field('ModLogsMessageConnection', graphql_name='messagesBySender', args=sgqlc.types.ArgDict((
        ('sender_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='senderID', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=100)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order', sgqlc.types.Arg(SortOrder, graphql_name='order', default='DESC')),
        ('include_message_count', sgqlc.types.Arg(Boolean, graphql_name='includeMessageCount', default=True)),
        ('include_targeted_actions', sgqlc.types.Arg(Boolean, graphql_name='includeTargetedActions', default=True)),
        ('include_auto_mod_caught_messages', sgqlc.types.Arg(Boolean, graphql_name='includeAutoModCaughtMessages', default=False)),
))
    )
    targeted_mod_actions = sgqlc.types.Field('ModLogsTargetedModActionsConnection', graphql_name='targetedModActions', args=sgqlc.types.ArgDict((
        ('target_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='targetID', default=None)),
        ('action_type', sgqlc.types.Arg(sgqlc.types.non_null(ModLogsAction), graphql_name='actionType', default=None)),
))
    )


class ModLogsAccess(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('access_level', 'channel_role')
    access_level = sgqlc.types.Field(sgqlc.types.non_null(ModLogsAccessLevel), graphql_name='accessLevel')
    channel_role = sgqlc.types.Field(sgqlc.types.non_null(ChannelUserRole), graphql_name='channelRole')


class ModLogsComment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('author', 'channel', 'details', 'id', 'target', 'timestamp')
    author = sgqlc.types.Field('User', graphql_name='author')
    channel = sgqlc.types.Field('User', graphql_name='channel')
    details = sgqlc.types.Field('ModLogsCommentDetails', graphql_name='details')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    target = sgqlc.types.Field('User', graphql_name='target')
    timestamp = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='timestamp')


class ModLogsCommentConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ModLogsCommentEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ModLogsCommentDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('text',)
    text = sgqlc.types.Field(String, graphql_name='text')


class ModLogsCommentEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(ModLogsComment, graphql_name='node')


class ModLogsMessage(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'id', 'sender', 'sent_at')
    content = sgqlc.types.Field(sgqlc.types.non_null('ModLogsMessageContent'), graphql_name='content')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    sender = sgqlc.types.Field('User', graphql_name='sender')
    sent_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='sentAt')


class ModLogsMessageConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'message_count', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ModLogsMessageEdge'))), graphql_name='edges')
    message_count = sgqlc.types.Field(Int, graphql_name='messageCount')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ModLogsMessageContent(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('fragments', 'text')
    fragments = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ModLogsMessageFragment'))), graphql_name='fragments')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class ModLogsMessageEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('ModLogsMessageResult', graphql_name='node')


class ModLogsMessageFragment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'text')
    content = sgqlc.types.Field('FragmentContent', graphql_name='content')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class ModLogsTargetedModActionsConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('action_count', 'edges', 'page_info')
    action_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='actionCount')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ModLogsTargetedModActionsEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class ModLogsTargetedModActionsEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('ModLogsTargetedModActionsEntry', graphql_name='node')


class ModLogsTargetedModActionsEntry(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('action', 'channel', 'details', 'id', 'target', 'timestamp', 'user')
    action = sgqlc.types.Field(sgqlc.types.non_null(ModLogsAction), graphql_name='action')
    channel = sgqlc.types.Field('User', graphql_name='channel')
    details = sgqlc.types.Field('TargetedModActionDetails', graphql_name='details')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    target = sgqlc.types.Field('User', graphql_name='target')
    timestamp = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='timestamp')
    user = sgqlc.types.Field('User', graphql_name='user')


class ModUserError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(ModUserErrorCode), graphql_name='code')


class ModUserPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error', 'target')
    channel = sgqlc.types.Field('User', graphql_name='channel')
    error = sgqlc.types.Field(ModUserError, graphql_name='error')
    target = sgqlc.types.Field('User', graphql_name='target')


class ModViewNewsfeedEntry(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'icon_url', 'id', 'link_text', 'link_url', 'position', 'published_at', 'title')
    content = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='content')
    icon_url = sgqlc.types.Field(String, graphql_name='iconURL')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    link_text = sgqlc.types.Field(String, graphql_name='linkText')
    link_url = sgqlc.types.Field(String, graphql_name='linkURL')
    position = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='position')
    published_at = sgqlc.types.Field(Time, graphql_name='publishedAt')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class ModViewSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('tutorial_seen_at', 'tutorial_state')
    tutorial_seen_at = sgqlc.types.Field(Time, graphql_name='tutorialSeenAt')
    tutorial_state = sgqlc.types.Field(TutorialState, graphql_name='tutorialState')


class ModerationLogs(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('actions',)
    actions = sgqlc.types.Field(ChannelModerationActionConnection, graphql_name='actions', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=100)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order', sgqlc.types.Arg(SortOrder, graphql_name='order', default='DESC')),
))
    )


class MovieDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('duration_seconds',)
    duration_seconds = sgqlc.types.Field(Int, graphql_name='durationSeconds')


class MultiplayerAdOffer(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('ad_duration_seconds', 'brand_name', 'broadcaster_message', 'credit_duration_seconds', 'expires_at', 'id', 'rewards_max_rate', 'rewards_min_rate')
    ad_duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='adDurationSeconds')
    brand_name = sgqlc.types.Field(String, graphql_name='brandName')
    broadcaster_message = sgqlc.types.Field(String, graphql_name='broadcasterMessage')
    credit_duration_seconds = sgqlc.types.Field(Int, graphql_name='creditDurationSeconds')
    expires_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='expiresAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    rewards_max_rate = sgqlc.types.Field(Float, graphql_name='rewardsMaxRate')
    rewards_min_rate = sgqlc.types.Field(Float, graphql_name='rewardsMinRate')


class MultiviewContentAttribute(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('child_ids', 'created_at', 'id', 'image_url', 'key', 'name', 'owner_channel', 'parent_id', 'parent_key', 'updated_at', 'value', 'value_short_name')
    child_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='childIDs')
    created_at = sgqlc.types.Field(Time, graphql_name='createdAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner_channel = sgqlc.types.Field(Channel, graphql_name='ownerChannel')
    parent_id = sgqlc.types.Field(ID, graphql_name='parentID')
    parent_key = sgqlc.types.Field(String, graphql_name='parentKey')
    updated_at = sgqlc.types.Field(Time, graphql_name='updatedAt')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')
    value_short_name = sgqlc.types.Field(String, graphql_name='valueShortName')


class Mutation(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('accept_friend_request', 'accept_organization_invite', 'accept_program_agreement', 'accept_squad_stream_invitation', 'acknowledge_prediction_result', 'acknowledge_subscription_state', 'acknowledge_unban_request', 'activate_extension', 'add_autohost_channels', 'add_browser_push_subscription', 'add_channel_blocked_term', 'add_channel_permitted_term', 'add_collection_item', 'add_competition_phase', 'add_competition_player', 'add_competition_team', 'add_device_token', 'add_drop_to_campaign', 'add_editor', 'add_radio_recently_played', 'add_reaction', 'add_recommendation_feedback', 'add_stream_authorized_user', 'allocate_keys_for_bounty', 'allow_rejected_chat_message', 'allow_rejected_cheer', 'apply_extension_activations', 'approve_unban_request', 'archive_chanlet', 'archive_community_points_community_goal', 'archive_poll', 'archive_poll_in_channel', 'assign_extension_billing_manager', 'ban_user_from_chat_room', 'ban_video_commenter', 'begin_use_bits_in_extension', 'block_user', 'bulk_approve_unban_request', 'bulk_deny_unban_request', 'cancel_active_boost_orders', 'cancel_bounty', 'cancel_friend_request', 'cancel_payout_onboarding_workflow', 'cancel_prediction_event', 'cancel_raid', 'cancel_subscription_gift', 'cancel_unban_request', 'change_username', 'claim_bounty', 'claim_community_points', 'claim_drop_rewards', 'claim_prime_offer', 'clear_unread_friend_requests', 'clone_extension_discovery_data', 'clone_extension_manifest', 'connect_ad_identity', 'contribute_community_points_community_goal', 'contribute_to_challenge', 'create_badge_flair', 'create_bits_challenge_condition_for_extension', 'create_bits_challenge_condition_participant_for_extension', 'create_bounty_campaign', 'create_bounty_campaign_upload_config', 'create_celebration', 'create_chanlet', 'create_clip', 'create_collection', 'create_community_points_community_goal', 'create_community_points_custom_reward', 'create_community_points_image_upload_info', 'create_competition', 'create_content_tags', 'create_drop_benefit', 'create_drop_campaign', 'create_drop_image_upload_url', 'create_extension_client', 'create_extension_image_upload_info', 'create_extension_zip_upload_info', 'create_friend_request', 'create_game_application', 'create_game_box_art_upload_url', 'create_loyalty_badge', 'create_loyalty_badge_upload_config', 'create_moderator_comment', 'create_multi_video_highlight', 'create_multiview_content_attribute_image_upload_config', 'create_multiview_content_attributes', 'create_organization_application', 'create_organization_invite', 'create_organization_jwt', 'create_organization_member', 'create_panel', 'create_panel_image_upload_info', 'create_partnership_application', 'create_poll', 'create_post', 'create_prediction_event', 'create_raid', 'create_rewarded_video_token', 'create_room', 'create_schedule', 'create_schedule_segment', 'create_social_media', 'create_squad_stream_invitation', 'create_stucco', 'create_stucco_pack', 'create_unban_request', 'create_video_bookmark', 'create_video_comment', 'create_video_highlight', 'create_video_thumbnail_upload_request', 'deactivate_extension', 'decline_organization_invite', 'delete_all_channel_videos', 'delete_bits_badge_tier_emoticon', 'delete_celebration', 'delete_channel_blocked_term', 'delete_channel_clips', 'delete_channel_permitted_term', 'delete_chat_message', 'delete_cheermote_tier', 'delete_clips', 'delete_collection', 'delete_community_points_community_goal', 'delete_community_points_custom_reward', 'delete_competition', 'delete_content_tags', 'delete_default_payment_method', 'delete_device_token', 'delete_drop', 'delete_drop_campaign', 'delete_emote', 'delete_extension', 'delete_extension_image', 'delete_extension_secrets', 'delete_loyalty_badge', 'delete_moderator_comment', 'delete_multiview_content_attributes', 'delete_notification', 'delete_panel', 'delete_post', 'delete_recommendation_feedback', 'delete_room', 'delete_room_message', 'delete_schedule', 'delete_schedule_segment', 'delete_social_media', 'delete_squad_stream_invitation', 'delete_stream_authorized_user', 'delete_user_clips', 'delete_user_colors', 'delete_video_comment', 'delete_videos', 'deny_rejected_chat_message', 'deny_rejected_cheer', 'deny_unban_request', 'deselect_channel_badge', 'deselect_global_badge', 'disable_two_factor', 'disable_user_account', 'dismiss_friend_recommendation', 'dismiss_ritual_token', 'dismiss_video_suggested_highlight', 'drop_image_upload', 'edit_room_message', 'emit_campaign_discovery_event', 'end_use_bits_in_extension', 'export_video_to_youtube', 'extension_link_user', 'finalize_competition_lobby', 'follow_game', 'follow_user', 'generate_extension_ratings_csvreport', 'generate_second_factor_qrcode', 'generate_subscribers_csv', 'get_emote_upload_config', 'go_raid', 'grant_vip', 'host_target_channel', 'install_extension', 'interrupt_schedule', 'invalidate_authenticated_sessions', 'invalidate_email_association', 'join_channel_rooms', 'join_raid', 'leave_channel_rooms', 'leave_raid', 'leave_squad_stream', 'link_sso', 'lock_prediction_event', 'make_key_batch_download_url', 'make_prediction', 'manually_trigger_drop', 'mark_all_creator_notifications_as_read', 'mark_all_viewer_notifications_as_read', 'mod_user', 'order_panels', 'presign_dev_insights_report_url', 'publish_clip', 'publish_competition', 'publish_subscription_emote', 'purchase_offer', 'rate_extension', 'read_notifications', 'record_ad_event', 'redeem_claimable', 'redeem_community_points_custom_reward', 'redeem_creator_gifts', 'redeem_ritual_token', 'redeem_subscription', 'redeem_true_xad', 'refresh_extension_token', 'regenerate_stream_key', 'regenerate_verification_code', 'register_payout_information', 'register_two_factor', 'register_two_factor_confirmation', 'reject_friend_request', 'reject_squad_stream_invitation', 'reject_squad_stream_out_of_network_invitations', 'remove_autohost_channels', 'remove_collection_item', 'remove_competition_phase', 'remove_competition_player', 'remove_competition_team', 'remove_editor', 'remove_organization_member', 'remove_reaction', 'remove_squad_stream_member', 'remove_stucco', 'reorder_collection_item', 'report_content', 'report_whisper', 'report_whisper_thread', 'request_ritual_token', 'resend_verification_email', 'reset_username', 'resolve_prediction_event', 'respond_to_team_invitation', 'resume_schedule', 'revoke_vip', 'rotate_extension_secrets', 'run_multiplayer_ads', 'save_extension_manifest', 'seed_competition_participant', 'select_channel_badge', 'select_global_badge', 'send_chat_message_through_subscriber_mode', 'send_cheer', 'send_extension_message', 'send_highlighted_chat_message', 'send_room_message', 'send_whisper', 'set_auto_ad_density', 'set_auto_refill_settings', 'set_autohost_channels', 'set_bits_user_settings', 'set_channel_feed_enabled', 'set_channel_notification_setting', 'set_channel_trailer', 'set_chat_pause_setting', 'set_content_tags', 'set_creator_badge_flair', 'set_dashboard_alert_queue_activity_status', 'set_dashboard_alert_queue_preference', 'set_default_payment_method', 'set_deleted_message_display_setting', 'set_drop_benefits_on_drop', 'set_drop_campaign_access', 'set_drop_campaign_status', 'set_drop_campaign_summary', 'set_drop_event_rule', 'set_drop_summary', 'set_drop_time_based_rule', 'set_emote_animations_enabled', 'set_emote_modifier_groups', 'set_extension_configuration', 'set_extension_feature_flags', 'set_extension_installation_oauth', 'set_game_drop_account_link_client', 'set_mod_logs_access', 'set_mod_view_settings', 'set_notification_setting', 'set_overwatch_league_team_preference', 'set_preferred_language_tag', 'set_quick_action_layout', 'set_radio_currently_playing', 'set_readable_chat_colors_enabled', 'set_resource_restriction', 'set_schedule_reminder', 'set_session_status', 'set_squad_stream_primary_player', 'set_unban_requests_settings', 'set_user_residence', 'spend_subscription_credit', 'start_ad', 'start_bounty', 'start_cloud_broadcast', 'start_payout_onboarding_workflow', 'start_watch_party', 'stop_bounty', 'stop_cloud_broadcast', 'stop_watch_party', 'submit_csatfeedback', 'submit_emote_prefix', 'submit_emoticon_prefix', 'submit_extension_feedback', 'swap_competition_lobby_participants', 'sync_game_on_drop_campaign', 'terminate_poll', 'terminate_poll_in_channel', 'toggle_rituals_enabled', 'transition_extension_state', 'unban_user_from_chat_room', 'unblock_user', 'undo_recommendation_feedback', 'unfollow_game', 'unfollow_user', 'unfriend_user', 'unhost', 'uninstall_extension', 'unlink_amazon_connection', 'unlink_riot_connection', 'unlink_sso', 'unlock_chosen_modified_subscriber_emote', 'unlock_chosen_subscriber_emote', 'unlock_random_subscriber_emote', 'unmod_user', 'unset_hype_train_config', 'unsubscribe_email', 'update_ad_properties', 'update_all_whisper_threads', 'update_auto_mod_levels', 'update_auto_mod_properties', 'update_autohost_settings', 'update_bits_badge_tier_notification', 'update_bits_badge_tiers', 'update_boost_settings', 'update_broadcast_settings', 'update_celebration', 'update_celebration_config', 'update_celebration_product_config', 'update_celebration_user_settings', 'update_changelog_read_time', 'update_chanlet_content_attributes', 'update_channel_clips_setting', 'update_channel_home_preferences', 'update_channel_prediction_settings', 'update_chat_color', 'update_chat_settings', 'update_cheer_partner_settings', 'update_cheermote_tier', 'update_clip', 'update_clip_view_count', 'update_collection', 'update_community_points_automatic_reward', 'update_community_points_channel_settings', 'update_community_points_community_goal', 'update_community_points_custom_reward', 'update_community_points_custom_reward_redemption_status', 'update_community_points_custom_reward_redemption_statuses_by_channel', 'update_community_points_custom_reward_redemption_statuses_by_redemptions', 'update_community_points_custom_reward_redemption_statuses_by_reward', 'update_community_points_early_access_settings', 'update_community_points_last_viewed_content', 'update_community_points_smart_costs_acknowledgements', 'update_competition', 'update_competition_player', 'update_competition_team', 'update_consent', 'update_content_tags', 'update_drop_benefit', 'update_drop_benefit_on_drop', 'update_drop_preconditions', 'update_drops_opt_out_status', 'update_emote_orders', 'update_extension_discovery_data', 'update_extension_manifest', 'update_hype_train_config', 'update_is_sharing_activity', 'update_lwatoken', 'update_leaderboard_settings', 'update_live_up_notification', 'update_lobby_participant_score', 'update_multiview_content_attributes', 'update_onboarding_skipped_channels', 'update_organization_member_role', 'update_owner_chanlet_attributes', 'update_panel', 'update_phone_number', 'update_phone_number_confirmation', 'update_prime_offer_status', 'update_prime_settings', 'update_raid_settings', 'update_room', 'update_room_modes', 'update_room_view', 'update_schedule_segment', 'update_seen_creator_onboarding_content', 'update_social_media', 'update_squad_invite_policy', 'update_squad_stream', 'update_stucco', 'update_stucco_pack', 'update_subscription_product', 'update_user', 'update_user_colors', 'update_user_create_date_hidden', 'update_user_directory_hidden', 'update_user_email_reusable', 'update_user_is_email_revert_success', 'update_user_prediction_settings', 'update_user_subscription_settings', 'update_user_team_membership', 'update_user_video_shelves', 'update_user_viewed_video', 'update_video', 'update_video_comment', 'update_video_stream_settings', 'update_visibility', 'update_whisper_settings', 'update_whisper_thread', 'upload_competition_image', 'use_chat_notification_token', 'validate_verification_code', 'verify_contact_method', 'verify_one_time_password', 'verify_rewarded_video_eligibility_captcha', 'viewed_notifications', 'visit_stream_manager', 'vote_in_ad_poll', 'vote_in_poll', 'vote_in_poll_by_choice_index')
    accept_friend_request = sgqlc.types.Field(AcceptFriendRequestPayload, graphql_name='acceptFriendRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AcceptFriendRequestInput), graphql_name='input', default=None)),
))
    )
    accept_organization_invite = sgqlc.types.Field(AcceptOrganizationInvitePayload, graphql_name='acceptOrganizationInvite', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AcceptOrganizationInviteInput), graphql_name='input', default=None)),
))
    )
    accept_program_agreement = sgqlc.types.Field(AcceptProgramAgreementPayload, graphql_name='acceptProgramAgreement', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AcceptProgramAgreementInput), graphql_name='input', default=None)),
))
    )
    accept_squad_stream_invitation = sgqlc.types.Field(AcceptSquadStreamInvitationPayload, graphql_name='acceptSquadStreamInvitation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AcceptSquadStreamInvitationInput), graphql_name='input', default=None)),
))
    )
    acknowledge_prediction_result = sgqlc.types.Field(AcknowledgePredictionResultPayload, graphql_name='acknowledgePredictionResult', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AcknowledgePredictionResultInput), graphql_name='input', default=None)),
))
    )
    acknowledge_subscription_state = sgqlc.types.Field(AcknowledgeSubscriptionStatePayload, graphql_name='acknowledgeSubscriptionState', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AcknowledgeSubscriptionStateInput), graphql_name='input', default=None)),
))
    )
    acknowledge_unban_request = sgqlc.types.Field(AcknowledgeUnbanRequestPayload, graphql_name='acknowledgeUnbanRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AcknowledgeUnbanRequestInput), graphql_name='input', default=None)),
))
    )
    activate_extension = sgqlc.types.Field(ActivateExtensionPayload, graphql_name='activateExtension', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ActivateExtensionInput), graphql_name='input', default=None)),
))
    )
    add_autohost_channels = sgqlc.types.Field(AddAutohostChannelsPayload, graphql_name='addAutohostChannels', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddAutohostChannelsInput), graphql_name='input', default=None)),
))
    )
    add_browser_push_subscription = sgqlc.types.Field(AddBrowserPushSubscriptionPayload, graphql_name='addBrowserPushSubscription', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddBrowserPushSubscriptionInput), graphql_name='input', default=None)),
))
    )
    add_channel_blocked_term = sgqlc.types.Field(AddChannelBlockedTermPayload, graphql_name='addChannelBlockedTerm', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddChannelBlockedTermInput), graphql_name='input', default=None)),
))
    )
    add_channel_permitted_term = sgqlc.types.Field(AddChannelPermittedTermPayload, graphql_name='addChannelPermittedTerm', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddChannelPermittedTermInput), graphql_name='input', default=None)),
))
    )
    add_collection_item = sgqlc.types.Field(AddCollectionItemPayload, graphql_name='addCollectionItem', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddCollectionItemInput), graphql_name='input', default=None)),
))
    )
    add_competition_phase = sgqlc.types.Field(AddCompetitionPhasePayload, graphql_name='addCompetitionPhase', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddCompetitionPhaseInput), graphql_name='input', default=None)),
))
    )
    add_competition_player = sgqlc.types.Field(AddCompetitionPlayerPayload, graphql_name='addCompetitionPlayer', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddCompetitionPlayerInput), graphql_name='input', default=None)),
))
    )
    add_competition_team = sgqlc.types.Field(AddCompetitionTeamPayload, graphql_name='addCompetitionTeam', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddCompetitionTeamInput), graphql_name='input', default=None)),
))
    )
    add_device_token = sgqlc.types.Field(AddDeviceTokenPayload, graphql_name='addDeviceToken', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddDeviceTokenInput), graphql_name='input', default=None)),
))
    )
    add_drop_to_campaign = sgqlc.types.Field(AddDropToCampaignPayload, graphql_name='addDropToCampaign', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddDropToCampaignInput), graphql_name='input', default=None)),
))
    )
    add_editor = sgqlc.types.Field(AddEditorPayload, graphql_name='addEditor', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddEditorInput), graphql_name='input', default=None)),
))
    )
    add_radio_recently_played = sgqlc.types.Field(AddRadioRecentlyPlayedPayload, graphql_name='addRadioRecentlyPlayed', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddRadioRecentlyPlayedInput), graphql_name='input', default=None)),
))
    )
    add_reaction = sgqlc.types.Field(AddReactionPayload, graphql_name='addReaction', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddReactionInput), graphql_name='input', default=None)),
))
    )
    add_recommendation_feedback = sgqlc.types.Field(AddRecommendationFeedbackPayload, graphql_name='addRecommendationFeedback', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddRecommendationFeedbackInput), graphql_name='input', default=None)),
))
    )
    add_stream_authorized_user = sgqlc.types.Field(AddStreamAuthorizedUserPayload, graphql_name='addStreamAuthorizedUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AddStreamAuthorizedUserInput), graphql_name='input', default=None)),
))
    )
    allocate_keys_for_bounty = sgqlc.types.Field(AllocateKeysForBountyPayload, graphql_name='allocateKeysForBounty', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AllocateKeysForBountyInput), graphql_name='input', default=None)),
))
    )
    allow_rejected_chat_message = sgqlc.types.Field(AllowRejectedChatMessagePayload, graphql_name='allowRejectedChatMessage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AllowRejectedChatMessageInput), graphql_name='input', default=None)),
))
    )
    allow_rejected_cheer = sgqlc.types.Field(AllowRejectedCheerPayload, graphql_name='allowRejectedCheer', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AllowRejectedCheerInput), graphql_name='input', default=None)),
))
    )
    apply_extension_activations = sgqlc.types.Field(ApplyExtensionActivationsPayload, graphql_name='applyExtensionActivations', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ApplyExtensionActivationsInput), graphql_name='input', default=None)),
))
    )
    approve_unban_request = sgqlc.types.Field(ApproveUnbanRequestPayload, graphql_name='approveUnbanRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ApproveUnbanRequestInput), graphql_name='input', default=None)),
))
    )
    archive_chanlet = sgqlc.types.Field(ArchiveChanletPayload, graphql_name='archiveChanlet', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ArchiveChanletInput), graphql_name='input', default=None)),
))
    )
    archive_community_points_community_goal = sgqlc.types.Field(ArchiveCommunityPointsCommunityGoalPayload, graphql_name='archiveCommunityPointsCommunityGoal', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ArchiveCommunityPointsCommunityGoalInput), graphql_name='input', default=None)),
))
    )
    archive_poll = sgqlc.types.Field(ArchivePollPayload, graphql_name='archivePoll', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ArchivePollInput), graphql_name='input', default=None)),
))
    )
    archive_poll_in_channel = sgqlc.types.Field(ArchivePollInChannelPayload, graphql_name='archivePollInChannel', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ArchivePollInChannelInput), graphql_name='input', default=None)),
))
    )
    assign_extension_billing_manager = sgqlc.types.Field(AssignExtensionBillingManagerPayload, graphql_name='assignExtensionBillingManager', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(AssignExtensionBillingManagerInput), graphql_name='input', default=None)),
))
    )
    ban_user_from_chat_room = sgqlc.types.Field(BanUserFromChatRoomPayload, graphql_name='banUserFromChatRoom', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(BanUserFromChatRoomInput), graphql_name='input', default=None)),
))
    )
    ban_video_commenter = sgqlc.types.Field(BanVideoCommenterPayload, graphql_name='banVideoCommenter', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(BanVideoCommenterInput), graphql_name='input', default=None)),
))
    )
    begin_use_bits_in_extension = sgqlc.types.Field(BeginUseBitsInExtensionPayload, graphql_name='beginUseBitsInExtension', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(BeginUseBitsInExtensionInput), graphql_name='input', default=None)),
))
    )
    block_user = sgqlc.types.Field(BlockUserPayload, graphql_name='blockUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(BlockUserInput), graphql_name='input', default=None)),
))
    )
    bulk_approve_unban_request = sgqlc.types.Field(BulkApproveUnbanRequestPayload, graphql_name='bulkApproveUnbanRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(BulkApproveUnbanRequestInput), graphql_name='input', default=None)),
))
    )
    bulk_deny_unban_request = sgqlc.types.Field(BulkDenyUnbanRequestPayload, graphql_name='bulkDenyUnbanRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(BulkDenyUnbanRequestInput), graphql_name='input', default=None)),
))
    )
    cancel_active_boost_orders = sgqlc.types.Field(CancelActiveBoostOrdersPayload, graphql_name='cancelActiveBoostOrders', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CancelActiveBoostOrdersInput), graphql_name='input', default=None)),
))
    )
    cancel_bounty = sgqlc.types.Field(CancelBountyPayload, graphql_name='cancelBounty', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CancelBountyInput), graphql_name='input', default=None)),
))
    )
    cancel_friend_request = sgqlc.types.Field(CancelFriendRequestPayload, graphql_name='cancelFriendRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CancelFriendRequestInput), graphql_name='input', default=None)),
))
    )
    cancel_payout_onboarding_workflow = sgqlc.types.Field(CancelPayoutOnboardingWorkflowPayload, graphql_name='cancelPayoutOnboardingWorkflow', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CancelPayoutOnboardingWorkflowInput), graphql_name='input', default=None)),
))
    )
    cancel_prediction_event = sgqlc.types.Field(CancelPredictionEventPayload, graphql_name='cancelPredictionEvent', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CancelPredictionEventInput), graphql_name='input', default=None)),
))
    )
    cancel_raid = sgqlc.types.Field(CancelRaidPayload, graphql_name='cancelRaid', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CancelRaidInput), graphql_name='input', default=None)),
))
    )
    cancel_subscription_gift = sgqlc.types.Field(CancelSubscriptionGiftPayload, graphql_name='cancelSubscriptionGift', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CancelSubscriptionGiftInput), graphql_name='input', default=None)),
))
    )
    cancel_unban_request = sgqlc.types.Field(CancelUnbanRequestPayload, graphql_name='cancelUnbanRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CancelUnbanRequestInput), graphql_name='input', default=None)),
))
    )
    change_username = sgqlc.types.Field(ChangeUsernamePayload, graphql_name='changeUsername', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ChangeUsernameInput), graphql_name='input', default=None)),
))
    )
    claim_bounty = sgqlc.types.Field(ClaimBountyPayload, graphql_name='claimBounty', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ClaimBountyInput), graphql_name='input', default=None)),
))
    )
    claim_community_points = sgqlc.types.Field(ClaimCommunityPointsPayload, graphql_name='claimCommunityPoints', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ClaimCommunityPointsInput), graphql_name='input', default=None)),
))
    )
    claim_drop_rewards = sgqlc.types.Field(ClaimDropRewardsPayload, graphql_name='claimDropRewards', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ClaimDropRewardsInput), graphql_name='input', default=None)),
))
    )
    claim_prime_offer = sgqlc.types.Field(ClaimPrimeOfferPayload, graphql_name='claimPrimeOffer', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ClaimPrimeOfferInput), graphql_name='input', default=None)),
))
    )
    clear_unread_friend_requests = sgqlc.types.Field(ClearUnreadFriendRequestsPayload, graphql_name='clearUnreadFriendRequests')
    clone_extension_discovery_data = sgqlc.types.Field(CloneExtensionDiscoveryDataPayload, graphql_name='cloneExtensionDiscoveryData', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CloneExtensionDiscoveryDataInput), graphql_name='input', default=None)),
))
    )
    clone_extension_manifest = sgqlc.types.Field(CloneExtensionManifestPayload, graphql_name='cloneExtensionManifest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CloneExtensionManifestInput), graphql_name='input', default=None)),
))
    )
    connect_ad_identity = sgqlc.types.Field(ConnectAdIdentityPayload, graphql_name='connectAdIdentity', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ConnectAdIdentityInput), graphql_name='input', default=None)),
))
    )
    contribute_community_points_community_goal = sgqlc.types.Field(ContributeCommunityPointsCommunityGoalPayload, graphql_name='contributeCommunityPointsCommunityGoal', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ContributeCommunityPointsCommunityGoalInput), graphql_name='input', default=None)),
))
    )
    contribute_to_challenge = sgqlc.types.Field(ContributeToChallengePayload, graphql_name='contributeToChallenge', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ContributeToChallengeInput), graphql_name='input', default=None)),
))
    )
    create_badge_flair = sgqlc.types.Field(CreateBadgeFlairPayload, graphql_name='createBadgeFlair', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBadgeFlairInput), graphql_name='input', default=None)),
))
    )
    create_bits_challenge_condition_for_extension = sgqlc.types.Field(CreateBitsChallengeConditionForExtensionPayload, graphql_name='createBitsChallengeConditionForExtension', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBitsChallengeConditionForExtensionInput), graphql_name='input', default=None)),
))
    )
    create_bits_challenge_condition_participant_for_extension = sgqlc.types.Field(CreateBitsChallengeConditionParticipantForExtensionPayload, graphql_name='createBitsChallengeConditionParticipantForExtension', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBitsChallengeConditionParticipantForExtensionInput), graphql_name='input', default=None)),
))
    )
    create_bounty_campaign = sgqlc.types.Field(CreateBountyCampaignPayload, graphql_name='createBountyCampaign', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBountyCampaignInput), graphql_name='input', default=None)),
))
    )
    create_bounty_campaign_upload_config = sgqlc.types.Field(CreateBountyCampaignUploadConfigPayload, graphql_name='createBountyCampaignUploadConfig', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateBountyCampaignUploadConfigInput), graphql_name='input', default=None)),
))
    )
    create_celebration = sgqlc.types.Field(CreateCelebrationPayload, graphql_name='createCelebration', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCelebrationInput), graphql_name='input', default=None)),
))
    )
    create_chanlet = sgqlc.types.Field(CreateChanletPayload, graphql_name='createChanlet', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateChanletInput), graphql_name='input', default=None)),
))
    )
    create_clip = sgqlc.types.Field(CreateClipPayload, graphql_name='createClip', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateClipInput), graphql_name='input', default=None)),
))
    )
    create_collection = sgqlc.types.Field(CreateCollectionPayload, graphql_name='createCollection', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCollectionInput), graphql_name='input', default=None)),
))
    )
    create_community_points_community_goal = sgqlc.types.Field(CreateCommunityPointsCommunityGoalPayload, graphql_name='createCommunityPointsCommunityGoal', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCommunityPointsCommunityGoalInput), graphql_name='input', default=None)),
))
    )
    create_community_points_custom_reward = sgqlc.types.Field(CreateCommunityPointsCustomRewardPayload, graphql_name='createCommunityPointsCustomReward', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCommunityPointsCustomRewardInput), graphql_name='input', default=None)),
))
    )
    create_community_points_image_upload_info = sgqlc.types.Field(CreateCommunityPointsImageUploadInfoPayload, graphql_name='createCommunityPointsImageUploadInfo', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCommunityPointsImageUploadInfoInput), graphql_name='input', default=None)),
))
    )
    create_competition = sgqlc.types.Field(CreateCompetitionPayload, graphql_name='createCompetition', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateCompetitionInput), graphql_name='input', default=None)),
))
    )
    create_content_tags = sgqlc.types.Field(CreateContentTagsPayload, graphql_name='createContentTags', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateContentTagsInput), graphql_name='input', default=None)),
))
    )
    create_drop_benefit = sgqlc.types.Field(CreateDropBenefitPayload, graphql_name='createDropBenefit', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateDropBenefitInput), graphql_name='input', default=None)),
))
    )
    create_drop_campaign = sgqlc.types.Field(CreateDropCampaignPayload, graphql_name='createDropCampaign', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateDropCampaignInput), graphql_name='input', default=None)),
))
    )
    create_drop_image_upload_url = sgqlc.types.Field(CreateDropImageUploadURLPayload, graphql_name='createDropImageUploadURL', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateDropImageUploadURLInput), graphql_name='input', default=None)),
))
    )
    create_extension_client = sgqlc.types.Field(CreateExtensionClientPayload, graphql_name='createExtensionClient', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateExtensionClientInput), graphql_name='input', default=None)),
))
    )
    create_extension_image_upload_info = sgqlc.types.Field(CreateExtensionImageUploadInfoPayload, graphql_name='createExtensionImageUploadInfo', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateExtensionImageUploadInfoInput), graphql_name='input', default=None)),
))
    )
    create_extension_zip_upload_info = sgqlc.types.Field(CreateExtensionZipUploadInfoPayload, graphql_name='createExtensionZipUploadInfo', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateExtensionZipUploadInfoInput), graphql_name='input', default=None)),
))
    )
    create_friend_request = sgqlc.types.Field(CreateFriendRequestPayload, graphql_name='createFriendRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateFriendRequestInput), graphql_name='input', default=None)),
))
    )
    create_game_application = sgqlc.types.Field(CreateGameApplicationPayload, graphql_name='createGameApplication', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateGameApplicationInput), graphql_name='input', default=None)),
))
    )
    create_game_box_art_upload_url = sgqlc.types.Field(CreateGameBoxArtUploadURLPayload, graphql_name='createGameBoxArtUploadURL', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateGameBoxArtUploadURLInput), graphql_name='input', default=None)),
))
    )
    create_loyalty_badge = sgqlc.types.Field(CreateLoyaltyBadgePayload, graphql_name='createLoyaltyBadge', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateLoyaltyBadgeInput), graphql_name='input', default=None)),
))
    )
    create_loyalty_badge_upload_config = sgqlc.types.Field(CreateLoyaltyBadgeUploadConfigPayload, graphql_name='createLoyaltyBadgeUploadConfig', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateLoyaltyBadgeUploadConfigInput), graphql_name='input', default=None)),
))
    )
    create_moderator_comment = sgqlc.types.Field(CreateModeratorCommentPayload, graphql_name='createModeratorComment', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateModeratorCommentInput), graphql_name='input', default=None)),
))
    )
    create_multi_video_highlight = sgqlc.types.Field(CreateMultiVideoHighlightPayload, graphql_name='createMultiVideoHighlight', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateMultiVideoHighlightInput), graphql_name='input', default=None)),
))
    )
    create_multiview_content_attribute_image_upload_config = sgqlc.types.Field(CreateMultiviewContentAttributeImageUploadConfigPayload, graphql_name='createMultiviewContentAttributeImageUploadConfig', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateMultiviewContentAttributeImageUploadConfigInput), graphql_name='input', default=None)),
))
    )
    create_multiview_content_attributes = sgqlc.types.Field(CreateMultiviewContentAttributesPayload, graphql_name='createMultiviewContentAttributes', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateMultiviewContentAttributesInput), graphql_name='input', default=None)),
))
    )
    create_organization_application = sgqlc.types.Field(CreateOrganizationApplicationPayload, graphql_name='createOrganizationApplication', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOrganizationApplicationInput), graphql_name='input', default=None)),
))
    )
    create_organization_invite = sgqlc.types.Field(CreateOrganizationInvitePayload, graphql_name='createOrganizationInvite', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOrganizationInviteInput), graphql_name='input', default=None)),
))
    )
    create_organization_jwt = sgqlc.types.Field(CreateOrganizationJWTPayload, graphql_name='createOrganizationJWT', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOrganizationJWTInput), graphql_name='input', default=None)),
))
    )
    create_organization_member = sgqlc.types.Field(CreateOrganizationMemberPayload, graphql_name='createOrganizationMember', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateOrganizationMemberInput), graphql_name='input', default=None)),
))
    )
    create_panel = sgqlc.types.Field(CreatePanelPayload, graphql_name='createPanel', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePanelInput), graphql_name='input', default=None)),
))
    )
    create_panel_image_upload_info = sgqlc.types.Field(CreatePanelImageUploadInfoPayload, graphql_name='createPanelImageUploadInfo', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePanelImageUploadInfoInput), graphql_name='input', default=None)),
))
    )
    create_partnership_application = sgqlc.types.Field(CreatePartnershipApplicationPayload, graphql_name='createPartnershipApplication', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePartnershipApplicationInput), graphql_name='input', default=None)),
))
    )
    create_poll = sgqlc.types.Field(CreatePollPayload, graphql_name='createPoll', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePollInput), graphql_name='input', default=None)),
))
    )
    create_post = sgqlc.types.Field(CreatePostPayload, graphql_name='createPost', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePostInput), graphql_name='input', default=None)),
))
    )
    create_prediction_event = sgqlc.types.Field(CreatePredictionEventPayload, graphql_name='createPredictionEvent', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreatePredictionEventInput), graphql_name='input', default=None)),
))
    )
    create_raid = sgqlc.types.Field(CreateRaidPayload, graphql_name='createRaid', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateRaidInput), graphql_name='input', default=None)),
))
    )
    create_rewarded_video_token = sgqlc.types.Field(CreateRewardedVideoTokenPayload, graphql_name='createRewardedVideoToken', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateRewardedVideoTokenInput), graphql_name='input', default=None)),
))
    )
    create_room = sgqlc.types.Field(CreateRoomPayload, graphql_name='createRoom', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateRoomInput), graphql_name='input', default=None)),
))
    )
    create_schedule = sgqlc.types.Field(CreateSchedulePayload, graphql_name='createSchedule', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateScheduleInput), graphql_name='input', default=None)),
))
    )
    create_schedule_segment = sgqlc.types.Field(CreateScheduleSegmentPayload, graphql_name='createScheduleSegment', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateScheduleSegmentInput), graphql_name='input', default=None)),
))
    )
    create_social_media = sgqlc.types.Field(CreateSocialMediaPayload, graphql_name='createSocialMedia', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateSocialMediaInput), graphql_name='input', default=None)),
))
    )
    create_squad_stream_invitation = sgqlc.types.Field(CreateSquadStreamInvitationPayload, graphql_name='createSquadStreamInvitation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateSquadStreamInvitationInput), graphql_name='input', default=None)),
))
    )
    create_stucco = sgqlc.types.Field(CreateStuccoPayload, graphql_name='createStucco', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateStuccoInput), graphql_name='input', default=None)),
))
    )
    create_stucco_pack = sgqlc.types.Field(CreateStuccoPackPayload, graphql_name='createStuccoPack', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateStuccoPackInput), graphql_name='input', default=None)),
))
    )
    create_unban_request = sgqlc.types.Field(CreateUnbanRequestPayload, graphql_name='createUnbanRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateUnbanRequestInput), graphql_name='input', default=None)),
))
    )
    create_video_bookmark = sgqlc.types.Field(CreateVideoBookmarkPayload, graphql_name='createVideoBookmark', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateVideoBookmarkInput), graphql_name='input', default=None)),
))
    )
    create_video_comment = sgqlc.types.Field(CreateVideoCommentPayload, graphql_name='createVideoComment', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateVideoCommentInput), graphql_name='input', default=None)),
))
    )
    create_video_highlight = sgqlc.types.Field(CreateVideoHighlightPayload, graphql_name='createVideoHighlight', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateVideoHighlightInput), graphql_name='input', default=None)),
))
    )
    create_video_thumbnail_upload_request = sgqlc.types.Field(CreateVideoThumbnailUploadRequestPayload, graphql_name='createVideoThumbnailUploadRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(CreateVideoThumbnailUploadRequestInput), graphql_name='input', default=None)),
))
    )
    deactivate_extension = sgqlc.types.Field(DeactivateExtensionPayload, graphql_name='deactivateExtension', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeactivateExtensionInput), graphql_name='input', default=None)),
))
    )
    decline_organization_invite = sgqlc.types.Field(DeclineOrganizationInvitePayload, graphql_name='declineOrganizationInvite', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeclineOrganizationInviteInput), graphql_name='input', default=None)),
))
    )
    delete_all_channel_videos = sgqlc.types.Field(DeleteAllChannelVideosPayload, graphql_name='deleteAllChannelVideos', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(DeleteAllChannelVideosInput, graphql_name='input', default=None)),
))
    )
    delete_bits_badge_tier_emoticon = sgqlc.types.Field(DeleteBitsBadgeTierEmoticonPayload, graphql_name='deleteBitsBadgeTierEmoticon', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteBitsBadgeTierEmoticonInput), graphql_name='input', default=None)),
))
    )
    delete_celebration = sgqlc.types.Field(DeleteCelebrationPayload, graphql_name='deleteCelebration', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCelebrationInput), graphql_name='input', default=None)),
))
    )
    delete_channel_blocked_term = sgqlc.types.Field(DeleteChannelBlockedTermPayload, graphql_name='deleteChannelBlockedTerm', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteChannelBlockedTermInput), graphql_name='input', default=None)),
))
    )
    delete_channel_clips = sgqlc.types.Field(DeleteChannelClipsPayload, graphql_name='deleteChannelClips', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteChannelClipsInput), graphql_name='input', default=None)),
))
    )
    delete_channel_permitted_term = sgqlc.types.Field(DeleteChannelPermittedTermPayload, graphql_name='deleteChannelPermittedTerm', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteChannelPermittedTermInput), graphql_name='input', default=None)),
))
    )
    delete_chat_message = sgqlc.types.Field(DeleteChatMessagePayload, graphql_name='deleteChatMessage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteChatMessageInput), graphql_name='input', default=None)),
))
    )
    delete_cheermote_tier = sgqlc.types.Field(DeleteCheermoteTierPayload, graphql_name='deleteCheermoteTier', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCheermoteTierInput), graphql_name='input', default=None)),
))
    )
    delete_clips = sgqlc.types.Field(DeleteClipsPayload, graphql_name='deleteClips', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteClipsInput), graphql_name='input', default=None)),
))
    )
    delete_collection = sgqlc.types.Field(DeleteCollectionPayload, graphql_name='deleteCollection', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCollectionInput), graphql_name='input', default=None)),
))
    )
    delete_community_points_community_goal = sgqlc.types.Field(DeleteCommunityPointsCommunityGoalPayload, graphql_name='deleteCommunityPointsCommunityGoal', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCommunityPointsCommunityGoalInput), graphql_name='input', default=None)),
))
    )
    delete_community_points_custom_reward = sgqlc.types.Field(DeleteCommunityPointsCustomRewardPayload, graphql_name='deleteCommunityPointsCustomReward', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(DeleteCommunityPointsCustomRewardInput, graphql_name='input', default=None)),
))
    )
    delete_competition = sgqlc.types.Field(DeleteCompetitionPayload, graphql_name='deleteCompetition', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteCompetitionInput), graphql_name='input', default=None)),
))
    )
    delete_content_tags = sgqlc.types.Field(DeleteContentTagsPayload, graphql_name='deleteContentTags', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteContentTagsInput), graphql_name='input', default=None)),
))
    )
    delete_default_payment_method = sgqlc.types.Field(DeleteDefaultPaymentMethodPayload, graphql_name='deleteDefaultPaymentMethod', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteDefaultPaymentMethodInput), graphql_name='input', default=None)),
))
    )
    delete_device_token = sgqlc.types.Field(DeleteDeviceTokenPayload, graphql_name='deleteDeviceToken', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteDeviceTokenInput), graphql_name='input', default=None)),
))
    )
    delete_drop = sgqlc.types.Field(DeleteDropPayload, graphql_name='deleteDrop', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteDropInput), graphql_name='input', default=None)),
))
    )
    delete_drop_campaign = sgqlc.types.Field(DeleteDropCampaignPayload, graphql_name='deleteDropCampaign', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteDropCampaignInput), graphql_name='input', default=None)),
))
    )
    delete_emote = sgqlc.types.Field(DeleteEmotePayload, graphql_name='deleteEmote', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteEmoteInput), graphql_name='input', default=None)),
))
    )
    delete_extension = sgqlc.types.Field(DeleteExtensionPayload, graphql_name='deleteExtension', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteExtensionInput), graphql_name='input', default=None)),
))
    )
    delete_extension_image = sgqlc.types.Field(DeleteExtensionImagePayload, graphql_name='deleteExtensionImage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteExtensionImageInput), graphql_name='input', default=None)),
))
    )
    delete_extension_secrets = sgqlc.types.Field(DeleteExtensionSecretsPayload, graphql_name='deleteExtensionSecrets', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteExtensionSecretsInput), graphql_name='input', default=None)),
))
    )
    delete_loyalty_badge = sgqlc.types.Field(DeleteLoyaltyBadgePayload, graphql_name='deleteLoyaltyBadge', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteLoyaltyBadgeInput), graphql_name='input', default=None)),
))
    )
    delete_moderator_comment = sgqlc.types.Field(DeleteModeratorCommentPayload, graphql_name='deleteModeratorComment', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteModeratorCommentInput), graphql_name='input', default=None)),
))
    )
    delete_multiview_content_attributes = sgqlc.types.Field(DeleteMultiviewContentAttributesPayload, graphql_name='deleteMultiviewContentAttributes', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteMultiviewContentAttributesInput), graphql_name='input', default=None)),
))
    )
    delete_notification = sgqlc.types.Field(DeleteNotificationPayload, graphql_name='deleteNotification', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteNotificationInput), graphql_name='input', default=None)),
))
    )
    delete_panel = sgqlc.types.Field(DeletePanelPayload, graphql_name='deletePanel', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeletePanelInput), graphql_name='input', default=None)),
))
    )
    delete_post = sgqlc.types.Field(DeletePostPayload, graphql_name='deletePost', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeletePostInput), graphql_name='input', default=None)),
))
    )
    delete_recommendation_feedback = sgqlc.types.Field(DeleteRecommendationFeedbackPayload, graphql_name='deleteRecommendationFeedback', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteRecommendationFeedbackInput), graphql_name='input', default=None)),
))
    )
    delete_room = sgqlc.types.Field(DeleteRoomPayload, graphql_name='deleteRoom', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteRoomInput), graphql_name='input', default=None)),
))
    )
    delete_room_message = sgqlc.types.Field(DeleteRoomMessagePayload, graphql_name='deleteRoomMessage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteRoomMessageInput), graphql_name='input', default=None)),
))
    )
    delete_schedule = sgqlc.types.Field(DeleteSchedulePayload, graphql_name='deleteSchedule', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteScheduleInput), graphql_name='input', default=None)),
))
    )
    delete_schedule_segment = sgqlc.types.Field(DeleteScheduleSegmentPayload, graphql_name='deleteScheduleSegment', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteScheduleSegmentInput), graphql_name='input', default=None)),
))
    )
    delete_social_media = sgqlc.types.Field(DeleteSocialMediaPayload, graphql_name='deleteSocialMedia', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteSocialMediaInput), graphql_name='input', default=None)),
))
    )
    delete_squad_stream_invitation = sgqlc.types.Field(DeleteSquadStreamInvitationPayload, graphql_name='deleteSquadStreamInvitation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteSquadStreamInvitationInput), graphql_name='input', default=None)),
))
    )
    delete_stream_authorized_user = sgqlc.types.Field(DeleteStreamAuthorizedUserPayload, graphql_name='deleteStreamAuthorizedUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteStreamAuthorizedUserInput), graphql_name='input', default=None)),
))
    )
    delete_user_clips = sgqlc.types.Field(DeleteUserClipsPayload, graphql_name='deleteUserClips', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteUserClipsInput), graphql_name='input', default=None)),
))
    )
    delete_user_colors = sgqlc.types.Field(DeleteUserColorsPayload, graphql_name='deleteUserColors', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteUserColorsInput), graphql_name='input', default=None)),
))
    )
    delete_video_comment = sgqlc.types.Field(DeleteVideoCommentPayload, graphql_name='deleteVideoComment', args=sgqlc.types.ArgDict((
        ('comment_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='commentID', default=None)),
))
    )
    delete_videos = sgqlc.types.Field(DeleteVideosPayload, graphql_name='deleteVideos', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeleteVideosInput), graphql_name='input', default=None)),
))
    )
    deny_rejected_chat_message = sgqlc.types.Field(DenyRejectedChatMessagePayload, graphql_name='denyRejectedChatMessage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DenyRejectedChatMessageInput), graphql_name='input', default=None)),
))
    )
    deny_rejected_cheer = sgqlc.types.Field(DenyRejectedCheerPayload, graphql_name='denyRejectedCheer', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DenyRejectedCheerInput), graphql_name='input', default=None)),
))
    )
    deny_unban_request = sgqlc.types.Field(DenyUnbanRequestPayload, graphql_name='denyUnbanRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DenyUnbanRequestInput), graphql_name='input', default=None)),
))
    )
    deselect_channel_badge = sgqlc.types.Field(DeselectChannelBadgePayload, graphql_name='deselectChannelBadge', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DeselectChannelBadgeInput), graphql_name='input', default=None)),
))
    )
    deselect_global_badge = sgqlc.types.Field(DeselectGlobalBadgePayload, graphql_name='deselectGlobalBadge')
    disable_two_factor = sgqlc.types.Field(DisableTwoFactorPayload, graphql_name='disableTwoFactor', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DisableTwoFactorInput), graphql_name='input', default=None)),
))
    )
    disable_user_account = sgqlc.types.Field(DisableUserAccountPayload, graphql_name='disableUserAccount', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DisableUserAccountInput), graphql_name='input', default=None)),
))
    )
    dismiss_friend_recommendation = sgqlc.types.Field(DismissFriendRecommendationPayload, graphql_name='dismissFriendRecommendation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DismissFriendRecommendationInput), graphql_name='input', default=None)),
))
    )
    dismiss_ritual_token = sgqlc.types.Field(DismissRitualTokenPayload, graphql_name='dismissRitualToken', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DismissRitualTokenInput), graphql_name='input', default=None)),
))
    )
    dismiss_video_suggested_highlight = sgqlc.types.Field(DismissVideoSuggestedHighlightPayload, graphql_name='dismissVideoSuggestedHighlight', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DismissVideoSuggestedHighlightInput), graphql_name='input', default=None)),
))
    )
    drop_image_upload = sgqlc.types.Field(DropImageUploadPayload, graphql_name='dropImageUpload', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(DropImageUploadInput), graphql_name='input', default=None)),
))
    )
    edit_room_message = sgqlc.types.Field(EditRoomMessagePayload, graphql_name='editRoomMessage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EditRoomMessageInput), graphql_name='input', default=None)),
))
    )
    emit_campaign_discovery_event = sgqlc.types.Field(EmitCampaignDiscoveryEventPayload, graphql_name='emitCampaignDiscoveryEvent', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EmitCampaignDiscoveryEventInput), graphql_name='input', default=None)),
))
    )
    end_use_bits_in_extension = sgqlc.types.Field(EndUseBitsInExtensionPayload, graphql_name='endUseBitsInExtension', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(EndUseBitsInExtensionInput), graphql_name='input', default=None)),
))
    )
    export_video_to_youtube = sgqlc.types.Field(ExportVideoToYoutubePayload, graphql_name='exportVideoToYoutube', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ExportVideoToYoutubeInput), graphql_name='input', default=None)),
))
    )
    extension_link_user = sgqlc.types.Field(ExtensionLinkUserPayload, graphql_name='extensionLinkUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ExtensionLinkUserInput), graphql_name='input', default=None)),
))
    )
    finalize_competition_lobby = sgqlc.types.Field(FinalizeCompetitionLobbyPayload, graphql_name='finalizeCompetitionLobby', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(FinalizeCompetitionLobbyInput), graphql_name='input', default=None)),
))
    )
    follow_game = sgqlc.types.Field(FollowGamePayload, graphql_name='followGame', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(FollowGameInput), graphql_name='input', default=None)),
))
    )
    follow_user = sgqlc.types.Field(FollowUserPayload, graphql_name='followUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(FollowUserInput), graphql_name='input', default=None)),
))
    )
    generate_extension_ratings_csvreport = sgqlc.types.Field(GenerateExtensionRatingsCSVReportPayload, graphql_name='generateExtensionRatingsCSVReport', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(GenerateExtensionRatingsCSVReportInput), graphql_name='input', default=None)),
))
    )
    generate_second_factor_qrcode = sgqlc.types.Field(GenerateSecondFactorQRCodePayload, graphql_name='generateSecondFactorQRCode', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(GenerateSecondFactorQRCodeInput), graphql_name='input', default=None)),
))
    )
    generate_subscribers_csv = sgqlc.types.Field(GenerateSubscribersCSVPayload, graphql_name='generateSubscribersCSV', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(GenerateSubscribersCSVInput), graphql_name='input', default=None)),
))
    )
    get_emote_upload_config = sgqlc.types.Field(GetEmoteUploadConfigPayload, graphql_name='getEmoteUploadConfig', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(GetEmoteUploadConfigInput), graphql_name='input', default=None)),
))
    )
    go_raid = sgqlc.types.Field(GoRaidPayload, graphql_name='goRaid', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(GoRaidInput), graphql_name='input', default=None)),
))
    )
    grant_vip = sgqlc.types.Field(GrantVIPPayload, graphql_name='grantVIP', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(GrantVIPInput), graphql_name='input', default=None)),
))
    )
    host_target_channel = sgqlc.types.Field(HostTargetChannelPayload, graphql_name='hostTargetChannel', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(HostTargetChannelInput), graphql_name='input', default=None)),
))
    )
    install_extension = sgqlc.types.Field(InstallExtensionPayload, graphql_name='installExtension', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(InstallExtensionInput), graphql_name='input', default=None)),
))
    )
    interrupt_schedule = sgqlc.types.Field(InterruptSchedulePayload, graphql_name='interruptSchedule', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(InterruptScheduleInput), graphql_name='input', default=None)),
))
    )
    invalidate_authenticated_sessions = sgqlc.types.Field(InvalidateAuthenticatedSessionsPayload, graphql_name='invalidateAuthenticatedSessions', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(InvalidateAuthenticatedSessionsInput), graphql_name='input', default=None)),
))
    )
    invalidate_email_association = sgqlc.types.Field(InvalidateEmailAssociationPayload, graphql_name='invalidateEmailAssociation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(InvalidateEmailAssociationInput), graphql_name='input', default=None)),
))
    )
    join_channel_rooms = sgqlc.types.Field(JoinChannelRoomsPayload, graphql_name='joinChannelRooms', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(JoinChannelRoomsInput), graphql_name='input', default=None)),
))
    )
    join_raid = sgqlc.types.Field(JoinRaidPayload, graphql_name='joinRaid', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(JoinRaidInput), graphql_name='input', default=None)),
))
    )
    leave_channel_rooms = sgqlc.types.Field(LeaveChannelRoomsPayload, graphql_name='leaveChannelRooms', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(LeaveChannelRoomsInput), graphql_name='input', default=None)),
))
    )
    leave_raid = sgqlc.types.Field(LeaveRaidPayload, graphql_name='leaveRaid', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(LeaveRaidInput), graphql_name='input', default=None)),
))
    )
    leave_squad_stream = sgqlc.types.Field(LeaveSquadStreamPayload, graphql_name='leaveSquadStream', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(LeaveSquadStreamInput), graphql_name='input', default=None)),
))
    )
    link_sso = sgqlc.types.Field(LinkSSOPayload, graphql_name='linkSSO', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(LinkSSOInput), graphql_name='input', default=None)),
))
    )
    lock_prediction_event = sgqlc.types.Field(LockPredictionEventPayload, graphql_name='lockPredictionEvent', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(LockPredictionEventInput), graphql_name='input', default=None)),
))
    )
    make_key_batch_download_url = sgqlc.types.Field(MakeKeyBatchDownloadURLPayload, graphql_name='makeKeyBatchDownloadURL', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(MakeKeyBatchDownloadURLInput), graphql_name='input', default=None)),
))
    )
    make_prediction = sgqlc.types.Field(MakePredictionPayload, graphql_name='makePrediction', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(MakePredictionInput), graphql_name='input', default=None)),
))
    )
    manually_trigger_drop = sgqlc.types.Field(ManuallyTriggerDropPayload, graphql_name='manuallyTriggerDrop', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ManuallyTriggerDropInput), graphql_name='input', default=None)),
))
    )
    mark_all_creator_notifications_as_read = sgqlc.types.Field(MarkAllCreatorNotificationsAsReadPayload, graphql_name='markAllCreatorNotificationsAsRead', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(MarkAllCreatorNotificationsAsReadInput), graphql_name='input', default=None)),
))
    )
    mark_all_viewer_notifications_as_read = sgqlc.types.Field(MarkAllViewerNotificationsAsReadPayload, graphql_name='markAllViewerNotificationsAsRead', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(MarkAllViewerNotificationsAsReadInput, graphql_name='input', default=None)),
))
    )
    mod_user = sgqlc.types.Field(ModUserPayload, graphql_name='modUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ModUserInput), graphql_name='input', default=None)),
))
    )
    order_panels = sgqlc.types.Field('OrderPanelsPayload', graphql_name='orderPanels', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(OrderPanelsInput), graphql_name='input', default=None)),
))
    )
    presign_dev_insights_report_url = sgqlc.types.Field('PresignDevInsightsReportURLPayload', graphql_name='presignDevInsightsReportURL', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(PresignDevInsightsReportURLInput), graphql_name='input', default=None)),
))
    )
    publish_clip = sgqlc.types.Field('PublishClipPayload', graphql_name='publishClip', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(PublishClipInput), graphql_name='input', default=None)),
))
    )
    publish_competition = sgqlc.types.Field('PublishCompetitionPayload', graphql_name='publishCompetition', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(PublishCompetitionInput), graphql_name='input', default=None)),
))
    )
    publish_subscription_emote = sgqlc.types.Field('PublishSubscriptionEmotePayload', graphql_name='publishSubscriptionEmote', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(PublishSubscriptionEmoteInput), graphql_name='input', default=None)),
))
    )
    purchase_offer = sgqlc.types.Field('PurchaseOfferPayload', graphql_name='purchaseOffer', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(PurchaseOfferInput), graphql_name='input', default=None)),
))
    )
    rate_extension = sgqlc.types.Field('RateExtensionPayload', graphql_name='rateExtension', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RateExtensionInput), graphql_name='input', default=None)),
))
    )
    read_notifications = sgqlc.types.Field('ReadNotificationsPayload', graphql_name='readNotifications', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ReadNotificationsInput), graphql_name='input', default=None)),
))
    )
    record_ad_event = sgqlc.types.Field('RecordAdEventPayload', graphql_name='recordAdEvent', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RecordAdEventInput), graphql_name='input', default=None)),
))
    )
    redeem_claimable = sgqlc.types.Field('RedeemClaimablePayload', graphql_name='redeemClaimable', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RedeemClaimableInput), graphql_name='input', default=None)),
))
    )
    redeem_community_points_custom_reward = sgqlc.types.Field('RedeemCommunityPointsCustomRewardPayload', graphql_name='redeemCommunityPointsCustomReward', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RedeemCommunityPointsCustomRewardInput), graphql_name='input', default=None)),
))
    )
    redeem_creator_gifts = sgqlc.types.Field('RedeemCreatorGiftsPayload', graphql_name='redeemCreatorGifts', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RedeemCreatorGiftsInput), graphql_name='input', default=None)),
))
    )
    redeem_ritual_token = sgqlc.types.Field('RedeemRitualTokenPayload', graphql_name='redeemRitualToken', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RedeemRitualTokenInput), graphql_name='input', default=None)),
))
    )
    redeem_subscription = sgqlc.types.Field('RedeemSubscriptionPayload', graphql_name='redeemSubscription', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RedeemSubscriptionInput), graphql_name='input', default=None)),
))
    )
    redeem_true_xad = sgqlc.types.Field('RedeemTrueXAdPayload', graphql_name='redeemTrueXAd', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RedeemTrueXAdInput), graphql_name='input', default=None)),
))
    )
    refresh_extension_token = sgqlc.types.Field('RefreshExtensionTokenPayload', graphql_name='refreshExtensionToken', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RefreshExtensionTokenInput), graphql_name='input', default=None)),
))
    )
    regenerate_stream_key = sgqlc.types.Field('RegenerateStreamKeyPayload', graphql_name='regenerateStreamKey', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RegenerateStreamKeyInput), graphql_name='input', default=None)),
))
    )
    regenerate_verification_code = sgqlc.types.Field('RegenerateVerificationCodePayload', graphql_name='regenerateVerificationCode', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RegenerateVerificationCodeInput), graphql_name='input', default=None)),
))
    )
    register_payout_information = sgqlc.types.Field('RegisterPayoutInformationPayload', graphql_name='registerPayoutInformation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RegisterPayoutInformationInput), graphql_name='input', default=None)),
))
    )
    register_two_factor = sgqlc.types.Field('RegisterTwoFactorPayload', graphql_name='registerTwoFactor', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RegisterTwoFactorInput), graphql_name='input', default=None)),
))
    )
    register_two_factor_confirmation = sgqlc.types.Field('RegisterTwoFactorConfirmationPayload', graphql_name='registerTwoFactorConfirmation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RegisterTwoFactorConfirmationInput), graphql_name='input', default=None)),
))
    )
    reject_friend_request = sgqlc.types.Field('RejectFriendRequestPayload', graphql_name='rejectFriendRequest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RejectFriendRequestInput), graphql_name='input', default=None)),
))
    )
    reject_squad_stream_invitation = sgqlc.types.Field('RejectSquadStreamInvitationPayload', graphql_name='rejectSquadStreamInvitation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RejectSquadStreamInvitationInput), graphql_name='input', default=None)),
))
    )
    reject_squad_stream_out_of_network_invitations = sgqlc.types.Field('RejectSquadStreamOutOfNetworkInvitationsPayload', graphql_name='rejectSquadStreamOutOfNetworkInvitations', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RejectSquadStreamOutOfNetworkInvitationsInput), graphql_name='input', default=None)),
))
    )
    remove_autohost_channels = sgqlc.types.Field('RemoveAutohostChannelsPayload', graphql_name='removeAutohostChannels', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveAutohostChannelsInput), graphql_name='input', default=None)),
))
    )
    remove_collection_item = sgqlc.types.Field('RemoveCollectionItemPayload', graphql_name='removeCollectionItem', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveCollectionItemInput), graphql_name='input', default=None)),
))
    )
    remove_competition_phase = sgqlc.types.Field('RemoveCompetitionPhasePayload', graphql_name='removeCompetitionPhase', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveCompetitionPhaseInput), graphql_name='input', default=None)),
))
    )
    remove_competition_player = sgqlc.types.Field('RemoveCompetitionPlayerPayload', graphql_name='removeCompetitionPlayer', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveCompetitionPlayerInput), graphql_name='input', default=None)),
))
    )
    remove_competition_team = sgqlc.types.Field('RemoveCompetitionTeamPayload', graphql_name='removeCompetitionTeam', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveCompetitionTeamInput), graphql_name='input', default=None)),
))
    )
    remove_editor = sgqlc.types.Field('RemoveEditorPayload', graphql_name='removeEditor', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveEditorInput), graphql_name='input', default=None)),
))
    )
    remove_organization_member = sgqlc.types.Field('RemoveOrganizationMemberPayload', graphql_name='removeOrganizationMember', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveOrganizationMemberInput), graphql_name='input', default=None)),
))
    )
    remove_reaction = sgqlc.types.Field('RemoveReactionPayload', graphql_name='removeReaction', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveReactionInput), graphql_name='input', default=None)),
))
    )
    remove_squad_stream_member = sgqlc.types.Field('RemoveSquadStreamMemberPayload', graphql_name='removeSquadStreamMember', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveSquadStreamMemberInput), graphql_name='input', default=None)),
))
    )
    remove_stucco = sgqlc.types.Field('RemoveStuccoPayload', graphql_name='removeStucco', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RemoveStuccoInput), graphql_name='input', default=None)),
))
    )
    reorder_collection_item = sgqlc.types.Field('ReorderCollectionItemPayload', graphql_name='reorderCollectionItem', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ReorderCollectionItemInput), graphql_name='input', default=None)),
))
    )
    report_content = sgqlc.types.Field('ReportContentPayload', graphql_name='reportContent', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ReportContentInput), graphql_name='input', default=None)),
))
    )
    report_whisper = sgqlc.types.Field('ReportWhisperPayload', graphql_name='reportWhisper', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ReportWhisperInput), graphql_name='input', default=None)),
))
    )
    report_whisper_thread = sgqlc.types.Field('ReportWhisperThreadPayload', graphql_name='reportWhisperThread', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ReportWhisperThreadInput), graphql_name='input', default=None)),
))
    )
    request_ritual_token = sgqlc.types.Field('RequestRitualTokenPayload', graphql_name='requestRitualToken', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RequestRitualTokenInput), graphql_name='input', default=None)),
))
    )
    resend_verification_email = sgqlc.types.Field('ResendVerificationEmailPayload', graphql_name='resendVerificationEmail', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ResendVerificationEmailInput), graphql_name='input', default=None)),
))
    )
    reset_username = sgqlc.types.Field('ResetUsernamePayload', graphql_name='resetUsername', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ResetUsernameInput), graphql_name='input', default=None)),
))
    )
    resolve_prediction_event = sgqlc.types.Field('ResolvePredictionEventPayload', graphql_name='resolvePredictionEvent', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ResolvePredictionEventInput), graphql_name='input', default=None)),
))
    )
    respond_to_team_invitation = sgqlc.types.Field('RespondToTeamInvitationPayload', graphql_name='respondToTeamInvitation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RespondToTeamInvitationInput), graphql_name='input', default=None)),
))
    )
    resume_schedule = sgqlc.types.Field('ResumeSchedulePayload', graphql_name='resumeSchedule', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ResumeScheduleInput), graphql_name='input', default=None)),
))
    )
    revoke_vip = sgqlc.types.Field('RevokeVIPPayload', graphql_name='revokeVIP', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RevokeVIPInput), graphql_name='input', default=None)),
))
    )
    rotate_extension_secrets = sgqlc.types.Field('RotateExtensionSecretsPayload', graphql_name='rotateExtensionSecrets', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RotateExtensionSecretsInput), graphql_name='input', default=None)),
))
    )
    run_multiplayer_ads = sgqlc.types.Field('RunMultiplayerAdsPayload', graphql_name='runMultiplayerAds', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(RunMultiplayerAdsInput), graphql_name='input', default=None)),
))
    )
    save_extension_manifest = sgqlc.types.Field('SaveExtensionManifestPayload', graphql_name='saveExtensionManifest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SaveExtensionManifestInput), graphql_name='input', default=None)),
))
    )
    seed_competition_participant = sgqlc.types.Field('SeedCompetitionParticipantPayload', graphql_name='seedCompetitionParticipant', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SeedCompetitionParticipantInput), graphql_name='input', default=None)),
))
    )
    select_channel_badge = sgqlc.types.Field('SelectChannelBadgePayload', graphql_name='selectChannelBadge', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SelectChannelBadgeInput), graphql_name='input', default=None)),
))
    )
    select_global_badge = sgqlc.types.Field('SelectGlobalBadgePayload', graphql_name='selectGlobalBadge', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SelectGlobalBadgeInput), graphql_name='input', default=None)),
))
    )
    send_chat_message_through_subscriber_mode = sgqlc.types.Field('SendChatMessageThroughSubscriberModePayload', graphql_name='sendChatMessageThroughSubscriberMode', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SendChatMessageThroughSubscriberModeInput), graphql_name='input', default=None)),
))
    )
    send_cheer = sgqlc.types.Field('SendCheerPayload', graphql_name='sendCheer', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SendCheerInput), graphql_name='input', default=None)),
))
    )
    send_extension_message = sgqlc.types.Field('SendExtensionMessagePayload', graphql_name='sendExtensionMessage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SendExtensionMessageInput), graphql_name='input', default=None)),
))
    )
    send_highlighted_chat_message = sgqlc.types.Field('SendHighlightedChatMessagePayload', graphql_name='sendHighlightedChatMessage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SendHighlightedChatMessageInput), graphql_name='input', default=None)),
))
    )
    send_room_message = sgqlc.types.Field('SendRoomMessagePayload', graphql_name='sendRoomMessage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SendRoomMessageInput), graphql_name='input', default=None)),
))
    )
    send_whisper = sgqlc.types.Field('SendWhisperPayload', graphql_name='sendWhisper', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SendWhisperInput), graphql_name='input', default=None)),
))
    )
    set_auto_ad_density = sgqlc.types.Field('SetAutoAdDensityPayload', graphql_name='setAutoAdDensity', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetAutoAdDensityInput), graphql_name='input', default=None)),
))
    )
    set_auto_refill_settings = sgqlc.types.Field('SetAutoRefillSettingsPayload', graphql_name='setAutoRefillSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetAutoRefillSettingsInput), graphql_name='input', default=None)),
))
    )
    set_autohost_channels = sgqlc.types.Field('SetAutohostChannelsPayload', graphql_name='setAutohostChannels', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetAutohostChannelsInput), graphql_name='input', default=None)),
))
    )
    set_bits_user_settings = sgqlc.types.Field('SetBitsUserSettingsPayload', graphql_name='setBitsUserSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetBitsUserSettingsInput), graphql_name='input', default=None)),
))
    )
    set_channel_feed_enabled = sgqlc.types.Field('SetChannelFeedEnabledPayload', graphql_name='setChannelFeedEnabled', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetChannelFeedEnabledInput), graphql_name='input', default=None)),
))
    )
    set_channel_notification_setting = sgqlc.types.Field('SetChannelNotificationSettingPayload', graphql_name='setChannelNotificationSetting', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetChannelNotificationSettingInput), graphql_name='input', default=None)),
))
    )
    set_channel_trailer = sgqlc.types.Field('SetChannelTrailerPayload', graphql_name='setChannelTrailer', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetChannelTrailerInput), graphql_name='input', default=None)),
))
    )
    set_chat_pause_setting = sgqlc.types.Field('SetChatPauseSettingPayload', graphql_name='setChatPauseSetting', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetChatPauseSettingInput), graphql_name='input', default=None)),
))
    )
    set_content_tags = sgqlc.types.Field('SetContentTagsPayload', graphql_name='setContentTags', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetContentTagsInput), graphql_name='input', default=None)),
))
    )
    set_creator_badge_flair = sgqlc.types.Field('SetCreatorBadgeFlairPayload', graphql_name='setCreatorBadgeFlair', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetCreatorBadgeFlairInput), graphql_name='input', default=None)),
))
    )
    set_dashboard_alert_queue_activity_status = sgqlc.types.Field('SetDashboardAlertQueueActivityStatusPayload', graphql_name='setDashboardAlertQueueActivityStatus', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetDashboardAlertQueueActivityStatusInput), graphql_name='input', default=None)),
))
    )
    set_dashboard_alert_queue_preference = sgqlc.types.Field('SetDashboardAlertQueuePreferencePayload', graphql_name='setDashboardAlertQueuePreference', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetDashboardAlertQueuePreferenceInput), graphql_name='input', default=None)),
))
    )
    set_default_payment_method = sgqlc.types.Field('SetDefaultPaymentMethodPayload', graphql_name='setDefaultPaymentMethod', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetDefaultPaymentMethodInput), graphql_name='input', default=None)),
))
    )
    set_deleted_message_display_setting = sgqlc.types.Field('SetDeletedMessageDisplaySettingPayload', graphql_name='setDeletedMessageDisplaySetting', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetDeletedMessageDisplaySettingInput), graphql_name='input', default=None)),
))
    )
    set_drop_benefits_on_drop = sgqlc.types.Field('SetDropBenefitsOnDropPayload', graphql_name='setDropBenefitsOnDrop', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetDropBenefitsOnDropInput), graphql_name='input', default=None)),
))
    )
    set_drop_campaign_access = sgqlc.types.Field('SetDropCampaignAccessPayload', graphql_name='setDropCampaignAccess', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetDropCampaignAccessInput), graphql_name='input', default=None)),
))
    )
    set_drop_campaign_status = sgqlc.types.Field('SetDropCampaignStatusPayload', graphql_name='setDropCampaignStatus', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetDropCampaignStatusInput), graphql_name='input', default=None)),
))
    )
    set_drop_campaign_summary = sgqlc.types.Field('SetDropCampaignSummaryPayload', graphql_name='setDropCampaignSummary', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetDropCampaignSummaryInput), graphql_name='input', default=None)),
))
    )
    set_drop_event_rule = sgqlc.types.Field('SetDropEventRulePayload', graphql_name='setDropEventRule', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetDropEventRuleInput), graphql_name='input', default=None)),
))
    )
    set_drop_summary = sgqlc.types.Field('SetDropSummaryPayload', graphql_name='setDropSummary', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetDropSummaryInput), graphql_name='input', default=None)),
))
    )
    set_drop_time_based_rule = sgqlc.types.Field('SetDropTimeBasedRulePayload', graphql_name='setDropTimeBasedRule', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetDropTimeBasedRuleInput), graphql_name='input', default=None)),
))
    )
    set_emote_animations_enabled = sgqlc.types.Field('SetEmoteAnimationsEnabledPayload', graphql_name='setEmoteAnimationsEnabled', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetEmoteAnimationsEnabledInput), graphql_name='input', default=None)),
))
    )
    set_emote_modifier_groups = sgqlc.types.Field('SetEmoteModifierGroupsPayload', graphql_name='setEmoteModifierGroups', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetEmoteModifierGroupsInput), graphql_name='input', default=None)),
))
    )
    set_extension_configuration = sgqlc.types.Field('SetExtensionConfigurationPayload', graphql_name='setExtensionConfiguration', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetExtensionConfigurationInput), graphql_name='input', default=None)),
))
    )
    set_extension_feature_flags = sgqlc.types.Field('SetExtensionFeatureFlagsPayload', graphql_name='setExtensionFeatureFlags', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetExtensionFeatureFlagsInput), graphql_name='input', default=None)),
))
    )
    set_extension_installation_oauth = sgqlc.types.Field('SetExtensionInstallationOAuthPayload', graphql_name='setExtensionInstallationOAuth', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetExtensionInstallationOAuthInput), graphql_name='input', default=None)),
))
    )
    set_game_drop_account_link_client = sgqlc.types.Field('SetGameDropAccountLinkClientPayload', graphql_name='setGameDropAccountLinkClient', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetGameDropAccountLinkClientInput), graphql_name='input', default=None)),
))
    )
    set_mod_logs_access = sgqlc.types.Field('SetModLogsAccessPayload', graphql_name='setModLogsAccess', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetModLogsAccessInput), graphql_name='input', default=None)),
))
    )
    set_mod_view_settings = sgqlc.types.Field('SetModViewSettingsPayload', graphql_name='setModViewSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetModViewSettingsInput), graphql_name='input', default=None)),
))
    )
    set_notification_setting = sgqlc.types.Field('SetNotificationSettingPayload', graphql_name='setNotificationSetting', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetNotificationSettingInput), graphql_name='input', default=None)),
))
    )
    set_overwatch_league_team_preference = sgqlc.types.Field('SetOverwatchLeagueTeamPreferencePayload', graphql_name='setOverwatchLeagueTeamPreference', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetOverwatchLeagueTeamPreferenceInput), graphql_name='input', default=None)),
))
    )
    set_preferred_language_tag = sgqlc.types.Field('SetPreferredLanguageTagPayload', graphql_name='setPreferredLanguageTag', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetPreferredLanguageTagInput), graphql_name='input', default=None)),
))
    )
    set_quick_action_layout = sgqlc.types.Field('SetQuickActionLayoutPayload', graphql_name='setQuickActionLayout', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetQuickActionLayoutInput), graphql_name='input', default=None)),
))
    )
    set_radio_currently_playing = sgqlc.types.Field('SetRadioCurrentlyPlayingPayload', graphql_name='setRadioCurrentlyPlaying', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetRadioCurrentlyPlayingInput), graphql_name='input', default=None)),
))
    )
    set_readable_chat_colors_enabled = sgqlc.types.Field('SetReadableChatColorsEnabledPayload', graphql_name='setReadableChatColorsEnabled', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetReadableChatColorsEnabledInput), graphql_name='input', default=None)),
))
    )
    set_resource_restriction = sgqlc.types.Field('SetResourceRestrictionPayload', graphql_name='setResourceRestriction', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetResourceRestrictionInput), graphql_name='input', default=None)),
))
    )
    set_schedule_reminder = sgqlc.types.Field('SetScheduleReminderPayload', graphql_name='setScheduleReminder', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetScheduleReminderInput), graphql_name='input', default=None)),
))
    )
    set_session_status = sgqlc.types.Field('SetSessionStatusPayload', graphql_name='setSessionStatus', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetSessionStatusInput), graphql_name='input', default=None)),
))
    )
    set_squad_stream_primary_player = sgqlc.types.Field('SetSquadStreamPrimaryPlayerPayload', graphql_name='setSquadStreamPrimaryPlayer', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetSquadStreamPrimaryPlayerInput), graphql_name='input', default=None)),
))
    )
    set_unban_requests_settings = sgqlc.types.Field('SetUnbanRequestsSettingsPayload', graphql_name='setUnbanRequestsSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetUnbanRequestsSettingsInput), graphql_name='input', default=None)),
))
    )
    set_user_residence = sgqlc.types.Field('SetUserResidencePayload', graphql_name='setUserResidence', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SetUserResidenceInput), graphql_name='input', default=None)),
))
    )
    spend_subscription_credit = sgqlc.types.Field('SpendSubscriptionCreditPayload', graphql_name='spendSubscriptionCredit', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SpendSubscriptionCreditInput), graphql_name='input', default=None)),
))
    )
    start_ad = sgqlc.types.Field('StartAdPayload', graphql_name='startAd', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(StartAdInput), graphql_name='input', default=None)),
))
    )
    start_bounty = sgqlc.types.Field('StartBountyPayload', graphql_name='startBounty', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(StartBountyInput), graphql_name='input', default=None)),
))
    )
    start_cloud_broadcast = sgqlc.types.Field('StartCloudBroadcastPayload', graphql_name='startCloudBroadcast', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(StartCloudBroadcastInput), graphql_name='input', default=None)),
))
    )
    start_payout_onboarding_workflow = sgqlc.types.Field('StartPayoutOnboardingWorkflowPayload', graphql_name='startPayoutOnboardingWorkflow', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(StartPayoutOnboardingWorkflowInput), graphql_name='input', default=None)),
))
    )
    start_watch_party = sgqlc.types.Field('StartWatchPartyPayload', graphql_name='startWatchParty', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(StartWatchPartyInput), graphql_name='input', default=None)),
))
    )
    stop_bounty = sgqlc.types.Field('StopBountyPayload', graphql_name='stopBounty', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(StopBountyInput), graphql_name='input', default=None)),
))
    )
    stop_cloud_broadcast = sgqlc.types.Field('StopCloudBroadcastPayload', graphql_name='stopCloudBroadcast', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(StopCloudBroadcastInput), graphql_name='input', default=None)),
))
    )
    stop_watch_party = sgqlc.types.Field('StopWatchPartyPayload', graphql_name='stopWatchParty', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(StopWatchPartyInput), graphql_name='input', default=None)),
))
    )
    submit_csatfeedback = sgqlc.types.Field('SubmitCSATFeedbackPayload', graphql_name='submitCSATFeedback', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SubmitCSATFeedbackInput), graphql_name='input', default=None)),
))
    )
    submit_emote_prefix = sgqlc.types.Field('SubmitEmotePrefixPayload', graphql_name='submitEmotePrefix', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SubmitEmotePrefixInput), graphql_name='input', default=None)),
))
    )
    submit_emoticon_prefix = sgqlc.types.Field('SubmitEmoticonPrefixPayload', graphql_name='submitEmoticonPrefix', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SubmitEmoticonPrefixInput), graphql_name='input', default=None)),
))
    )
    submit_extension_feedback = sgqlc.types.Field('SubmitExtensionFeedbackPayload', graphql_name='submitExtensionFeedback', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SubmitExtensionFeedbackInput), graphql_name='input', default=None)),
))
    )
    swap_competition_lobby_participants = sgqlc.types.Field('SwapCompetitionLobbyParticipantsPayload', graphql_name='swapCompetitionLobbyParticipants', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SwapCompetitionLobbyParticipantsInput), graphql_name='input', default=None)),
))
    )
    sync_game_on_drop_campaign = sgqlc.types.Field('SyncGameOnDropCampaignPayload', graphql_name='syncGameOnDropCampaign', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(SyncGameOnDropCampaignInput), graphql_name='input', default=None)),
))
    )
    terminate_poll = sgqlc.types.Field('TerminatePollPayload', graphql_name='terminatePoll', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(TerminatePollInput), graphql_name='input', default=None)),
))
    )
    terminate_poll_in_channel = sgqlc.types.Field('TerminatePollInChannelPayload', graphql_name='terminatePollInChannel', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(TerminatePollInChannelInput), graphql_name='input', default=None)),
))
    )
    toggle_rituals_enabled = sgqlc.types.Field('ToggleRitualsEnabledPayload', graphql_name='toggleRitualsEnabled', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ToggleRitualsEnabledInput), graphql_name='input', default=None)),
))
    )
    transition_extension_state = sgqlc.types.Field('TransitionExtensionStatePayload', graphql_name='transitionExtensionState', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(TransitionExtensionStateInput), graphql_name='input', default=None)),
))
    )
    unban_user_from_chat_room = sgqlc.types.Field('UnbanUserFromChatRoomPayload', graphql_name='unbanUserFromChatRoom', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnbanUserFromChatRoomInput), graphql_name='input', default=None)),
))
    )
    unblock_user = sgqlc.types.Field('UnblockUserPayload', graphql_name='unblockUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnblockUserInput), graphql_name='input', default=None)),
))
    )
    undo_recommendation_feedback = sgqlc.types.Field('UndoRecommendationFeedbackPayload', graphql_name='undoRecommendationFeedback', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UndoRecommendationFeedbackInput), graphql_name='input', default=None)),
))
    )
    unfollow_game = sgqlc.types.Field('UnfollowGamePayload', graphql_name='unfollowGame', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnfollowGameInput), graphql_name='input', default=None)),
))
    )
    unfollow_user = sgqlc.types.Field('UnfollowUserPayload', graphql_name='unfollowUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnfollowUserInput), graphql_name='input', default=None)),
))
    )
    unfriend_user = sgqlc.types.Field('UnfriendUserPayload', graphql_name='unfriendUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnfriendUserInput), graphql_name='input', default=None)),
))
    )
    unhost = sgqlc.types.Field('UnhostPayload', graphql_name='unhost', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnhostInput), graphql_name='input', default=None)),
))
    )
    uninstall_extension = sgqlc.types.Field('UninstallExtensionPayload', graphql_name='uninstallExtension', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UninstallExtensionInput), graphql_name='input', default=None)),
))
    )
    unlink_amazon_connection = sgqlc.types.Field('UnlinkAmazonConnectionPayload', graphql_name='unlinkAmazonConnection', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnlinkAmazonConnectionInput), graphql_name='input', default=None)),
))
    )
    unlink_riot_connection = sgqlc.types.Field('UnlinkRiotConnectionPayload', graphql_name='unlinkRiotConnection', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnlinkRiotConnectionInput), graphql_name='input', default=None)),
))
    )
    unlink_sso = sgqlc.types.Field('UnlinkSSOPayload', graphql_name='unlinkSSO', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnlinkSSOInput), graphql_name='input', default=None)),
))
    )
    unlock_chosen_modified_subscriber_emote = sgqlc.types.Field('UnlockChosenModifiedSubscriberEmotePayload', graphql_name='unlockChosenModifiedSubscriberEmote', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnlockChosenModifiedSubscriberEmoteInput), graphql_name='input', default=None)),
))
    )
    unlock_chosen_subscriber_emote = sgqlc.types.Field('UnlockChosenSubscriberEmotePayload', graphql_name='unlockChosenSubscriberEmote', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnlockChosenSubscriberEmoteInput), graphql_name='input', default=None)),
))
    )
    unlock_random_subscriber_emote = sgqlc.types.Field('UnlockRandomSubscriberEmotePayload', graphql_name='unlockRandomSubscriberEmote', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnlockRandomSubscriberEmoteInput), graphql_name='input', default=None)),
))
    )
    unmod_user = sgqlc.types.Field('UnmodUserPayload', graphql_name='unmodUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnmodUserInput), graphql_name='input', default=None)),
))
    )
    unset_hype_train_config = sgqlc.types.Field('UnsetHypeTrainConfigPayload', graphql_name='unsetHypeTrainConfig', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnsetHypeTrainConfigInput), graphql_name='input', default=None)),
))
    )
    unsubscribe_email = sgqlc.types.Field('UnsubscribeEmailPayload', graphql_name='unsubscribeEmail', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UnsubscribeEmailInput), graphql_name='input', default=None)),
))
    )
    update_ad_properties = sgqlc.types.Field('UpdateAdPropertiesPayload', graphql_name='updateAdProperties', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAdPropertiesInput), graphql_name='input', default=None)),
))
    )
    update_all_whisper_threads = sgqlc.types.Field('UpdateAllWhisperThreadsPayload', graphql_name='updateAllWhisperThreads', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAllWhisperThreadsInput), graphql_name='input', default=None)),
))
    )
    update_auto_mod_levels = sgqlc.types.Field('UpdateAutoModLevelsPayload', graphql_name='updateAutoModLevels', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAutoModLevelsInput), graphql_name='input', default=None)),
))
    )
    update_auto_mod_properties = sgqlc.types.Field('UpdateAutoModPropertiesPayload', graphql_name='updateAutoModProperties', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAutoModPropertiesInput), graphql_name='input', default=None)),
))
    )
    update_autohost_settings = sgqlc.types.Field('UpdateAutohostSettingsPayload', graphql_name='updateAutohostSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateAutohostSettingsInput), graphql_name='input', default=None)),
))
    )
    update_bits_badge_tier_notification = sgqlc.types.Field('UpdateBitsBadgeTierNotificationPayload', graphql_name='updateBitsBadgeTierNotification', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBitsBadgeTierNotificationInput), graphql_name='input', default=None)),
))
    )
    update_bits_badge_tiers = sgqlc.types.Field('UpdateBitsBadgeTiersPayload', graphql_name='updateBitsBadgeTiers', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBitsBadgeTiersInput), graphql_name='input', default=None)),
))
    )
    update_boost_settings = sgqlc.types.Field('UpdateBoostSettingsPayload', graphql_name='updateBoostSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBoostSettingsInput), graphql_name='input', default=None)),
))
    )
    update_broadcast_settings = sgqlc.types.Field('UpdateBroadcastSettingsPayload', graphql_name='updateBroadcastSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateBroadcastSettingsInput), graphql_name='input', default=None)),
))
    )
    update_celebration = sgqlc.types.Field('UpdateCelebrationPayload', graphql_name='updateCelebration', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCelebrationInput), graphql_name='input', default=None)),
))
    )
    update_celebration_config = sgqlc.types.Field('UpdateCelebrationConfigPayload', graphql_name='updateCelebrationConfig', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCelebrationConfigInput), graphql_name='input', default=None)),
))
    )
    update_celebration_product_config = sgqlc.types.Field('UpdateCelebrationProductConfigPayload', graphql_name='updateCelebrationProductConfig', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCelebrationProductConfigInput), graphql_name='input', default=None)),
))
    )
    update_celebration_user_settings = sgqlc.types.Field('UpdateCelebrationUserSettingsPayload', graphql_name='updateCelebrationUserSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCelebrationUserSettingsInput), graphql_name='input', default=None)),
))
    )
    update_changelog_read_time = sgqlc.types.Field('UpdateChangelogReadTimePayload', graphql_name='updateChangelogReadTime')
    update_chanlet_content_attributes = sgqlc.types.Field('UpdateChanletContentAttributesPayload', graphql_name='updateChanletContentAttributes', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateChanletContentAttributesInput), graphql_name='input', default=None)),
))
    )
    update_channel_clips_setting = sgqlc.types.Field('UpdateChannelClipsSettingPayload', graphql_name='updateChannelClipsSetting', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateChannelClipsSettingInput), graphql_name='input', default=None)),
))
    )
    update_channel_home_preferences = sgqlc.types.Field('UpdateChannelHomePreferencesPayload', graphql_name='updateChannelHomePreferences', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateChannelHomePreferencesInput), graphql_name='input', default=None)),
))
    )
    update_channel_prediction_settings = sgqlc.types.Field('UpdateChannelPredictionSettingsPayload', graphql_name='updateChannelPredictionSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateChannelPredictionSettingsInput), graphql_name='input', default=None)),
))
    )
    update_chat_color = sgqlc.types.Field('UpdateChatColorPayload', graphql_name='updateChatColor', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateChatColorInput), graphql_name='input', default=None)),
))
    )
    update_chat_settings = sgqlc.types.Field('UpdateChatSettingsPayload', graphql_name='updateChatSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateChatSettingsInput), graphql_name='input', default=None)),
))
    )
    update_cheer_partner_settings = sgqlc.types.Field('UpdateCheerPartnerSettingsPayload', graphql_name='updateCheerPartnerSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCheerPartnerSettingsInput), graphql_name='input', default=None)),
))
    )
    update_cheermote_tier = sgqlc.types.Field('UpdateCheermoteTierPayload', graphql_name='updateCheermoteTier', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCheermoteTierInput), graphql_name='input', default=None)),
))
    )
    update_clip = sgqlc.types.Field('UpdateClipPayload', graphql_name='updateClip', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateClipInput), graphql_name='input', default=None)),
))
    )
    update_clip_view_count = sgqlc.types.Field('UpdateClipViewCountPayload', graphql_name='updateClipViewCount', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateClipViewCountInput), graphql_name='input', default=None)),
))
    )
    update_collection = sgqlc.types.Field('UpdateCollectionPayload', graphql_name='updateCollection', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCollectionInput), graphql_name='input', default=None)),
))
    )
    update_community_points_automatic_reward = sgqlc.types.Field('UpdateCommunityPointsAutomaticRewardPayload', graphql_name='updateCommunityPointsAutomaticReward', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCommunityPointsAutomaticRewardInput), graphql_name='input', default=None)),
))
    )
    update_community_points_channel_settings = sgqlc.types.Field('UpdateCommunityPointsChannelSettingsPayload', graphql_name='updateCommunityPointsChannelSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCommunityPointsChannelSettingsInput), graphql_name='input', default=None)),
))
    )
    update_community_points_community_goal = sgqlc.types.Field('UpdateCommunityPointsCommunityGoalPayload', graphql_name='updateCommunityPointsCommunityGoal', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCommunityPointsCommunityGoalInput), graphql_name='input', default=None)),
))
    )
    update_community_points_custom_reward = sgqlc.types.Field('UpdateCommunityPointsCustomRewardPayload', graphql_name='updateCommunityPointsCustomReward', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCommunityPointsCustomRewardInput), graphql_name='input', default=None)),
))
    )
    update_community_points_custom_reward_redemption_status = sgqlc.types.Field('UpdateCommunityPointsCustomRewardRedemptionStatusPayload', graphql_name='updateCommunityPointsCustomRewardRedemptionStatus', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCommunityPointsCustomRewardRedemptionStatusInput), graphql_name='input', default=None)),
))
    )
    update_community_points_custom_reward_redemption_statuses_by_channel = sgqlc.types.Field('UpdateCommunityPointsCustomRewardRedemptionStatusesByChannelPayload', graphql_name='updateCommunityPointsCustomRewardRedemptionStatusesByChannel', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCommunityPointsCustomRewardRedemptionStatusesByChannelInput), graphql_name='input', default=None)),
))
    )
    update_community_points_custom_reward_redemption_statuses_by_redemptions = sgqlc.types.Field('UpdateCommunityPointsCustomRewardRedemptionStatusesByRedemptionsPayload', graphql_name='updateCommunityPointsCustomRewardRedemptionStatusesByRedemptions', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCommunityPointsCustomRewardRedemptionStatusesByRedemptionsInput), graphql_name='input', default=None)),
))
    )
    update_community_points_custom_reward_redemption_statuses_by_reward = sgqlc.types.Field('UpdateCommunityPointsCustomRewardRedemptionStatusesByRewardPayload', graphql_name='updateCommunityPointsCustomRewardRedemptionStatusesByReward', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCommunityPointsCustomRewardRedemptionStatusesByRewardInput), graphql_name='input', default=None)),
))
    )
    update_community_points_early_access_settings = sgqlc.types.Field('UpdateCommunityPointsEarlyAccessSettingsPayload', graphql_name='updateCommunityPointsEarlyAccessSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCommunityPointsEarlyAccessSettingsInput), graphql_name='input', default=None)),
))
    )
    update_community_points_last_viewed_content = sgqlc.types.Field('UpdateCommunityPointsLastViewedContentPayload', graphql_name='updateCommunityPointsLastViewedContent', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCommunityPointsLastViewedContentInput), graphql_name='input', default=None)),
))
    )
    update_community_points_smart_costs_acknowledgements = sgqlc.types.Field('UpdateCommunityPointsSmartCostsAcknowledgementsPayload', graphql_name='updateCommunityPointsSmartCostsAcknowledgements', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCommunityPointsSmartCostsAcknowledgementsInput), graphql_name='input', default=None)),
))
    )
    update_competition = sgqlc.types.Field('UpdateCompetitionPayload', graphql_name='updateCompetition', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCompetitionInput), graphql_name='input', default=None)),
))
    )
    update_competition_player = sgqlc.types.Field('UpdateCompetitionPlayerPayload', graphql_name='updateCompetitionPlayer', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCompetitionPlayerInput), graphql_name='input', default=None)),
))
    )
    update_competition_team = sgqlc.types.Field('UpdateCompetitionTeamPayload', graphql_name='updateCompetitionTeam', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateCompetitionTeamInput), graphql_name='input', default=None)),
))
    )
    update_consent = sgqlc.types.Field('UpdateConsentPayload', graphql_name='updateConsent', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateConsentInput), graphql_name='input', default=None)),
))
    )
    update_content_tags = sgqlc.types.Field('UpdateContentTagsPayload', graphql_name='updateContentTags', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateContentTagsInput), graphql_name='input', default=None)),
))
    )
    update_drop_benefit = sgqlc.types.Field('UpdateDropBenefitPayload', graphql_name='updateDropBenefit', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateDropBenefitInput), graphql_name='input', default=None)),
))
    )
    update_drop_benefit_on_drop = sgqlc.types.Field('UpdateDropBenefitOnDropPayload', graphql_name='updateDropBenefitOnDrop', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateDropBenefitOnDropInput), graphql_name='input', default=None)),
))
    )
    update_drop_preconditions = sgqlc.types.Field('UpdateDropPreconditionsPayload', graphql_name='updateDropPreconditions', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateDropPreconditionsInput), graphql_name='input', default=None)),
))
    )
    update_drops_opt_out_status = sgqlc.types.Field('UpdateDropsOptOutStatusPayload', graphql_name='updateDropsOptOutStatus', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateDropsOptOutStatusInput), graphql_name='input', default=None)),
))
    )
    update_emote_orders = sgqlc.types.Field('UpdateEmoteOrdersPayload', graphql_name='updateEmoteOrders', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateEmoteOrdersInput), graphql_name='input', default=None)),
))
    )
    update_extension_discovery_data = sgqlc.types.Field('UpdateExtensionDiscoveryDataPayload', graphql_name='updateExtensionDiscoveryData', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateExtensionDiscoveryDataInput), graphql_name='input', default=None)),
))
    )
    update_extension_manifest = sgqlc.types.Field('UpdateExtensionManifestPayload', graphql_name='updateExtensionManifest', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateExtensionManifestInput), graphql_name='input', default=None)),
))
    )
    update_hype_train_config = sgqlc.types.Field('UpdateHypeTrainConfigPayload', graphql_name='updateHypeTrainConfig', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateHypeTrainConfigInput), graphql_name='input', default=None)),
))
    )
    update_is_sharing_activity = sgqlc.types.Field('UpdateIsSharingActivityPayload', graphql_name='updateIsSharingActivity', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateIsSharingActivityInput), graphql_name='input', default=None)),
))
    )
    update_lwatoken = sgqlc.types.Field('UpdateLWATokenPayload', graphql_name='updateLWAToken', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateLWATokenInput), graphql_name='input', default=None)),
))
    )
    update_leaderboard_settings = sgqlc.types.Field('UpdateLeaderboardSettingsPayload', graphql_name='updateLeaderboardSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateLeaderboardSettingsInput), graphql_name='input', default=None)),
))
    )
    update_live_up_notification = sgqlc.types.Field('UpdateLiveUpNotificationPayload', graphql_name='updateLiveUpNotification', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateLiveUpNotificationInput), graphql_name='input', default=None)),
))
    )
    update_lobby_participant_score = sgqlc.types.Field('UpdateLobbyParticipantScorePayload', graphql_name='updateLobbyParticipantScore', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateLobbyParticipantScoreInput), graphql_name='input', default=None)),
))
    )
    update_multiview_content_attributes = sgqlc.types.Field('UpdateMultiviewContentAttributesPayload', graphql_name='updateMultiviewContentAttributes', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateMultiviewContentAttributesInput), graphql_name='input', default=None)),
))
    )
    update_onboarding_skipped_channels = sgqlc.types.Field('UpdateOnboardingSkippedChannelsPayload', graphql_name='updateOnboardingSkippedChannels', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOnboardingSkippedChannelsInput), graphql_name='input', default=None)),
))
    )
    update_organization_member_role = sgqlc.types.Field('UpdateOrganizationMemberRolePayload', graphql_name='updateOrganizationMemberRole', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOrganizationMemberRoleInput), graphql_name='input', default=None)),
))
    )
    update_owner_chanlet_attributes = sgqlc.types.Field('UpdateOwnerChanletAttributesPayload', graphql_name='updateOwnerChanletAttributes', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateOwnerChanletAttributesInput), graphql_name='input', default=None)),
))
    )
    update_panel = sgqlc.types.Field('UpdatePanelPayload', graphql_name='updatePanel', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePanelInput), graphql_name='input', default=None)),
))
    )
    update_phone_number = sgqlc.types.Field('UpdatePhoneNumberPayload', graphql_name='updatePhoneNumber', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePhoneNumberInput), graphql_name='input', default=None)),
))
    )
    update_phone_number_confirmation = sgqlc.types.Field('UpdatePhoneNumberConfirmationPayload', graphql_name='updatePhoneNumberConfirmation', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePhoneNumberConfirmationInput), graphql_name='input', default=None)),
))
    )
    update_prime_offer_status = sgqlc.types.Field('UpdatePrimeOfferStatusPayload', graphql_name='updatePrimeOfferStatus', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePrimeOfferStatusInput), graphql_name='input', default=None)),
))
    )
    update_prime_settings = sgqlc.types.Field('UpdatePrimeSettingsPayload', graphql_name='updatePrimeSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdatePrimeSettingsInput), graphql_name='input', default=None)),
))
    )
    update_raid_settings = sgqlc.types.Field('UpdateRaidSettingsPayload', graphql_name='updateRaidSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateRaidSettingsInput), graphql_name='input', default=None)),
))
    )
    update_room = sgqlc.types.Field('UpdateRoomPayload', graphql_name='updateRoom', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateRoomInput), graphql_name='input', default=None)),
))
    )
    update_room_modes = sgqlc.types.Field('UpdateRoomModesPayload', graphql_name='updateRoomModes', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateRoomModesInput), graphql_name='input', default=None)),
))
    )
    update_room_view = sgqlc.types.Field('UpdateRoomViewPayload', graphql_name='updateRoomView', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateRoomViewInput), graphql_name='input', default=None)),
))
    )
    update_schedule_segment = sgqlc.types.Field('UpdateScheduleSegmentPayload', graphql_name='updateScheduleSegment', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateScheduleSegmentInput), graphql_name='input', default=None)),
))
    )
    update_seen_creator_onboarding_content = sgqlc.types.Field('UpdateSeenCreatorOnboardingContentPayload', graphql_name='updateSeenCreatorOnboardingContent', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSeenCreatorOnboardingContentInput), graphql_name='input', default=None)),
))
    )
    update_social_media = sgqlc.types.Field('UpdateSocialMediaPayload', graphql_name='updateSocialMedia', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSocialMediaInput), graphql_name='input', default=None)),
))
    )
    update_squad_invite_policy = sgqlc.types.Field('UpdateSquadInvitePolicyPayload', graphql_name='updateSquadInvitePolicy', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSquadInvitePolicyInput), graphql_name='input', default=None)),
))
    )
    update_squad_stream = sgqlc.types.Field('UpdateSquadStreamPayload', graphql_name='updateSquadStream', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSquadStreamInput), graphql_name='input', default=None)),
))
    )
    update_stucco = sgqlc.types.Field('UpdateStuccoPayload', graphql_name='updateStucco', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateStuccoInput), graphql_name='input', default=None)),
))
    )
    update_stucco_pack = sgqlc.types.Field('UpdateStuccoPackPayload', graphql_name='updateStuccoPack', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateStuccoPackInput), graphql_name='input', default=None)),
))
    )
    update_subscription_product = sgqlc.types.Field('UpdateSubscriptionProductPayload', graphql_name='updateSubscriptionProduct', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateSubscriptionProductInput), graphql_name='input', default=None)),
))
    )
    update_user = sgqlc.types.Field('UpdateUserPayload', graphql_name='updateUser', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateUserInput), graphql_name='input', default=None)),
))
    )
    update_user_colors = sgqlc.types.Field('UpdateUserColorsPayload', graphql_name='updateUserColors', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateUserColorsInput), graphql_name='input', default=None)),
))
    )
    update_user_create_date_hidden = sgqlc.types.Field('UpdateUserCreateDateHiddenPayload', graphql_name='updateUserCreateDateHidden', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateUserCreateDateHiddenInput), graphql_name='input', default=None)),
))
    )
    update_user_directory_hidden = sgqlc.types.Field('UpdateUserDirectoryHiddenPayload', graphql_name='updateUserDirectoryHidden', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateUserDirectoryHiddenInput), graphql_name='input', default=None)),
))
    )
    update_user_email_reusable = sgqlc.types.Field('UpdateUserEmailReusablePayload', graphql_name='updateUserEmailReusable', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateUserEmailReusableInput), graphql_name='input', default=None)),
))
    )
    update_user_is_email_revert_success = sgqlc.types.Field('UpdateUserIsEmailRevertSuccessPayload', graphql_name='updateUserIsEmailRevertSuccess', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateUserIsEmailRevertSuccessInput), graphql_name='input', default=None)),
))
    )
    update_user_prediction_settings = sgqlc.types.Field('UpdateUserPredictionSettingsPayload', graphql_name='updateUserPredictionSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateUserPredictionSettingsInput), graphql_name='input', default=None)),
))
    )
    update_user_subscription_settings = sgqlc.types.Field('UpdateUserSubscriptionSettingsPayload', graphql_name='updateUserSubscriptionSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateUserSubscriptionSettingsInput), graphql_name='input', default=None)),
))
    )
    update_user_team_membership = sgqlc.types.Field('UpdateUserTeamMembershipPayload', graphql_name='updateUserTeamMembership', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateUserTeamMembershipInput), graphql_name='input', default=None)),
))
    )
    update_user_video_shelves = sgqlc.types.Field('UpdateUserVideoShelvesPayload', graphql_name='updateUserVideoShelves', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateUserVideoShelvesInput), graphql_name='input', default=None)),
))
    )
    update_user_viewed_video = sgqlc.types.Field('UpdateUserViewedVideoPayload', graphql_name='updateUserViewedVideo', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateUserViewedVideoInput), graphql_name='input', default=None)),
))
    )
    update_video = sgqlc.types.Field('UpdateVideoPayload', graphql_name='updateVideo', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateVideoInput), graphql_name='input', default=None)),
))
    )
    update_video_comment = sgqlc.types.Field('UpdateVideoCommentPayload', graphql_name='updateVideoComment', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateVideoCommentInput), graphql_name='input', default=None)),
))
    )
    update_video_stream_settings = sgqlc.types.Field('UpdateVideoStreamSettingsPayload', graphql_name='updateVideoStreamSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateVideoStreamSettingsInput), graphql_name='input', default=None)),
))
    )
    update_visibility = sgqlc.types.Field('UpdateVisibilityPayload', graphql_name='updateVisibility', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateVisibilityInput), graphql_name='input', default=None)),
))
    )
    update_whisper_settings = sgqlc.types.Field('UpdateWhisperSettingsPayload', graphql_name='updateWhisperSettings', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWhisperSettingsInput), graphql_name='input', default=None)),
))
    )
    update_whisper_thread = sgqlc.types.Field('UpdateWhisperThreadPayload', graphql_name='updateWhisperThread', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UpdateWhisperThreadInput), graphql_name='input', default=None)),
))
    )
    upload_competition_image = sgqlc.types.Field('UploadCompetitionImagePayload', graphql_name='uploadCompetitionImage', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UploadCompetitionImageInput), graphql_name='input', default=None)),
))
    )
    use_chat_notification_token = sgqlc.types.Field('UseChatNotificationTokenPayload', graphql_name='useChatNotificationToken', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UseChatNotificationTokenInput), graphql_name='input', default=None)),
))
    )
    validate_verification_code = sgqlc.types.Field('ValidateVerificationCodePayload', graphql_name='validateVerificationCode', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(ValidateVerificationCodeInput), graphql_name='input', default=None)),
))
    )
    verify_contact_method = sgqlc.types.Field('VerifyContactMethodPayload', graphql_name='verifyContactMethod', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(VerifyContactMethodInput), graphql_name='input', default=None)),
))
    )
    verify_one_time_password = sgqlc.types.Field('VerifyOneTimePasswordPayload', graphql_name='verifyOneTimePassword', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(VerifyOneTimePasswordInput), graphql_name='input', default=None)),
))
    )
    verify_rewarded_video_eligibility_captcha = sgqlc.types.Field('VerifyRewardedVideoEligibilityCaptchaPayload', graphql_name='verifyRewardedVideoEligibilityCaptcha', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(VerifyRewardedVideoEligibilityCaptchaInput), graphql_name='input', default=None)),
))
    )
    viewed_notifications = sgqlc.types.Field('ViewedNotificationsPayload', graphql_name='viewedNotifications')
    visit_stream_manager = sgqlc.types.Field('VisitStreamManagerPayload', graphql_name='visitStreamManager', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(VisitStreamManagerInput), graphql_name='input', default=None)),
))
    )
    vote_in_ad_poll = sgqlc.types.Field('VoteInAdPollPayload', graphql_name='voteInAdPoll', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(VoteInAdPollInput), graphql_name='input', default=None)),
))
    )
    vote_in_poll = sgqlc.types.Field('VoteInPollPayload', graphql_name='voteInPoll', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(VoteInPollInput), graphql_name='input', default=None)),
))
    )
    vote_in_poll_by_choice_index = sgqlc.types.Field('VoteInPollByChoiceIndexPayload', graphql_name='voteInPollByChoiceIndex', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(VoteInPollByChoiceIndexInput), graphql_name='input', default=None)),
))
    )


class OAuthApp(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('category', 'created_at', 'id', 'name', 'other_description', 'owner', 'redirect_uri', 'secret', 'updated_at', 'will_tokens_expire')
    category = sgqlc.types.Field(OAuthAppCategory, graphql_name='category')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    other_description = sgqlc.types.Field(String, graphql_name='otherDescription')
    owner = sgqlc.types.Field('User', graphql_name='owner')
    redirect_uri = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='redirectURI')
    secret = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='secret')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='updatedAt')
    will_tokens_expire = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='willTokensExpire')


class OAuthAppConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OAuthAppEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')


class OAuthAppEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(OAuthApp), graphql_name='node')


class OEmbed(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('author_name', 'author_url', 'cache_age', 'input_url', 'provider_name', 'provider_url', 'thumbnail', 'title', 'type', 'version')
    author_name = sgqlc.types.Field(String, graphql_name='authorName')
    author_url = sgqlc.types.Field(String, graphql_name='authorURL')
    cache_age = sgqlc.types.Field(Int, graphql_name='cacheAge')
    input_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='inputURL')
    provider_name = sgqlc.types.Field(String, graphql_name='providerName')
    provider_url = sgqlc.types.Field(String, graphql_name='providerURL')
    thumbnail = sgqlc.types.Field('ThumbnailOEmbed', graphql_name='thumbnail')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')


class Offer(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('eligibility', 'end_at', 'gift_type', 'id', 'listing', 'platform', 'promotion', 'quantity', 'self', 'start_at', 'tag_bindings', 'tplr')
    eligibility = sgqlc.types.Field(sgqlc.types.non_null('OfferEligibility'), graphql_name='eligibility')
    end_at = sgqlc.types.Field(Time, graphql_name='endAt')
    gift_type = sgqlc.types.Field(GiftType, graphql_name='giftType')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    listing = sgqlc.types.Field('OfferListing', graphql_name='listing')
    platform = sgqlc.types.Field(sgqlc.types.non_null(OfferPlatform), graphql_name='platform')
    promotion = sgqlc.types.Field('OfferPromotion', graphql_name='promotion')
    quantity = sgqlc.types.Field('Range', graphql_name='quantity')
    self = sgqlc.types.Field('OfferSelfEdge', graphql_name='self')
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')
    tag_bindings = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OfferTagBinding'))), graphql_name='tagBindings')
    tplr = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='tplr')


class OfferEligibility(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('benefits_end_at', 'benefits_start_at', 'is_eligible', 'max_quantity_override', 'purchase_type', 'reason_code')
    benefits_end_at = sgqlc.types.Field(Time, graphql_name='benefitsEndAt')
    benefits_start_at = sgqlc.types.Field(Time, graphql_name='benefitsStartAt')
    is_eligible = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEligible')
    max_quantity_override = sgqlc.types.Field(Int, graphql_name='maxQuantityOverride')
    purchase_type = sgqlc.types.Field(sgqlc.types.non_null(OfferPurchaseType), graphql_name='purchaseType')
    reason_code = sgqlc.types.Field(OfferIneligibilityReasonCode, graphql_name='reasonCode')


class OfferListing(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cancellation_policy', 'charge_model')
    cancellation_policy = sgqlc.types.Field(sgqlc.types.non_null(CancellationPolicyType), graphql_name='cancellationPolicy')
    charge_model = sgqlc.types.Field(sgqlc.types.non_null(ChargeModel), graphql_name='chargeModel')


class OfferPromotion(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('end_at', 'id', 'listing', 'name', 'priority', 'promo_display', 'start_at')
    end_at = sgqlc.types.Field(Time, graphql_name='endAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    listing = sgqlc.types.Field(sgqlc.types.non_null(OfferListing), graphql_name='listing')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    priority = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='priority')
    promo_display = sgqlc.types.Field(sgqlc.types.non_null('PromotionDisplay'), graphql_name='promoDisplay')
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')


class OfferSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('checkout_actions', 'checkout_configuration', 'eligible_payment_methods')
    checkout_actions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CheckoutAction)), graphql_name='checkoutActions', args=sgqlc.types.ArgDict((
        ('quantity', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='quantity', default=None)),
        ('payment_session', sgqlc.types.Arg(PaymentSession, graphql_name='paymentSession', default=None)),
))
    )
    checkout_configuration = sgqlc.types.Field(CheckoutConfiguration, graphql_name='checkoutConfiguration')
    eligible_payment_methods = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(EligiblePaymentMethod)), graphql_name='eligiblePaymentMethods')


class OfferTagBinding(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('key', 'value')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')


class Onboarding(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('onboarding_streams', 'skipped_channel_ids')
    onboarding_streams = sgqlc.types.Field(sgqlc.types.list_of('Stream'), graphql_name='onboardingStreams', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=3)),
        ('locale', sgqlc.types.Arg(String, graphql_name='locale', default=None)),
        ('languages', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(Language)), graphql_name='languages', default=None)),
        ('games', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='games', default=None)),
))
    )
    skipped_channel_ids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='skippedChannelIDs')


class OnsiteNotification(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('actions', 'body', 'category', 'created_at', 'creators', 'destination_type', 'display_type', 'extra', 'id', 'is_read', 'render_style', 'thumbnail_url', 'type', 'updated_at')
    actions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OnsiteNotificationAction'))), graphql_name='actions')
    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='body')
    category = sgqlc.types.Field(String, graphql_name='category')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    creators = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('User')), graphql_name='creators')
    destination_type = sgqlc.types.Field(String, graphql_name='destinationType')
    display_type = sgqlc.types.Field(sgqlc.types.non_null(OnsiteNotificationDisplayType), graphql_name='displayType')
    extra = sgqlc.types.Field('OnsiteNotificationContent', graphql_name='extra')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_read = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRead')
    render_style = sgqlc.types.Field(sgqlc.types.non_null(OnsiteNotificationRenderStyle), graphql_name='renderStyle')
    thumbnail_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='thumbnailURL')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='updatedAt')


class OnsiteNotificationAction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('body', 'id', 'label', 'modal_id', 'type', 'url')
    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='body')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    label = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='label')
    modal_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='modalID')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class OnsiteNotificationConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'summary')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OnsiteNotificationEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field('PageInfo', graphql_name='pageInfo')
    summary = sgqlc.types.Field('OnsiteNotificationsSummary', graphql_name='summary')


class OnsiteNotificationEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(OnsiteNotification), graphql_name='node')


class OnsiteNotificationExternalLink(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('url',)
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class OnsiteNotificationsSummary(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('creator_unread_summary', 'last_seen_at', 'unseen_count', 'viewer_unread_summary')
    creator_unread_summary = sgqlc.types.Field('OnsiteNotificationsUnreadSummary', graphql_name='creatorUnreadSummary')
    last_seen_at = sgqlc.types.Field(Time, graphql_name='lastSeenAt')
    unseen_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='unseenCount')
    viewer_unread_summary = sgqlc.types.Field('OnsiteNotificationsUnreadSummary', graphql_name='viewerUnreadSummary')


class OnsiteNotificationsUnreadSummary(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('last_read_all_at', 'unread_count')
    last_read_all_at = sgqlc.types.Field(Time, graphql_name='lastReadAllAt')
    unread_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='unreadCount')


class OrderPanelsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('panels',)
    panels = sgqlc.types.Field(sgqlc.types.list_of('Panel'), graphql_name='panels')


class Organization(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bounty_campaigns', 'brand_portal_settings', 'curse_company_id', 'drop_campaigns', 'drops', 'estimated_broadcaster_viewer_reach', 'games', 'id', 'invites', 'is_campaigns_enabled', 'is_contract_signed', 'is_legacy', 'members', 'name', 'self', 'type', 'url')
    bounty_campaigns = sgqlc.types.Field(BountyCampaignConnection, graphql_name='bountyCampaigns', args=sgqlc.types.ArgDict((
        ('campaign_id', sgqlc.types.Arg(ID, graphql_name='campaignID', default=None)),
        ('status', sgqlc.types.Arg(BountyCampaignStatus, graphql_name='status', default=None)),
))
    )
    brand_portal_settings = sgqlc.types.Field(BrandPortalSettings, graphql_name='brandPortalSettings')
    curse_company_id = sgqlc.types.Field(ID, graphql_name='curseCompanyID')
    drop_campaigns = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DropCampaign)), graphql_name='dropCampaigns')
    drops = sgqlc.types.Field(sgqlc.types.non_null('OrganizationDrops'), graphql_name='drops')
    estimated_broadcaster_viewer_reach = sgqlc.types.Field(BroadcasterViewerReach, graphql_name='estimatedBroadcasterViewerReach', args=sgqlc.types.ArgDict((
        ('game_names', sgqlc.types.Arg(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='gameNames', default=None)),
        ('target_all_broadcasters', sgqlc.types.Arg(sgqlc.types.non_null(Boolean), graphql_name='targetAllBroadcasters', default=None)),
        ('target_variety_broadcasters', sgqlc.types.Arg(sgqlc.types.non_null(Boolean), graphql_name='targetVarietyBroadcasters', default=None)),
        ('stream_length_seconds', sgqlc.types.Arg(Int, graphql_name='streamLengthSeconds', default=None)),
        ('target_all_countries', sgqlc.types.Arg(Boolean, graphql_name='targetAllCountries', default=False)),
        ('target_all_games', sgqlc.types.Arg(Boolean, graphql_name='targetAllGames', default=False)),
        ('countries', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='countries', default=[])),
))
    )
    games = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Game')), graphql_name='games', args=sgqlc.types.ArgDict((
        ('include_bounty_board_games', sgqlc.types.Arg(Boolean, graphql_name='includeBountyBoardGames', default=False)),
))
    )
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    invites = sgqlc.types.Field('OrganizationInviteConnection', graphql_name='invites', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    is_campaigns_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCampaignsEnabled')
    is_contract_signed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isContractSigned')
    is_legacy = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isLegacy')
    members = sgqlc.types.Field('OrganizationMemberConnection', graphql_name='members', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('input', sgqlc.types.Arg(OrganizationMembersInput, graphql_name='input', default=None)),
))
    )
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    self = sgqlc.types.Field('OrganizationSelfEdge', graphql_name='self')
    type = sgqlc.types.Field(sgqlc.types.non_null(OrganizationType), graphql_name='type')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class OrganizationApplication(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('contact_email', 'organization_name', 'status')
    contact_email = sgqlc.types.Field(String, graphql_name='contactEmail')
    organization_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='organizationName')
    status = sgqlc.types.Field(sgqlc.types.non_null(OrganizationAppilcationStatus), graphql_name='status')


class OrganizationDrops(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('benefits', 'campaigns')
    benefits = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DropBenefit)), graphql_name='benefits')
    campaigns = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DropCampaign)), graphql_name='campaigns')


class OrganizationInvite(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('created_at', 'expires_at', 'id', 'invitee', 'inviter', 'organization_id', 'organization_name', 'role')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    expires_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='expiresAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    invitee = sgqlc.types.Field('User', graphql_name='invitee')
    inviter = sgqlc.types.Field('User', graphql_name='inviter')
    organization_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='organizationID')
    organization_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='organizationName')
    role = sgqlc.types.Field(sgqlc.types.non_null(OrganizationMemberRole), graphql_name='role')


class OrganizationInviteConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OrganizationInviteEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class OrganizationInviteEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(OrganizationInvite), graphql_name='node')


class OrganizationInviteUserConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count', 'is_within_organization_membership_limit')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(OrganizationInviteEdge))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    is_within_organization_membership_limit = sgqlc.types.Field(Boolean, graphql_name='isWithinOrganizationMembershipLimit')


class OrganizationMember(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('email', 'first_name', 'id', 'last_name', 'role', 'title', 'user')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    role = sgqlc.types.Field(sgqlc.types.non_null(OrganizationMemberRole), graphql_name='role')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    user = sgqlc.types.Field('User', graphql_name='user')


class OrganizationMemberConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('OrganizationMemberEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class OrganizationMemberEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'joined_at', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    joined_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='joinedAt')
    node = sgqlc.types.Field(sgqlc.types.non_null(OrganizationMember), graphql_name='node')


class OrganizationSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_add_member', 'can_leave_organization', 'can_remove_member', 'joined_at', 'role')
    can_add_member = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canAddMember')
    can_leave_organization = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canLeaveOrganization')
    can_remove_member = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canRemoveMember')
    joined_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='joinedAt')
    role = sgqlc.types.Field(sgqlc.types.non_null(OrganizationMemberRole), graphql_name='role')


class OutgoingFriendRequestConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OutgoingFriendRequestEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null('PageInfo'), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class OutgoingFriendRequestEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('created_at', 'cursor', 'node')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('User', graphql_name='node')


class OverwatchLeagueTeamPreference(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('available_teams_set', 'id', 'selected_team')
    available_teams_set = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('OverwatchTeamPreferenceOption')), graphql_name='availableTeamsSet')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    selected_team = sgqlc.types.Field('OverwatchTeamPreferenceOption', graphql_name='selectedTeam')


class OverwatchMomentDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('event', 'hero_name', 'role')
    event = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='event')
    hero_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='heroName')
    role = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='role')


class OverwatchTeamPreferenceOption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'rewards', 'team_name')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    rewards = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TournamentReward')), graphql_name='rewards')
    team_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='teamName')


class OwnerChanletAttributes(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_chanlet_feature_enabled',)
    is_chanlet_feature_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isChanletFeatureEnabled')


class PUBGMomentDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bucket', 'event', 'game_mode', 'max_player_count', 'min_player_count')
    bucket = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bucket')
    event = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='event')
    game_mode = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='gameMode')
    max_player_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='maxPlayerCount')
    min_player_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='minPlayerCount')


class PageInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('has_next_page', 'has_previous_page')
    has_next_page = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasNextPage')
    has_previous_page = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasPreviousPage')


class PaidUpgrade(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('origin_id', 'price', 'price_info', 'starts_at', 'tier')
    origin_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='originID')
    price = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='price')
    price_info = sgqlc.types.Field(sgqlc.types.non_null('PriceInfo'), graphql_name='priceInfo', args=sgqlc.types.ArgDict((
        ('tax_country', sgqlc.types.Arg(String, graphql_name='taxCountry', default=None)),
))
    )
    starts_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startsAt')
    tier = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='tier')


class Panel(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('id', 'type')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    type = sgqlc.types.Field(sgqlc.types.non_null(PanelType), graphql_name='type')


class Partnership(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_partner',)
    is_partner = sgqlc.types.Field(Boolean, graphql_name='isPartner')


class PartnershipApplication(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'resolved_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    resolved_at = sgqlc.types.Field(Time, graphql_name='resolvedAt')


class PathToAffiliate(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('average_viewers', 'badge_url', 'completed_at', 'followers', 'hours_streamed', 'quest_evaluation_interval', 'unique_days_streamed')
    average_viewers = sgqlc.types.Field('QuestGoalFloat', graphql_name='averageViewers')
    badge_url = sgqlc.types.Field(String, graphql_name='badgeURL')
    completed_at = sgqlc.types.Field(Time, graphql_name='completedAt')
    followers = sgqlc.types.Field('QuestGoalInt', graphql_name='followers')
    hours_streamed = sgqlc.types.Field('QuestGoalFloat', graphql_name='hoursStreamed')
    quest_evaluation_interval = sgqlc.types.Field('QuestEvaluationInterval', graphql_name='questEvaluationInterval')
    unique_days_streamed = sgqlc.types.Field('QuestGoalInt', graphql_name='uniqueDaysStreamed')


class PathToPartner(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('average_viewers', 'badge_url', 'completed_at', 'hours_streamed', 'quest_evaluation_interval', 'unique_days_streamed')
    average_viewers = sgqlc.types.Field('QuestGoalFloat', graphql_name='averageViewers')
    badge_url = sgqlc.types.Field(String, graphql_name='badgeURL')
    completed_at = sgqlc.types.Field(Time, graphql_name='completedAt')
    hours_streamed = sgqlc.types.Field('QuestGoalFloat', graphql_name='hoursStreamed')
    quest_evaluation_interval = sgqlc.types.Field('QuestEvaluationInterval', graphql_name='questEvaluationInterval')
    unique_days_streamed = sgqlc.types.Field('QuestGoalInt', graphql_name='uniqueDaysStreamed')


class PayWithAmazonConfigs(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('client_id', 'is_production', 'seller_id')
    client_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='clientID')
    is_production = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isProduction')
    seller_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='sellerID')


class PayableStatus(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_payable',)
    is_payable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPayable')


class PaymentIncentiveMetricsRollup(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('advertising_density', 'live_hours_broadcast', 'live_minutes_watched', 'timestamp', 'vod_minutes_watched')
    advertising_density = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='advertisingDensity')
    live_hours_broadcast = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='liveHoursBroadcast')
    live_minutes_watched = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='liveMinutesWatched')
    timestamp = sgqlc.types.Field(Time, graphql_name='timestamp')
    vod_minutes_watched = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='vodMinutesWatched')


class PaymentMethod(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('billing_country', 'billing_email', 'card_type', 'charge_instrument_id', 'expiration_month', 'expiration_year', 'ext_method_id', 'is_restricted', 'last_four', 'payment_scheme', 'payment_type', 'provider', 'purchase_profiles', 'recurring_payment_details')
    billing_country = sgqlc.types.Field(String, graphql_name='billingCountry')
    billing_email = sgqlc.types.Field(String, graphql_name='billingEmail')
    card_type = sgqlc.types.Field(PaymentCardType, graphql_name='cardType')
    charge_instrument_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='chargeInstrumentID')
    expiration_month = sgqlc.types.Field(Int, graphql_name='expirationMonth')
    expiration_year = sgqlc.types.Field(Int, graphql_name='expirationYear')
    ext_method_id = sgqlc.types.Field(ID, graphql_name='extMethodID')
    is_restricted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRestricted')
    last_four = sgqlc.types.Field(String, graphql_name='lastFour')
    payment_scheme = sgqlc.types.Field(PaymentScheme, graphql_name='paymentScheme')
    payment_type = sgqlc.types.Field(sgqlc.types.non_null(PaymentInstrumentType), graphql_name='paymentType')
    provider = sgqlc.types.Field(sgqlc.types.non_null(PaymentProvider), graphql_name='provider')
    purchase_profiles = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PurchaseProfile')), graphql_name='purchaseProfiles')
    recurring_payment_details = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('RecurringPaymentDetail')), graphql_name='recurringPaymentDetails')


class PaymentProviderConfigs(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('recurly', 'xsolla', 'zuora')
    recurly = sgqlc.types.Field(sgqlc.types.non_null('RecurlyConfigs'), graphql_name='recurly')
    xsolla = sgqlc.types.Field(sgqlc.types.non_null('XsollaConfigs'), graphql_name='xsolla')
    zuora = sgqlc.types.Field(sgqlc.types.non_null('ZuoraConfigs'), graphql_name='zuora')


class PaymentTransaction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('currency', 'gross_amount', 'gross_amount_divisor', 'id', 'is_gift', 'payment_method', 'product', 'purchase_order_id', 'purchased_at', 'quantity', 'recipient')
    currency = sgqlc.types.Field(String, graphql_name='currency')
    gross_amount = sgqlc.types.Field(Int, graphql_name='grossAmount')
    gross_amount_divisor = sgqlc.types.Field(Int, graphql_name='grossAmountDivisor')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_gift = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isGift')
    payment_method = sgqlc.types.Field(sgqlc.types.non_null(PaymentMethod), graphql_name='paymentMethod')
    product = sgqlc.types.Field(sgqlc.types.non_null('PaymentTransactionProduct'), graphql_name='product')
    purchase_order_id = sgqlc.types.Field(ID, graphql_name='purchaseOrderID')
    purchased_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='purchasedAt')
    quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='quantity')
    recipient = sgqlc.types.Field('User', graphql_name='recipient')


class PaymentTransactionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'first_purchased_at', 'last_purchased_at', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PaymentTransactionEdge')), graphql_name='edges')
    first_purchased_at = sgqlc.types.Field(Time, graphql_name='firstPurchasedAt')
    last_purchased_at = sgqlc.types.Field(Time, graphql_name='lastPurchasedAt')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class PaymentTransactionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(PaymentTransaction, graphql_name='node')


class PaymentTransactionProduct(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bundle_size', 'name', 'owner', 'tier', 'type')
    bundle_size = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bundleSize')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner = sgqlc.types.Field('User', graphql_name='owner')
    tier = sgqlc.types.Field(String, graphql_name='tier')
    type = sgqlc.types.Field(sgqlc.types.non_null(PaymentTransactionType), graphql_name='type')


class Payout(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('history',)
    history = sgqlc.types.Field('PayoutHistory', graphql_name='history')


class PayoutBalance(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('currency', 'current_payout_balance_amount', 'month', 'year')
    currency = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='currency')
    current_payout_balance_amount = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='currentPayoutBalanceAmount')
    month = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='month')
    year = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='year')


class PayoutHistory(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('iframe_url',)
    iframe_url = sgqlc.types.Field(String, graphql_name='iframeURL')


class PayoutInvite(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('category', 'id', 'is_for_affiliate', 'is_for_extensions_developer', 'is_for_partner', 'is_legacy', 'workflow')
    category = sgqlc.types.Field(PayoutOnboardingCategory, graphql_name='category')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_for_affiliate = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isForAffiliate')
    is_for_extensions_developer = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isForExtensionsDeveloper')
    is_for_partner = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isForPartner')
    is_legacy = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isLegacy')
    workflow = sgqlc.types.Field('PayoutOnboardingWorkflow', graphql_name='workflow')


class PayoutOnboardingWorkflow(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('current_step', 'id', 'payout_settings_url', 'registration', 'tax_interview', 'tax_mismatch_errors', 'timestamp')
    current_step = sgqlc.types.Field(sgqlc.types.non_null(PayoutOnboardingStep), graphql_name='currentStep')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    payout_settings_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='payoutSettingsURL', args=sgqlc.types.ArgDict((
        ('redirect_url', sgqlc.types.Arg(String, graphql_name='redirectURL', default=None)),
))
    )
    registration = sgqlc.types.Field('PayoutRegistration', graphql_name='registration')
    tax_interview = sgqlc.types.Field('TaxInterview', graphql_name='taxInterview', args=sgqlc.types.ArgDict((
        ('type', sgqlc.types.Arg(sgqlc.types.non_null(TaxInterviewType), graphql_name='type', default=None)),
        ('return_url', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='returnURL', default=None)),
))
    )
    tax_mismatch_errors = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TaxMismatchError)), graphql_name='taxMismatchErrors')
    timestamp = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='timestamp')


class PayoutPlan(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('category', 'is_receiving_revenue', 'tags')
    category = sgqlc.types.Field(sgqlc.types.non_null(PayoutCategory), graphql_name='category')
    is_receiving_revenue = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isReceivingRevenue')
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(PayoutPlanTag)), graphql_name='tags')


class PayoutRegistration(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('birthdate', 'city', 'company_name', 'country_code', 'email', 'first_name', 'last_name', 'middle_name', 'parent_email', 'parent_name', 'postal', 'state_code', 'street_address', 'street_address2')
    birthdate = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='birthdate')
    city = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='city')
    company_name = sgqlc.types.Field(String, graphql_name='companyName')
    country_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='countryCode')
    email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='email')
    first_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='firstName')
    last_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lastName')
    middle_name = sgqlc.types.Field(String, graphql_name='middleName')
    parent_email = sgqlc.types.Field(String, graphql_name='parentEmail')
    parent_name = sgqlc.types.Field(String, graphql_name='parentName')
    postal = sgqlc.types.Field(String, graphql_name='postal')
    state_code = sgqlc.types.Field(String, graphql_name='stateCode')
    street_address = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='streetAddress')
    street_address2 = sgqlc.types.Field(String, graphql_name='streetAddress2')


class PendingSubscription(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_cancelable', 'origin_id', 'price', 'price_info', 'starts_at', 'tier', 'type')
    is_cancelable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCancelable')
    origin_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='originID')
    price = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='price')
    price_info = sgqlc.types.Field(sgqlc.types.non_null('PriceInfo'), graphql_name='priceInfo', args=sgqlc.types.ArgDict((
        ('tax_country', sgqlc.types.Arg(String, graphql_name='taxCountry', default=None)),
))
    )
    starts_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startsAt')
    tier = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='tier')
    type = sgqlc.types.Field(sgqlc.types.non_null(PendingSubType), graphql_name='type')


class PersonalSection(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'title', 'type')
    items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalSectionItem')), graphql_name='items')
    title = sgqlc.types.Field(sgqlc.types.non_null('PersonalSectionTitle'), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(PersonalSectionType), graphql_name='type')


class PersonalSectionChannel(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'label', 'tracking_id', 'user')
    content = sgqlc.types.Field('PersonalSectionChannelContent', graphql_name='content')
    label = sgqlc.types.Field(sgqlc.types.non_null(PersonalSectionChannelLabel), graphql_name='label')
    tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='trackingID')
    user = sgqlc.types.Field('User', graphql_name='user')


class PersonalSectionTextToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('value',)
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')


class PersonalSectionTitle(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('localized_fallback', 'localized_tokens')
    localized_fallback = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='localizedFallback')
    localized_tokens = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PersonalSectionTitleToken')), graphql_name='localizedTokens')


class PlatformEventSetting(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'platform_name', 'setting_state')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    platform_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='platformName')
    setting_state = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='settingState')


class PlayStation(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('platform', 'title', 'updated_at', 'user')
    platform = sgqlc.types.Field(String, graphql_name='platform')
    title = sgqlc.types.Field('SCETitle', graphql_name='title')
    updated_at = sgqlc.types.Field(Time, graphql_name='updatedAt')
    user = sgqlc.types.Field('SCEUser', graphql_name='user')


class PlaybackAccessToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('signature', 'value')
    signature = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='signature')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')


class Poll(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('choice', 'choices', 'created_by', 'duration_seconds', 'ended_at', 'ended_by', 'id', 'is_viewable', 'owned_by', 'remaining_duration_milliseconds', 'self', 'settings', 'started_at', 'status', 'title', 'tokens', 'top_bits_contributor', 'top_community_points_contributor', 'top_contributor', 'total_voters', 'votes')
    choice = sgqlc.types.Field('PollChoice', graphql_name='choice', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    choices = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PollChoice'))), graphql_name='choices')
    created_by = sgqlc.types.Field('User', graphql_name='createdBy')
    duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationSeconds')
    ended_at = sgqlc.types.Field(Time, graphql_name='endedAt')
    ended_by = sgqlc.types.Field('User', graphql_name='endedBy')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_viewable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isViewable')
    owned_by = sgqlc.types.Field('User', graphql_name='ownedBy')
    remaining_duration_milliseconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='remainingDurationMilliseconds')
    self = sgqlc.types.Field('PollSelfEdge', graphql_name='self')
    settings = sgqlc.types.Field(sgqlc.types.non_null('PollSettings'), graphql_name='settings')
    started_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startedAt')
    status = sgqlc.types.Field(sgqlc.types.non_null(PollStatus), graphql_name='status')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    tokens = sgqlc.types.Field(sgqlc.types.non_null('PollTokenBreakdown'), graphql_name='tokens')
    top_bits_contributor = sgqlc.types.Field('PollTopBitsContributor', graphql_name='topBitsContributor')
    top_community_points_contributor = sgqlc.types.Field('PollTopCommunityPointsContributor', graphql_name='topCommunityPointsContributor')
    top_contributor = sgqlc.types.Field('PollTopContributor', graphql_name='topContributor')
    total_voters = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalVoters')
    votes = sgqlc.types.Field(sgqlc.types.non_null('PollVoteBreakdown'), graphql_name='votes')


class PollChoice(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'self', 'title', 'tokens', 'total_voters', 'voters', 'votes')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    self = sgqlc.types.Field(sgqlc.types.non_null('PollChoiceSelfEdge'), graphql_name='self')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    tokens = sgqlc.types.Field(sgqlc.types.non_null('PollTokenBreakdown'), graphql_name='tokens')
    total_voters = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalVoters')
    voters = sgqlc.types.Field('PollChoiceVoterConnection', graphql_name='voters', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=15)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('sort', sgqlc.types.Arg(PollVoterConnectionSort, graphql_name='sort', default='VOTES')),
        ('direction', sgqlc.types.Arg(PollVoterConnectionSortDirection, graphql_name='direction', default='DESC')),
))
    )
    votes = sgqlc.types.Field(sgqlc.types.non_null('PollVoteBreakdown'), graphql_name='votes')


class PollChoiceSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('voter',)
    voter = sgqlc.types.Field('PollVoter', graphql_name='voter')


class PollChoiceVoterConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('nodes',)
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PollVoterConnectionEdge'))), graphql_name='nodes')


class PollConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('PollEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class PollEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Poll), graphql_name='node')


class PollSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('voter',)
    voter = sgqlc.types.Field('PollVoter', graphql_name='voter')


class PollSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bits_votes', 'community_points_votes', 'id', 'multichoice', 'subscriber_multiplier', 'subscriber_only')
    bits_votes = sgqlc.types.Field(sgqlc.types.non_null('PollSettingsBitsVotes'), graphql_name='bitsVotes')
    community_points_votes = sgqlc.types.Field(sgqlc.types.non_null('PollSettingsCommunityPointsVotes'), graphql_name='communityPointsVotes')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    multichoice = sgqlc.types.Field(sgqlc.types.non_null('PollSettingsMultichoice'), graphql_name='multichoice')
    subscriber_multiplier = sgqlc.types.Field(sgqlc.types.non_null('PollSettingsSubscriberMultiplier'), graphql_name='subscriberMultiplier')
    subscriber_only = sgqlc.types.Field(sgqlc.types.non_null('PollSettingsSubscriberOnly'), graphql_name='subscriberOnly')


class PollSettingsBitsVotes(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cost', 'is_enabled')
    cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cost')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class PollSettingsCommunityPointsVotes(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cost', 'is_enabled')
    cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cost')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class PollSettingsMultichoice(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_enabled',)
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class PollSettingsSubscriberMultiplier(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_enabled',)
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class PollSettingsSubscriberOnly(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_enabled',)
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class PollTokenBreakdown(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bits', 'community_points', 'id')
    bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bits')
    community_points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='communityPoints')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class PollTopBitsContributor(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bits_amount', 'user')
    bits_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bitsAmount')
    user = sgqlc.types.Field('User', graphql_name='user')


class PollTopCommunityPointsContributor(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('community_points_amount', 'user')
    community_points_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='communityPointsAmount')
    user = sgqlc.types.Field('User', graphql_name='user')


class PollTopContributor(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('bits_amount', 'user')
    bits_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bitsAmount')
    user = sgqlc.types.Field('User', graphql_name='user')


class PollVoteBreakdown(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('base', 'bits', 'community_points', 'id', 'total')
    base = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='base')
    bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='bits')
    community_points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='communityPoints')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    total = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='total')


class PollVoter(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('choices', 'id', 'poll', 'tokens', 'user', 'votes')
    choices = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PollVoterChoice'))), graphql_name='choices')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    poll = sgqlc.types.Field(Poll, graphql_name='poll')
    tokens = sgqlc.types.Field(sgqlc.types.non_null(PollTokenBreakdown), graphql_name='tokens')
    user = sgqlc.types.Field('User', graphql_name='user')
    votes = sgqlc.types.Field(sgqlc.types.non_null(PollVoteBreakdown), graphql_name='votes')


class PollVoterChoice(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'poll_choice', 'tokens', 'votes')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    poll_choice = sgqlc.types.Field(PollChoice, graphql_name='pollChoice')
    tokens = sgqlc.types.Field(sgqlc.types.non_null(PollTokenBreakdown), graphql_name='tokens')
    votes = sgqlc.types.Field(sgqlc.types.non_null(PollVoteBreakdown), graphql_name='votes')


class PollVoterConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('nodes',)
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PollVoterConnectionEdge'))), graphql_name='nodes')


class PollVoterConnectionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(PollVoter), graphql_name='node')


class Post(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('author', 'body', 'created_at', 'embeds', 'id', 'is_deleted', 'reactions', 'self')
    author = sgqlc.types.Field('User', graphql_name='author')
    body = sgqlc.types.Field(MessageBody, graphql_name='body')
    created_at = sgqlc.types.Field(Time, graphql_name='createdAt')
    embeds = sgqlc.types.Field(sgqlc.types.list_of('PostEmbed'), graphql_name='embeds')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_deleted = sgqlc.types.Field(Boolean, graphql_name='isDeleted')
    reactions = sgqlc.types.Field(sgqlc.types.list_of('Reaction'), graphql_name='reactions')
    self = sgqlc.types.Field('PostSelfConnection', graphql_name='self')


class PostPermissionSet(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_delete',)
    can_delete = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canDelete')


class PostSelfConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('permissions',)
    permissions = sgqlc.types.Field(PostPermissionSet, graphql_name='permissions')


class Prediction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('event', 'id', 'is_result_acknowledged', 'outcome', 'points', 'points_won', 'predicted_at', 'result', 'updated_at', 'user')
    event = sgqlc.types.Field('PredictionEvent', graphql_name='event')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_result_acknowledged = sgqlc.types.Field(Boolean, graphql_name='isResultAcknowledged')
    outcome = sgqlc.types.Field('PredictionOutcome', graphql_name='outcome')
    points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='points')
    points_won = sgqlc.types.Field(Int, graphql_name='pointsWon')
    predicted_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='predictedAt')
    result = sgqlc.types.Field(PredictionResult, graphql_name='result')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='updatedAt')
    user = sgqlc.types.Field('User', graphql_name='user')


class PredictionEvent(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'created_at', 'created_by', 'ended_at', 'ended_by', 'id', 'locked_at', 'locked_by', 'outcomes', 'prediction_window_seconds', 'status', 'title', 'winning_outcome')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    created_by = sgqlc.types.Field('PredictionEventActor', graphql_name='createdBy')
    ended_at = sgqlc.types.Field(Time, graphql_name='endedAt')
    ended_by = sgqlc.types.Field('PredictionEventActor', graphql_name='endedBy')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    locked_at = sgqlc.types.Field(Time, graphql_name='lockedAt')
    locked_by = sgqlc.types.Field('PredictionEventActor', graphql_name='lockedBy')
    outcomes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PredictionOutcome'))), graphql_name='outcomes')
    prediction_window_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='predictionWindowSeconds')
    status = sgqlc.types.Field(sgqlc.types.non_null(PredictionEventStatus), graphql_name='status')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    winning_outcome = sgqlc.types.Field('PredictionOutcome', graphql_name='winningOutcome')


class PredictionEventConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('PredictionEventEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class PredictionEventEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(PredictionEvent), graphql_name='node')


class PredictionOutcome(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('color', 'id', 'title', 'top_predictors', 'total_points', 'total_users')
    color = sgqlc.types.Field(sgqlc.types.non_null(PredictionOutcomeColor), graphql_name='color')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    top_predictors = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Prediction))), graphql_name='topPredictors')
    total_points = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalPoints')
    total_users = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalUsers')


class Premiere(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'items', 'past_premiere', 'status', 'user')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    items = sgqlc.types.Field('PremiereConnection', graphql_name='items', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    past_premiere = sgqlc.types.Field('Video', graphql_name='pastPremiere')
    status = sgqlc.types.Field(sgqlc.types.non_null(PremiereStatus), graphql_name='status')
    user = sgqlc.types.Field('User', graphql_name='user')


class PremiereConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of('PremiereItemEdge'), graphql_name='edges')
    page_info = sgqlc.types.Field(PageInfo, graphql_name='pageInfo')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class PremiereItemEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null('PremiereItem'), graphql_name='node')


class PresignDevInsightsReportURLPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('url',)
    url = sgqlc.types.Field(String, graphql_name='url')


class PriceInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('currency', 'description', 'discount', 'exponent', 'id', 'is_tax_inclusive', 'price', 'tax', 'total')
    currency = sgqlc.types.Field(sgqlc.types.non_null(Currency), graphql_name='currency')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    discount = sgqlc.types.Field(DiscountBreakdown, graphql_name='discount')
    exponent = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='exponent')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_tax_inclusive = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isTaxInclusive')
    price = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='price')
    tax = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='tax')
    total = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='total')


class PrimeEmoticons(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('current_set_name', 'emoticon_sets')
    current_set_name = sgqlc.types.Field(sgqlc.types.non_null(PrimeEmoticonsSetName), graphql_name='currentSetName')
    emoticon_sets = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SmiliesSet')), graphql_name='emoticonSets')


class PrimeOffer(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('claim_hint', 'claim_instructions', 'content', 'delivery_method', 'description', 'id', 'image_url', 'priority', 'self', 'tags', 'title')
    claim_hint = sgqlc.types.Field(sgqlc.types.non_null(ClaimHint), graphql_name='claimHint')
    claim_instructions = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='claimInstructions')
    content = sgqlc.types.Field('PrimeOfferContent', graphql_name='content')
    delivery_method = sgqlc.types.Field(sgqlc.types.non_null(OfferDeliveryMethod), graphql_name='deliveryMethod')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    priority = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='priority')
    self = sgqlc.types.Field('PrimeOfferSelfConnection', graphql_name='self')
    tags = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='tags')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class PrimeOfferContent(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('categories', 'external_url', 'game', 'publisher', 'skus')
    categories = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='categories')
    external_url = sgqlc.types.Field(String, graphql_name='externalURL')
    game = sgqlc.types.Field('Game', graphql_name='game')
    publisher = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='publisher')
    skus = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='skus')


class PrimeOfferEligibility(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_claim', 'has_required_account', 'is_claimed', 'is_in_eligible_marketplace', 'is_prime_gaming', 'is_under_claim_limit', 'is_within_offer_window', 'offer_state', 'status')
    can_claim = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canClaim')
    has_required_account = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasRequiredAccount')
    is_claimed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isClaimed')
    is_in_eligible_marketplace = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isInEligibleMarketplace')
    is_prime_gaming = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPrimeGaming')
    is_under_claim_limit = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isUnderClaimLimit')
    is_within_offer_window = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isWithinOfferWindow')
    offer_state = sgqlc.types.Field(sgqlc.types.non_null(OfferState), graphql_name='offerState')
    status = sgqlc.types.Field(sgqlc.types.non_null(OfferStatus), graphql_name='status')


class PrimeOfferSelfConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('claim_data', 'has_entitlement', 'status')
    claim_data = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='claimData')
    has_entitlement = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasEntitlement')
    status = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='status')


class PrimeOfferWithEligibility(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('catalog_offer_id', 'claim_instructions', 'content', 'delivery_method', 'description', 'id', 'image_url', 'offer_eligibility', 'priority', 'tags', 'title')
    catalog_offer_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='catalogOfferID')
    claim_instructions = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='claimInstructions')
    content = sgqlc.types.Field(PrimeOfferContent, graphql_name='content')
    delivery_method = sgqlc.types.Field(sgqlc.types.non_null(OfferDeliveryMethod), graphql_name='deliveryMethod')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    offer_eligibility = sgqlc.types.Field(PrimeOfferEligibility, graphql_name='offerEligibility')
    priority = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='priority')
    tags = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='tags')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class PrimePayoutDetail(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('currency', 'current_prime_payout', 'deferred_prime_payout', 'month', 'year')
    currency = sgqlc.types.Field(sgqlc.types.non_null(Currency), graphql_name='currency')
    current_prime_payout = sgqlc.types.Field(sgqlc.types.non_null(CurrentPrimePayout), graphql_name='currentPrimePayout')
    deferred_prime_payout = sgqlc.types.Field(sgqlc.types.non_null(DeferredPrimePayout), graphql_name='deferredPrimePayout')
    month = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='month')
    year = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='year')


class PrimePayoutDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('prime_payout_history',)
    prime_payout_history = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(PrimePayoutDetail))), graphql_name='primePayoutHistory')


class PrimePromotion(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('external_url', 'id', 'is_external_link', 'text')
    external_url = sgqlc.types.Field(String, graphql_name='externalURL')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_external_link = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isExternalLink')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class PrimeSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'is_sub_credit_chat_notification_enabled', 'prime_emoticons')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_sub_credit_chat_notification_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSubCreditChatNotificationEnabled')
    prime_emoticons = sgqlc.types.Field(PrimeEmoticons, graphql_name='primeEmoticons')


class PrimeSubCreditBenefit(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('renewal_date', 'will_renew')
    renewal_date = sgqlc.types.Field(Time, graphql_name='renewalDate')
    will_renew = sgqlc.types.Field(Boolean, graphql_name='willRenew')


class PrimeVideoBenefit(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'is_valid')
    error = sgqlc.types.Field('WatchPartyError', graphql_name='error')
    is_valid = sgqlc.types.Field(Boolean, graphql_name='isValid')


class PrimeVideoRating(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count', 'stars')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')
    stars = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='stars')


class ProductCatalogBenefit(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class ProductCatalogItem(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('benefits', 'description', 'id', 'offers', 'owner', 'title')
    benefits = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ProductCatalogBenefit)), graphql_name='benefits')
    description = sgqlc.types.Field(String, graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    offers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Offer)), graphql_name='offers')
    owner = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='owner')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class ProductPurchase(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('checkout_price_summary', 'error_code', 'tax_region')
    checkout_price_summary = sgqlc.types.Field(CheckoutPriceSummary, graphql_name='checkoutPriceSummary')
    error_code = sgqlc.types.Field(ProductPurchaseErrorCode, graphql_name='errorCode')
    tax_region = sgqlc.types.Field('TaxRegion', graphql_name='taxRegion')


class ProgramAgreement(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('body', 'type', 'version')
    body = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='body')
    type = sgqlc.types.Field(sgqlc.types.non_null(PayoutOnboardingCategory), graphql_name='type')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')


class PromotionDisplay(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('discount_percent', 'discount_type')
    discount_percent = sgqlc.types.Field(Float, graphql_name='discountPercent')
    discount_type = sgqlc.types.Field(sgqlc.types.non_null(PromoDiscountType), graphql_name='discountType')


class PublishClipError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('message',)
    message = sgqlc.types.Field(String, graphql_name='message')


class PublishClipPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('clip', 'error')
    clip = sgqlc.types.Field(Clip, graphql_name='clip')
    error = sgqlc.types.Field(PublishClipError, graphql_name='error')


class PublishCompetitionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition',)
    competition = sgqlc.types.Field(Competition, graphql_name='competition')


class PublishSubscriptionEmoteError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(PublishSubscriptionEmoteErrorCode), graphql_name='code')


class PublishSubscriptionEmotePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('emote', 'error')
    emote = sgqlc.types.Field(Emote, graphql_name='emote')
    error = sgqlc.types.Field(PublishSubscriptionEmoteError, graphql_name='error')


class PurchaseOfferPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'purchase_order')
    error = sgqlc.types.Field(PurchaseOfferErrorCode, graphql_name='error')
    purchase_order = sgqlc.types.Field('PurchaseOrder', graphql_name='purchaseOrder')


class PurchaseOrder(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('action_token_id', 'failure_reason', 'id', 'state')
    action_token_id = sgqlc.types.Field(ID, graphql_name='actionTokenID')
    failure_reason = sgqlc.types.Field(PurchaseOrderFailureReason, graphql_name='failureReason')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    state = sgqlc.types.Field(sgqlc.types.non_null(PurchaseOrderState), graphql_name='state')


class PurchaseProfile(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cancelled_at', 'created_at', 'expires_at', 'ext_purchaser_id', 'ext_subscription_id', 'id', 'is_expired', 'is_gift', 'is_paying', 'is_recurring', 'is_refundable', 'paid_at', 'product_type', 'purchased_at', 'purchaser_email', 'purchaser_id', 'purchaser_name', 'renewal_currency', 'renewal_price', 'renewal_stopped_at', 'state', 'subscription_benefit', 'updated_at', 'will_renew')
    cancelled_at = sgqlc.types.Field(Time, graphql_name='cancelledAt')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    expires_at = sgqlc.types.Field(Time, graphql_name='expiresAt')
    ext_purchaser_id = sgqlc.types.Field(ID, graphql_name='extPurchaserID')
    ext_subscription_id = sgqlc.types.Field(ID, graphql_name='extSubscriptionID')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_expired = sgqlc.types.Field(Boolean, graphql_name='isExpired')
    is_gift = sgqlc.types.Field(Boolean, graphql_name='isGift')
    is_paying = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPaying')
    is_recurring = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRecurring')
    is_refundable = sgqlc.types.Field(Boolean, graphql_name='isRefundable')
    paid_at = sgqlc.types.Field(Time, graphql_name='paidAt')
    product_type = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionProductType), graphql_name='productType')
    purchased_at = sgqlc.types.Field(Time, graphql_name='purchasedAt')
    purchaser_email = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='purchaserEmail')
    purchaser_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='purchaserID')
    purchaser_name = sgqlc.types.Field(String, graphql_name='purchaserName')
    renewal_currency = sgqlc.types.Field(String, graphql_name='renewalCurrency')
    renewal_price = sgqlc.types.Field(Int, graphql_name='renewalPrice')
    renewal_stopped_at = sgqlc.types.Field(Time, graphql_name='renewalStoppedAt')
    state = sgqlc.types.Field(sgqlc.types.non_null(PurchaseProfileState), graphql_name='state')
    subscription_benefit = sgqlc.types.Field('SubscriptionBenefit', graphql_name='subscriptionBenefit')
    updated_at = sgqlc.types.Field(Time, graphql_name='updatedAt')
    will_renew = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='willRenew')


class Query(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('ad_context', 'ad_creative', 'all_tags', 'automod_content', 'badges', 'bits_offers', 'challenge', 'changelog_entries', 'channel', 'channels', 'chat_room_ban_status', 'cheer_config', 'client_authorization', 'clip', 'cloud_broadcast', 'cloud_broadcast_provider', 'collection', 'competition', 'competition_organizer_capabilities', 'competitions', 'consent', 'content_tag', 'content_tags', 'creator_camp_article', 'creator_camp_category', 'creator_dashboard', 'current_user', 'directory', 'drop', 'drop_benefit', 'drop_campaign', 'drop_eligibility', 'emote', 'emote_set', 'experiment', 'extension', 'extension_carousel', 'extension_categories', 'extension_category', 'extension_client', 'extension_clients', 'extension_manifest', 'extension_manifests', 'extension_manifests_summary', 'extension_ratings_csvreport_presigned_url', 'extension_secrets', 'extension_version_discovery_manifest', 'extensions', 'featured_content_sections', 'featured_streams', 'featured_videos', 'feed', 'feed_embed', 'feed_item_content', 'game', 'games', 'is_username_available', 'key', 'message', 'mod_view_newsfeed_entries', 'organization', 'pending_organization_application', 'pending_organization_applications', 'personal_sections', 'poll', 'prime_offers', 'prime_offers_with_eligibility', 'prime_promotions', 'prime_video_benefit', 'purchasable_offer', 'radio_content', 'recommended_games', 'recommended_streams', 'recurly_configs', 'rejected_chat_message', 'report_reasons', 'report_to_sand_country_reasons', 'request_info', 'room', 'search', 'search_applicable_tags', 'search_categories', 'search_category_tags', 'search_for', 'search_live_tags', 'search_streams', 'search_suggestions', 'search_users', 'shelves', 'short_video_feed', 'should_show_devsite_csat', 'squad_stream', 'stream_playback_access_token', 'streams', 'subscription_product', 'subscription_token_bundle_products', 'subscription_token_product_config', 'supported_cloud_broadcast_providers', 'team', 'top_tags', 'user', 'user_by_attribute', 'users', 'verification_request', 'vertical_directory', 'vertical_sub_directory', 'video', 'video_comments', 'video_ingest_session', 'video_ingest_session_latest', 'video_ingest_sessions', 'video_playback_access_token', 'videos', 'watch_party_items', 'whisper_thread')
    ad_context = sgqlc.types.Field(AdContext, graphql_name='adContext', args=sgqlc.types.ArgDict((
        ('context', sgqlc.types.Arg(sgqlc.types.non_null(AdRequestContext), graphql_name='context', default=None)),
))
    )
    ad_creative = sgqlc.types.Field(AdCreative, graphql_name='adCreative', args=sgqlc.types.ArgDict((
        ('ad_system', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='adSystem', default=None)),
        ('creative_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='creativeID', default=None)),
))
    )
    all_tags = sgqlc.types.Field('TagConnection', graphql_name='allTags', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=5)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('tag_scope', sgqlc.types.Arg(TagScope, graphql_name='tagScope', default=None)),
))
    )
    automod_content = sgqlc.types.Field(AutomodContentResponse, graphql_name='automodContent', args=sgqlc.types.ArgDict((
        ('text', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='text', default=None)),
        ('rule', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='rule', default=None)),
))
    )
    badges = sgqlc.types.Field(sgqlc.types.list_of(Badge), graphql_name='badges')
    bits_offers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BitsOffer)), graphql_name='bitsOffers')
    challenge = sgqlc.types.Field(ChannelChallenge, graphql_name='challenge', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    changelog_entries = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChangelogEntry)), graphql_name='changelogEntries', args=sgqlc.types.ArgDict((
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=15)),
))
    )
    channel = sgqlc.types.Field(Channel, graphql_name='channel', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(ID, graphql_name='id', default=None)),
        ('name', sgqlc.types.Arg(String, graphql_name='name', default=None)),
))
    )
    channels = sgqlc.types.Field(sgqlc.types.list_of(Channel), graphql_name='channels', args=sgqlc.types.ArgDict((
        ('ids', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='ids', default=None)),
        ('names', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='names', default=None)),
))
    )
    chat_room_ban_status = sgqlc.types.Field(ChatRoomBanStatus, graphql_name='chatRoomBanStatus', args=sgqlc.types.ArgDict((
        ('channel_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='channelID', default=None)),
        ('user_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='userID', default=None)),
))
    )
    cheer_config = sgqlc.types.Field(sgqlc.types.non_null(GlobalCheerConfig), graphql_name='cheerConfig')
    client_authorization = sgqlc.types.Field(ClientAuthorization, graphql_name='clientAuthorization', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    clip = sgqlc.types.Field(Clip, graphql_name='clip', args=sgqlc.types.ArgDict((
        ('slug', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='slug', default=None)),
))
    )
    cloud_broadcast = sgqlc.types.Field(CloudBroadcast, graphql_name='cloudBroadcast', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    cloud_broadcast_provider = sgqlc.types.Field(CloudBroadcastProvider, graphql_name='cloudBroadcastProvider', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    collection = sgqlc.types.Field(Collection, graphql_name='collection', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
        ('options', sgqlc.types.Arg(CollectionOptions, graphql_name='options', default=None)),
))
    )
    competition = sgqlc.types.Field(Competition, graphql_name='competition', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    competition_organizer_capabilities = sgqlc.types.Field(CompetitionOrganizerCapability, graphql_name='competitionOrganizerCapabilities')
    competitions = sgqlc.types.Field(CompetitionConnection, graphql_name='competitions', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('state', sgqlc.types.Arg(CompetitionState, graphql_name='state', default='UPCOMING')),
))
    )
    consent = sgqlc.types.Field(Consent, graphql_name='consent', args=sgqlc.types.ArgDict((
        ('consent_session_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='consentSessionID', default=None)),
))
    )
    content_tag = sgqlc.types.Field('Tag', graphql_name='contentTag', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    content_tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Tag')), graphql_name='contentTags', args=sgqlc.types.ArgDict((
        ('ids', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='ids', default=None)),
))
    )
    creator_camp_article = sgqlc.types.Field(CreatorCampArticle, graphql_name='creatorCampArticle', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
        ('category', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='category', default=None)),
))
    )
    creator_camp_category = sgqlc.types.Field(CreatorCampCategory, graphql_name='creatorCampCategory', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    creator_dashboard = sgqlc.types.Field(CreatorDashboard, graphql_name='creatorDashboard', args=sgqlc.types.ArgDict((
        ('start_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='startAt', default=None)),
        ('end_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='endAt', default=None)),
        ('period', sgqlc.types.Arg(sgqlc.types.non_null(TimeSeriesPeriod), graphql_name='period', default=None)),
))
    )
    current_user = sgqlc.types.Field('User', graphql_name='currentUser')
    directory = sgqlc.types.Field(Directory, graphql_name='directory', args=sgqlc.types.ArgDict((
        ('name', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='name', default=None)),
        ('type', sgqlc.types.Arg(sgqlc.types.non_null(DirectoryType), graphql_name='type', default=None)),
))
    )
    drop = sgqlc.types.Field(DropType, graphql_name='drop', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    drop_benefit = sgqlc.types.Field(DropBenefit, graphql_name='dropBenefit', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
        ('owner_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='ownerID', default=None)),
))
    )
    drop_campaign = sgqlc.types.Field(DropCampaign, graphql_name='dropCampaign', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    drop_eligibility = sgqlc.types.Field(DropEligibility, graphql_name='dropEligibility', args=sgqlc.types.ArgDict((
        ('drop_instance_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='dropInstanceID', default=None)),
))
    )
    emote = sgqlc.types.Field(Emote, graphql_name='emote', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    emote_set = sgqlc.types.Field(EmoteSet, graphql_name='emoteSet', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    experiment = sgqlc.types.Field(Experiment, graphql_name='experiment')
    extension = sgqlc.types.Field(Extension, graphql_name='extension', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
        ('version', sgqlc.types.Arg(String, graphql_name='version', default=None)),
))
    )
    extension_carousel = sgqlc.types.Field(ExtensionCarousel, graphql_name='extensionCarousel', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    extension_categories = sgqlc.types.Field(ExtensionCategoryConnection, graphql_name='extensionCategories', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    extension_category = sgqlc.types.Field(ExtensionCategory, graphql_name='extensionCategory', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    extension_client = sgqlc.types.Field(ExtensionClient, graphql_name='extensionClient', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    extension_clients = sgqlc.types.Field(ExtensionClientConnection, graphql_name='extensionClients', args=sgqlc.types.ArgDict((
        ('organization_id', sgqlc.types.Arg(ID, graphql_name='organizationID', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    extension_manifest = sgqlc.types.Field(ExtensionManifest, graphql_name='extensionManifest', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
        ('version', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='version', default=None)),
))
    )
    extension_manifests = sgqlc.types.Field(ExtensionManifestConnection, graphql_name='extensionManifests', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    extension_manifests_summary = sgqlc.types.Field(ExtensionManifestsSummary, graphql_name='extensionManifestsSummary', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    extension_ratings_csvreport_presigned_url = sgqlc.types.Field(ExtensionRatingsCSVReportPresignedURL, graphql_name='extensionRatingsCSVReportPresignedURL', args=sgqlc.types.ArgDict((
        ('report_filename', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='reportFilename', default=None)),
))
    )
    extension_secrets = sgqlc.types.Field(ExtensionSecretsInfo, graphql_name='extensionSecrets', args=sgqlc.types.ArgDict((
        ('extension_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='extensionID', default=None)),
))
    )
    extension_version_discovery_manifest = sgqlc.types.Field(ExtensionVersionDiscoveryManifest, graphql_name='extensionVersionDiscoveryManifest', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
        ('version', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='version', default=None)),
))
    )
    extensions = sgqlc.types.Field(ExtensionConnection, graphql_name='extensions', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('search', sgqlc.types.Arg(String, graphql_name='search', default=None)),
        ('state', sgqlc.types.Arg(ExtensionStateFilter, graphql_name='state', default=None)),
))
    )
    featured_content_sections = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(FeaturedContentSection)), graphql_name='featuredContentSections', args=sgqlc.types.ArgDict((
        ('language', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='language', default=None)),
))
    )
    featured_streams = sgqlc.types.Field(sgqlc.types.list_of(FeaturedStream), graphql_name='featuredStreams', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=6)),
        ('geolocation', sgqlc.types.Arg(String, graphql_name='geolocation', default=None)),
        ('language', sgqlc.types.Arg(String, graphql_name='language', default=None)),
        ('accepted_mature', sgqlc.types.Arg(Boolean, graphql_name='acceptedMature', default=True)),
))
    )
    featured_videos = sgqlc.types.Field(sgqlc.types.list_of(FeaturedVideo), graphql_name='featuredVideos', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=2)),
        ('language', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='language', default=None)),
))
    )
    feed = sgqlc.types.Field(Feed, graphql_name='feed', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    feed_embed = sgqlc.types.Field('FeedEmbed', graphql_name='feedEmbed', args=sgqlc.types.ArgDict((
        ('url', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='url', default=None)),
))
    )
    feed_item_content = sgqlc.types.Field('FeedItemContent', graphql_name='feedItemContent', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    game = sgqlc.types.Field('Game', graphql_name='game', args=sgqlc.types.ArgDict((
        ('name', sgqlc.types.Arg(String, graphql_name='name', default=None)),
        ('id', sgqlc.types.Arg(ID, graphql_name='id', default=None)),
))
    )
    games = sgqlc.types.Field(GameConnection, graphql_name='games', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('options', sgqlc.types.Arg(GameOptions, graphql_name='options', default=None)),
        ('locale', sgqlc.types.Arg(String, graphql_name='locale', default=None)),
        ('tags', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tags', default=None)),
))
    )
    is_username_available = sgqlc.types.Field(Boolean, graphql_name='isUsernameAvailable', args=sgqlc.types.ArgDict((
        ('username', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='username', default=None)),
))
    )
    key = sgqlc.types.Field(Claimable, graphql_name='key', args=sgqlc.types.ArgDict((
        ('code', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='code', default=None)),
        ('country_of_residence', sgqlc.types.Arg(String, graphql_name='countryOfResidence', default=None)),
))
    )
    message = sgqlc.types.Field(Message, graphql_name='message', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    mod_view_newsfeed_entries = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ModViewNewsfeedEntry)), graphql_name='modViewNewsfeedEntries', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
))
    )
    organization = sgqlc.types.Field(Organization, graphql_name='organization', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    pending_organization_application = sgqlc.types.Field(OrganizationApplication, graphql_name='pendingOrganizationApplication')
    pending_organization_applications = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(OrganizationApplication)), graphql_name='pendingOrganizationApplications')
    personal_sections = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(PersonalSection)), graphql_name='personalSections', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(PersonalSectionInput), graphql_name='input', default=None)),
))
    )
    poll = sgqlc.types.Field(Poll, graphql_name='poll', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    prime_offers = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(PrimeOffer))), graphql_name='primeOffers', args=sgqlc.types.ArgDict((
        ('date_override', sgqlc.types.Arg(Time, graphql_name='dateOverride', default=None)),
        ('country_code', sgqlc.types.Arg(String, graphql_name='countryCode', default=None)),
        ('locale', sgqlc.types.Arg(String, graphql_name='locale', default=None)),
))
    )
    prime_offers_with_eligibility = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(PrimeOfferWithEligibility))), graphql_name='primeOffersWithEligibility', args=sgqlc.types.ArgDict((
        ('date_override', sgqlc.types.Arg(Time, graphql_name='dateOverride', default=None)),
        ('country_code', sgqlc.types.Arg(String, graphql_name='countryCode', default=None)),
        ('locale', sgqlc.types.Arg(String, graphql_name='locale', default=None)),
))
    )
    prime_promotions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(PrimePromotion)), graphql_name='primePromotions', args=sgqlc.types.ArgDict((
        ('ids', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='ids', default=None)),
        ('date_override', sgqlc.types.Arg(Time, graphql_name='dateOverride', default=None)),
))
    )
    prime_video_benefit = sgqlc.types.Field(PrimeVideoBenefit, graphql_name='primeVideoBenefit', args=sgqlc.types.ArgDict((
        ('access_token', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='accessToken', default=None)),
))
    )
    purchasable_offer = sgqlc.types.Field(Offer, graphql_name='purchasableOffer', args=sgqlc.types.ArgDict((
        ('params', sgqlc.types.Arg(sgqlc.types.non_null(PurchasableOfferParams), graphql_name='params', default=None)),
))
    )
    radio_content = sgqlc.types.Field('RadioContent', graphql_name='radioContent', args=sgqlc.types.ArgDict((
        ('content_type', sgqlc.types.Arg(sgqlc.types.non_null(RadioContentType), graphql_name='contentType', default=None)),
        ('id', sgqlc.types.Arg(ID, graphql_name='id', default=None)),
))
    )
    recommended_games = sgqlc.types.Field('RecommendedGamesConnection', graphql_name='recommendedGames', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=6)),
        ('rec_request_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='recRequestID', default=None)),
        ('location', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='location', default=None)),
        ('context', sgqlc.types.Arg(sgqlc.types.non_null(RecommendationsContext), graphql_name='context', default=None)),
))
    )
    recommended_streams = sgqlc.types.Field('RecommendedStreamsConnection', graphql_name='recommendedStreams', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=6)),
        ('rec_request_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='recRequestID', default=None)),
        ('location', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='location', default=None)),
        ('context', sgqlc.types.Arg(sgqlc.types.non_null(RecommendationsContext), graphql_name='context', default=None)),
        ('filters', sgqlc.types.Arg(StreamRecommendationsFilters, graphql_name='filters', default=None)),
))
    )
    recurly_configs = sgqlc.types.Field('RecurlyConfigs', graphql_name='recurlyConfigs', args=sgqlc.types.ArgDict((
        ('payment_session', sgqlc.types.Arg(PaymentSession, graphql_name='paymentSession', default=None)),
))
    )
    rejected_chat_message = sgqlc.types.Field('RejectedChatMessage', graphql_name='rejectedChatMessage', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    report_reasons = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ReportReason')), graphql_name='reportReasons', args=sgqlc.types.ArgDict((
        ('content', sgqlc.types.Arg(sgqlc.types.non_null(ReportContentType), graphql_name='content', default=None)),
))
    )
    report_to_sand_country_reasons = sgqlc.types.Field('ReportToSAndCountryReasons', graphql_name='reportToSAndCountryReasons', args=sgqlc.types.ArgDict((
        ('content', sgqlc.types.Arg(sgqlc.types.non_null(ReportContentType), graphql_name='content', default=None)),
))
    )
    request_info = sgqlc.types.Field(sgqlc.types.non_null('RequestInfo'), graphql_name='requestInfo')
    room = sgqlc.types.Field('Room', graphql_name='room', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    search = sgqlc.types.Field('SearchResult', graphql_name='search', args=sgqlc.types.ArgDict((
        ('user_query', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='userQuery', default=None)),
        ('platform', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='platform', default=None)),
        ('options', sgqlc.types.Arg(SearchOptions, graphql_name='options', default=None)),
))
    )
    search_applicable_tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Tag')), graphql_name='searchApplicableTags', args=sgqlc.types.ArgDict((
        ('user_query', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='userQuery', default=None)),
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=15)),
))
    )
    search_categories = sgqlc.types.Field('SearchCategoriesConnection', graphql_name='searchCategories', args=sgqlc.types.ArgDict((
        ('query', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='query', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=25)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    search_category_tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Tag')), graphql_name='searchCategoryTags', args=sgqlc.types.ArgDict((
        ('user_query', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='userQuery', default=None)),
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=15)),
))
    )
    search_for = sgqlc.types.Field('SearchFor', graphql_name='searchFor', args=sgqlc.types.ArgDict((
        ('user_query', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='userQuery', default=None)),
        ('platform', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='platform', default=None)),
        ('options', sgqlc.types.Arg(SearchForOptions, graphql_name='options', default=None)),
        ('target', sgqlc.types.Arg(SearchForTarget, graphql_name='target', default=None)),
        ('request_id', sgqlc.types.Arg(ID, graphql_name='requestID', default=None)),
))
    )
    search_live_tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Tag')), graphql_name='searchLiveTags', args=sgqlc.types.ArgDict((
        ('user_query', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='userQuery', default=None)),
        ('category_id', sgqlc.types.Arg(ID, graphql_name='categoryID', default=None)),
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=15)),
))
    )
    search_streams = sgqlc.types.Field('SearchStreamConnection', graphql_name='searchStreams', args=sgqlc.types.ArgDict((
        ('user_query', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='userQuery', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=25)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    search_suggestions = sgqlc.types.Field('SearchSuggestionConnection', graphql_name='searchSuggestions', args=sgqlc.types.ArgDict((
        ('query_fragment', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='queryFragment', default=None)),
        ('request_id', sgqlc.types.Arg(ID, graphql_name='requestID', default=None)),
))
    )
    search_users = sgqlc.types.Field('SearchUserConnection', graphql_name='searchUsers', args=sgqlc.types.ArgDict((
        ('user_query', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='userQuery', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=25)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    shelves = sgqlc.types.Field('ShelfConnection', graphql_name='shelves', args=sgqlc.types.ArgDict((
        ('request_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='requestID', default=None)),
        ('platform', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='platform', default=None)),
        ('lang_weighted_ccu', sgqlc.types.Arg(Boolean, graphql_name='langWeightedCCU', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('items_per_row', sgqlc.types.Arg(Int, graphql_name='itemsPerRow', default=12)),
        ('context', sgqlc.types.Arg(RecommendationsContext, graphql_name='context', default=None)),
))
    )
    short_video_feed = sgqlc.types.Field('ShortVideoFeedConnection', graphql_name='shortVideoFeed', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=3)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('options', sgqlc.types.Arg(ShortVideoFeedOptions, graphql_name='options', default=None)),
))
    )
    should_show_devsite_csat = sgqlc.types.Field(Boolean, graphql_name='shouldShowDevsiteCSAT')
    squad_stream = sgqlc.types.Field('SquadStream', graphql_name='squadStream', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    stream_playback_access_token = sgqlc.types.Field(PlaybackAccessToken, graphql_name='streamPlaybackAccessToken', args=sgqlc.types.ArgDict((
        ('channel_name', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='channelName', default=None)),
        ('params', sgqlc.types.Arg(sgqlc.types.non_null(PlaybackAccessTokenParams), graphql_name='params', default=None)),
))
    )
    streams = sgqlc.types.Field('StreamConnection', graphql_name='streams', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('options', sgqlc.types.Arg(StreamOptions, graphql_name='options', default=None)),
        ('platform_type', sgqlc.types.Arg(PlatformType, graphql_name='platformType', default='all')),
        ('languages', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(Language)), graphql_name='languages', default=None)),
        ('input', sgqlc.types.Arg(StreamMetadataFilterInput, graphql_name='input', default=None)),
        ('tags', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='tags', default=None)),
))
    )
    subscription_product = sgqlc.types.Field('SubscriptionProduct', graphql_name='subscriptionProduct', args=sgqlc.types.ArgDict((
        ('product_name', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='productName', default=None)),
))
    )
    subscription_token_bundle_products = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SubscriptionTokenBundleProduct')), graphql_name='subscriptionTokenBundleProducts', args=sgqlc.types.ArgDict((
        ('country_code', sgqlc.types.Arg(String, graphql_name='countryCode', default=None)),
))
    )
    subscription_token_product_config = sgqlc.types.Field('SubscriptionTokenProductConfig', graphql_name='subscriptionTokenProductConfig')
    supported_cloud_broadcast_providers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CloudBroadcastProviderKey)), graphql_name='supportedCloudBroadcastProviders')
    team = sgqlc.types.Field('Team', graphql_name='team', args=sgqlc.types.ArgDict((
        ('name', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='name', default=None)),
))
    )
    top_tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Tag')), graphql_name='topTags', args=sgqlc.types.ArgDict((
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=5)),
))
    )
    user = sgqlc.types.Field('User', graphql_name='user', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(ID, graphql_name='id', default=None)),
        ('login', sgqlc.types.Arg(String, graphql_name='login', default=None)),
        ('lookup_type', sgqlc.types.Arg(UserLookupType, graphql_name='lookupType', default='ACTIVE')),
))
    )
    user_by_attribute = sgqlc.types.Field('User', graphql_name='userByAttribute', args=sgqlc.types.ArgDict((
        ('input', sgqlc.types.Arg(sgqlc.types.non_null(UserByAttribute), graphql_name='input', default=None)),
))
    )
    users = sgqlc.types.Field(sgqlc.types.list_of('User'), graphql_name='users', args=sgqlc.types.ArgDict((
        ('ids', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='ids', default=None)),
        ('logins', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='logins', default=None)),
))
    )
    verification_request = sgqlc.types.Field('VerificationRequest', graphql_name='verificationRequest', args=sgqlc.types.ArgDict((
        ('opaque_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='opaqueID', default=None)),
))
    )
    vertical_directory = sgqlc.types.Field('VerticalDirectory', graphql_name='verticalDirectory', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
        ('recommendations_context', sgqlc.types.Arg(sgqlc.types.non_null(RecommendationsContext), graphql_name='recommendationsContext', default=None)),
        ('content_min', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='contentMin', default=None)),
        ('content_max', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='contentMax', default=None)),
))
    )
    vertical_sub_directory = sgqlc.types.Field('VerticalSubDirectory', graphql_name='verticalSubDirectory', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
        ('content_context', sgqlc.types.Arg(VerticalSubDirectoryContentContext, graphql_name='contentContext', default=None)),
        ('recommendations_context', sgqlc.types.Arg(sgqlc.types.non_null(RecommendationsContext), graphql_name='recommendationsContext', default=None)),
        ('content_min', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='contentMin', default=None)),
        ('content_max', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='contentMax', default=None)),
))
    )
    video = sgqlc.types.Field('Video', graphql_name='video', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(ID, graphql_name='id', default=None)),
        ('options', sgqlc.types.Arg(VideoOptions, graphql_name='options', default=None)),
))
    )
    video_comments = sgqlc.types.Field('VideoCommentConnection', graphql_name='videoComments', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='Before', default=None)),
        ('id', sgqlc.types.Arg(String, graphql_name='id', default=None)),
        ('video_id', sgqlc.types.Arg(String, graphql_name='videoID', default=None)),
        ('channel_id', sgqlc.types.Arg(String, graphql_name='channelID', default=None)),
))
    )
    video_ingest_session = sgqlc.types.Field('VideoIngestSession', graphql_name='videoIngestSession', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
        ('channel_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='channelID', default=None)),
        ('customer_id', sgqlc.types.Arg(ID, graphql_name='customerID', default=None)),
))
    )
    video_ingest_session_latest = sgqlc.types.Field('VideoIngestSession', graphql_name='videoIngestSessionLatest', args=sgqlc.types.ArgDict((
        ('channel_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='channelID', default=None)),
        ('customer_id', sgqlc.types.Arg(ID, graphql_name='customerID', default=None)),
        ('seconds_ago', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='secondsAgo', default=None)),
))
    )
    video_ingest_sessions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('VideoIngestSession')), graphql_name='videoIngestSessions', args=sgqlc.types.ArgDict((
        ('channel_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='channelID', default=None)),
        ('customer_id', sgqlc.types.Arg(ID, graphql_name='customerID', default=None)),
        ('started_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='startedAt', default=None)),
        ('ended_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='endedAt', default=None)),
))
    )
    video_playback_access_token = sgqlc.types.Field(PlaybackAccessToken, graphql_name='videoPlaybackAccessToken', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
        ('params', sgqlc.types.Arg(sgqlc.types.non_null(PlaybackAccessTokenParams), graphql_name='params', default=None)),
))
    )
    videos = sgqlc.types.Field('VideoConnection', graphql_name='videos', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('broadcast_type', sgqlc.types.Arg(BroadcastType, graphql_name='broadcastType', default=None)),
        ('language', sgqlc.types.Arg(Language, graphql_name='language', default=None)),
))
    )
    watch_party_items = sgqlc.types.Field('WatchPartyItemConnection', graphql_name='watchPartyItems', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=20)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('access_token', sgqlc.types.Arg(String, graphql_name='accessToken', default=None)),
        ('options', sgqlc.types.Arg(WatchPartyItemSearchOptions, graphql_name='options', default=None)),
))
    )
    whisper_thread = sgqlc.types.Field('WhisperThread', graphql_name='whisperThread', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(ID, graphql_name='id', default=None)),
))
    )


class QuestEvaluationInterval(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('duration_in_days', 'end_time', 'start_time')
    duration_in_days = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationInDays')
    end_time = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endTime')
    start_time = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startTime')


class QuestGoalFloat(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('current', 'goal')
    current = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='current')
    goal = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='goal')


class QuestGoalInt(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('current', 'goal')
    current = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='current')
    goal = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='goal')


class Quests(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('build_acommunity', 'it_begins', 'path_to_affiliate', 'path_to_partner')
    build_acommunity = sgqlc.types.Field(BuildACommunity, graphql_name='buildACommunity')
    it_begins = sgqlc.types.Field(ItBegins, graphql_name='itBegins')
    path_to_affiliate = sgqlc.types.Field(PathToAffiliate, graphql_name='pathToAffiliate')
    path_to_partner = sgqlc.types.Field(PathToPartner, graphql_name='pathToPartner')


class QuickAction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('category', 'is_enabled', 'name', 'scope')
    category = sgqlc.types.Field(sgqlc.types.non_null(QuickActionCategory), graphql_name='category')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    name = sgqlc.types.Field(sgqlc.types.non_null(QuickActionName), graphql_name='name')
    scope = sgqlc.types.Field(sgqlc.types.non_null(QuickActionScope), graphql_name='scope')


class QuickActionFolder(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'name')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('QuickActionLayoutItem'))), graphql_name='items')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class QuickActionLayout(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'items')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    items = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('QuickActionLayoutItem'))), graphql_name='items')


class QuickActionStore(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('quick_actions',)
    quick_actions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(QuickAction))), graphql_name='quickActions')


class RTMPSession(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('audio_codecs', 'avc_level', 'client_ip', 'encoder', 'idr_interval', 'rtmp_exit_reason', 'rtmp_flags', 'rtmp_metadata', 'segment_duration_seconds', 'video_codecs', 'video_resolution_height', 'video_resolution_width')
    audio_codecs = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='audioCodecs')
    avc_level = sgqlc.types.Field(Int, graphql_name='avcLevel')
    client_ip = sgqlc.types.Field(String, graphql_name='clientIP')
    encoder = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='encoder')
    idr_interval = sgqlc.types.Field(Int, graphql_name='idrInterval')
    rtmp_exit_reason = sgqlc.types.Field(String, graphql_name='rtmpExitReason')
    rtmp_flags = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='rtmpFlags')
    rtmp_metadata = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='rtmpMetadata')
    segment_duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='segmentDurationSeconds')
    video_codecs = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='videoCodecs')
    video_resolution_height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='videoResolutionHeight')
    video_resolution_width = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='videoResolutionWidth')


class Radio(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('account', 'currently_playing', 'playlist', 'playlists', 'recently_played', 'station', 'stations')
    account = sgqlc.types.Field(sgqlc.types.non_null('RadioAccount'), graphql_name='account')
    currently_playing = sgqlc.types.Field(sgqlc.types.non_null('RadioCurrentlyPlaying'), graphql_name='currentlyPlaying')
    playlist = sgqlc.types.Field('RadioPlaylist', graphql_name='playlist', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    playlists = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('RadioPlaylist'))), graphql_name='playlists', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(RadioPlaylistFilter, graphql_name='filter', default=None)),
))
    )
    recently_played = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('RadioRecentlyPlayed'))), graphql_name='recentlyPlayed', args=sgqlc.types.ArgDict((
        ('filter', sgqlc.types.Arg(RadioRecentlyPlayedFilter, graphql_name='filter', default=None)),
))
    )
    station = sgqlc.types.Field('RadioStation', graphql_name='station', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
        ('page_token', sgqlc.types.Arg(String, graphql_name='pageToken', default=None)),
        ('number_of_tracks', sgqlc.types.Arg(Int, graphql_name='numberOfTracks', default=None)),
))
    )
    stations = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('RadioStation'))), graphql_name='stations')


class RadioAccount(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('customer_id', 'device_id', 'music_territory', 'amazon_access_token', 'token_expires_at')
    customer_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='customerID')
    device_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='deviceID')
    music_territory = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='musicTerritory')
    amazon_access_token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='amazonAccessToken')
    token_expires_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='tokenExpiresAt')


class RadioAlbum(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'image_url', 'name')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class RadioArtist(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'creator_channel_id', 'id', 'name')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    creator_channel_id = sgqlc.types.Field(ID, graphql_name='creatorChannelID')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class RadioContent(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items',)
    items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('RadioContentItem')), graphql_name='items')


class RadioContentPromotion(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('button_text', 'icon', 'icon_url', 'rank', 'title', 'url')
    button_text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='buttonText')
    icon = sgqlc.types.Field(sgqlc.types.non_null('RadioIconThemeAssets'), graphql_name='icon', args=sgqlc.types.ArgDict((
        ('format', sgqlc.types.Arg(RadioIconFormat, graphql_name='format', default='SVG')),
))
    )
    icon_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='iconURL', args=sgqlc.types.ArgDict((
        ('format', sgqlc.types.Arg(RadioIconFormat, graphql_name='format', default='SVG')),
))
    )
    rank = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='rank')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class RadioCurrentTrackResponse(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_success',)
    is_success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSuccess')


class RadioCurrentlyPlaying(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content_promotions', 'is_currently_playing', 'track')
    content_promotions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(RadioContentPromotion)), graphql_name='contentPromotions')
    is_currently_playing = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCurrentlyPlaying')
    track = sgqlc.types.Field('RadioTrack', graphql_name='track')


class RadioIconThemeAssets(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('dark_url', 'light_url')
    dark_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='darkURL')
    light_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='lightURL')


class RadioPlaylist(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('curator', 'description', 'id', 'image_url', 'is_featured', 'title', 'tracks')
    curator = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='curator')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    is_featured = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isFeatured')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    tracks = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('RadioTrack')), graphql_name='tracks')


class RadioRecentlyPlayed(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content_type', 'id', 'playlist', 'station', 'updated_at')
    content_type = sgqlc.types.Field(sgqlc.types.non_null(RadioRecentlyPlayedType), graphql_name='contentType')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    playlist = sgqlc.types.Field(RadioPlaylist, graphql_name='playlist')
    station = sgqlc.types.Field('RadioStation', graphql_name='station')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='updatedAt')


class RadioStation(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'image_url', 'is_featured', 'page_token', 'title', 'tracks')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    is_featured = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isFeatured')
    page_token = sgqlc.types.Field(String, graphql_name='pageToken')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    tracks = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('RadioTrack')), graphql_name='tracks')


class RadioTrack(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('album', 'artists', 'duration', 'genre', 'id', 'isrc', 'title')
    album = sgqlc.types.Field(sgqlc.types.non_null(RadioAlbum), graphql_name='album')
    artists = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(RadioArtist))), graphql_name='artists')
    duration = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='duration')
    genre = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='genre')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    isrc = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='isrc')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class Raid(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('announce_at', 'go_at', 'id', 'source_channel', 'target_channel', 'viewer_count')
    announce_at = sgqlc.types.Field(Time, graphql_name='announceAt')
    go_at = sgqlc.types.Field(Time, graphql_name='goAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    source_channel = sgqlc.types.Field('User', graphql_name='sourceChannel')
    target_channel = sgqlc.types.Field('User', graphql_name='targetChannel')
    viewer_count = sgqlc.types.Field(Int, graphql_name='viewerCount')


class RaidSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('incoming_raids_policy',)
    incoming_raids_policy = sgqlc.types.Field(sgqlc.types.non_null(IncomingRaidsPolicy), graphql_name='incomingRaidsPolicy')


class Range(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('max', 'min')
    max = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='max')
    min = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='min')


class RateExtensionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'rating')
    error = sgqlc.types.Field(RateExtensionError, graphql_name='error')
    rating = sgqlc.types.Field(ExtensionRating, graphql_name='rating')


class Reaction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count', 'emote', 'self')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')
    emote = sgqlc.types.Field(sgqlc.types.non_null(Emote), graphql_name='emote')
    self = sgqlc.types.Field(sgqlc.types.non_null('ReactionSelfConnection'), graphql_name='self')


class ReactionSelfConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('has_reacted',)
    has_reacted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasReacted')


class ReadNotificationsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count', 'notifications')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')
    notifications = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(OnsiteNotification)), graphql_name='notifications')


class RecommendationFeedback(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('category', 'content', 'id', 'last_updated', 'type', 'user')
    category = sgqlc.types.Field(sgqlc.types.non_null(RecommendationFeedbackCategory), graphql_name='category')
    content = sgqlc.types.Field('RecommendationFeedbackContent', graphql_name='content')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    last_updated = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='lastUpdated')
    type = sgqlc.types.Field(sgqlc.types.non_null(RecommendationFeedbackType), graphql_name='type')
    user = sgqlc.types.Field('User', graphql_name='user')


class RecommendationFeedbackConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('RecommendationFeedbackEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class RecommendationFeedbackEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(RecommendationFeedback, graphql_name='node')


class Recommendations(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('community_gift_quantities', 'friends', 'live_recommendations', 'streams', 'videos')
    community_gift_quantities = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Int)), graphql_name='communityGiftQuantities', args=sgqlc.types.ArgDict((
        ('tracking_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='trackingID', default=None)),
))
    )
    friends = sgqlc.types.Field(sgqlc.types.list_of('RecommendedFriend'), graphql_name='friends')
    live_recommendations = sgqlc.types.Field(LiveRecommendationConnection, graphql_name='liveRecommendations', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('rec_request_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='recRequestID', default=None)),
        ('language', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='language', default=None)),
        ('location', sgqlc.types.Arg(String, graphql_name='location', default=None)),
        ('context', sgqlc.types.Arg(RecommendationsContext, graphql_name='context', default=None)),
))
    )
    streams = sgqlc.types.Field('RecommendedStreamConnection', graphql_name='streams', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
))
    )
    videos = sgqlc.types.Field('RecommendedVideoConnection', graphql_name='videos', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )


class RecommendedFriend(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('reason', 'user')
    reason = sgqlc.types.Field(String, graphql_name='reason')
    user = sgqlc.types.Field('User', graphql_name='user')


class RecommendedGamesConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'generation_id', 'page_info', 'response_id')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('RecommendedGamesEdge')), graphql_name='edges')
    generation_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='generationID')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    response_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='responseID')


class RecommendedGamesEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node', 'tracking_id')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('Game', graphql_name='node')
    tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='trackingID')


class RecommendedStream(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('stream', 'type')
    stream = sgqlc.types.Field('Stream', graphql_name='stream')
    type = sgqlc.types.Field(StreamRecommendationType, graphql_name='type')


class RecommendedStreamConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('nodes',)
    nodes = sgqlc.types.Field(sgqlc.types.list_of(RecommendedStream), graphql_name='nodes')


class RecommendedStreamsConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'generation_id', 'page_info', 'response_id')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('RecommendedStreamsEdge')), graphql_name='edges')
    generation_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='generationID')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    response_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='responseID')


class RecommendedStreamsEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node', 'tracking_id')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('Stream', graphql_name='node')
    tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='trackingID')


class RecommendedVideoConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'set_id')
    edges = sgqlc.types.Field(sgqlc.types.list_of('RecommendedVideoEdge'), graphql_name='edges')
    page_info = sgqlc.types.Field(PageInfo, graphql_name='pageInfo')
    set_id = sgqlc.types.Field(String, graphql_name='setID')


class RecommendedVideoEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    node = sgqlc.types.Field('Video', graphql_name='node')


class RecordAdEventError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(RecordAdEventErrorCode), graphql_name='code')


class RecordAdEventPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(RecordAdEventError, graphql_name='error')


class RecurlyConfigs(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('braintree_client_authorization', 'pay_with_amazon_configs', 'public_key')
    braintree_client_authorization = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='braintreeClientAuthorization')
    pay_with_amazon_configs = sgqlc.types.Field(sgqlc.types.non_null(PayWithAmazonConfigs), graphql_name='payWithAmazonConfigs')
    public_key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='publicKey')


class RecurringPaymentDetail(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('expires_at', 'product_type', 'renewal_currency', 'renewal_price', 'renewal_price_divisor', 'subscription_benefit', 'ticket_owner_id', 'ticket_product_owner_id', 'will_renew')
    expires_at = sgqlc.types.Field(Time, graphql_name='expiresAt')
    product_type = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionProductType), graphql_name='productType')
    renewal_currency = sgqlc.types.Field(String, graphql_name='renewalCurrency')
    renewal_price = sgqlc.types.Field(Int, graphql_name='renewalPrice')
    renewal_price_divisor = sgqlc.types.Field(Int, graphql_name='renewalPriceDivisor')
    subscription_benefit = sgqlc.types.Field('SubscriptionBenefit', graphql_name='subscriptionBenefit')
    ticket_owner_id = sgqlc.types.Field(ID, graphql_name='ticketOwnerID')
    ticket_product_owner_id = sgqlc.types.Field(ID, graphql_name='ticketProductOwnerID')
    will_renew = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='willRenew')


class RedeemClaimableError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(RedeemClaimableErrorCode), graphql_name='code')


class RedeemClaimablePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'key')
    error = sgqlc.types.Field(RedeemClaimableError, graphql_name='error')
    key = sgqlc.types.Field(Claimable, graphql_name='key')


class RedeemCommunityPointsCustomRewardError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(RedeemCommunityPointsCustomRewardErrorCode, graphql_name='code')


class RedeemCommunityPointsCustomRewardPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'redemption')
    error = sgqlc.types.Field(RedeemCommunityPointsCustomRewardError, graphql_name='error')
    redemption = sgqlc.types.Field(CommunityPointsCustomRewardRedemption, graphql_name='redemption')


class RedeemCreatorGiftsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('creator_gifting',)
    creator_gifting = sgqlc.types.Field(CreatorGifting, graphql_name='creatorGifting')


class RedeemRitualTokenError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(RedeemRitualTokenErrorCode), graphql_name='code')


class RedeemRitualTokenPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'token')
    error = sgqlc.types.Field(RedeemRitualTokenError, graphql_name='error')
    token = sgqlc.types.Field('RitualToken', graphql_name='token')


class RedeemSubscriptionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error_code', 'product')
    error_code = sgqlc.types.Field(RedeemSubscriptionResponseErrorCode, graphql_name='errorCode')
    product = sgqlc.types.Field('SubscriptionProduct', graphql_name='product')


class RedeemTrueXAdPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('current_user', 'granted_bits')
    current_user = sgqlc.types.Field('User', graphql_name='currentUser')
    granted_bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='grantedBits')


class RefreshExtensionTokenPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'token')
    error = sgqlc.types.Field(String, graphql_name='error')
    token = sgqlc.types.Field(ExtensionToken, graphql_name='token')


class RegenerateStreamKeyPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel',)
    channel = sgqlc.types.Field(Channel, graphql_name='channel')


class RegenerateVerificationCodePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('request',)
    request = sgqlc.types.Field('VerificationRequest', graphql_name='request')


class RegisterPayoutInformationError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'invalid_fields')
    code = sgqlc.types.Field(sgqlc.types.non_null(RegisterPayoutInformationErrorCode), graphql_name='code')
    invalid_fields = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(RegisterPayoutInformationFieldName)), graphql_name='invalidFields')


class RegisterPayoutInformationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'workflow')
    error = sgqlc.types.Field(RegisterPayoutInformationError, graphql_name='error')
    workflow = sgqlc.types.Field(PayoutOnboardingWorkflow, graphql_name='workflow')


class RegisterTwoFactorConfirmationError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'message')
    code = sgqlc.types.Field(sgqlc.types.non_null(RegisterTwoFactorConfirmationErrorCode), graphql_name='code')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')


class RegisterTwoFactorConfirmationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('access_token', 'error')
    access_token = sgqlc.types.Field(String, graphql_name='accessToken')
    error = sgqlc.types.Field(RegisterTwoFactorConfirmationError, graphql_name='error')


class RegisterTwoFactorError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'message')
    code = sgqlc.types.Field(sgqlc.types.non_null(RegisterTwoFactorErrorCode), graphql_name='code')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')


class RegisterTwoFactorPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(RegisterTwoFactorError, graphql_name='error')


class RejectFriendRequestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class RejectSquadStreamInvitationError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(RejectSquadStreamInvitationErrorCode), graphql_name='code')


class RejectSquadStreamInvitationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'invitation')
    error = sgqlc.types.Field(RejectSquadStreamInvitationError, graphql_name='error')
    invitation = sgqlc.types.Field('SquadStreamInvitation', graphql_name='invitation')


class RejectSquadStreamOutOfNetworkInvitationsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(RejectSquadStreamOutOfNetworkInvitationsErrorCode), graphql_name='code')


class RejectSquadStreamOutOfNetworkInvitationsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(RejectSquadStreamOutOfNetworkInvitationsError, graphql_name='error')


class RejectedChatMessage(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('body', 'failed_fragments', 'id', 'is_resolved', 'message', 'sender', 'status', 'target')
    body = sgqlc.types.Field(String, graphql_name='body')
    failed_fragments = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name='failedFragments')
    id = sgqlc.types.Field(ID, graphql_name='id')
    is_resolved = sgqlc.types.Field(Boolean, graphql_name='isResolved')
    message = sgqlc.types.Field(Message, graphql_name='message')
    sender = sgqlc.types.Field('User', graphql_name='sender')
    status = sgqlc.types.Field(sgqlc.types.non_null(CaughtMessageStatus), graphql_name='status')
    target = sgqlc.types.Field('User', graphql_name='target')


class RemoveAutohostChannelsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class RemoveCollectionItemPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('collection',)
    collection = sgqlc.types.Field(Collection, graphql_name='collection')


class RemoveCompetitionPhasePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field(Competition, graphql_name='competition')
    error = sgqlc.types.Field(CompetitionError, graphql_name='error')


class RemoveCompetitionPlayerPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field(Competition, graphql_name='competition')
    error = sgqlc.types.Field(CompetitionError, graphql_name='error')


class RemoveCompetitionTeamPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field(Competition, graphql_name='competition')
    error = sgqlc.types.Field(CompetitionError, graphql_name='error')


class RemoveEditorError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(RemoveEditorErrorCode), graphql_name='code')


class RemoveEditorPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error', 'target_user')
    channel = sgqlc.types.Field('User', graphql_name='channel')
    error = sgqlc.types.Field(RemoveEditorError, graphql_name='error')
    target_user = sgqlc.types.Field('User', graphql_name='targetUser')


class RemoveOrganizationMemberError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(RemoveOrganizationMemberErrorCode), graphql_name='code')


class RemoveOrganizationMemberPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'target_user')
    error = sgqlc.types.Field(RemoveOrganizationMemberError, graphql_name='error')
    target_user = sgqlc.types.Field('User', graphql_name='targetUser')


class RemoveReactionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content',)
    content = sgqlc.types.Field(sgqlc.types.non_null('ReactableContent'), graphql_name='content')


class RemoveSquadStreamMemberError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(RemoveSquadStreamMemberErrorCode), graphql_name='code')


class RemoveSquadStreamMemberPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'squad_stream')
    error = sgqlc.types.Field(RemoveSquadStreamMemberError, graphql_name='error')
    squad_stream = sgqlc.types.Field('SquadStream', graphql_name='squadStream')


class RemoveStuccoPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('stuccos',)
    stuccos = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Stucco')), graphql_name='stuccos')


class ReorderCollectionItemPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('collection',)
    collection = sgqlc.types.Field(Collection, graphql_name='collection')


class ReportContentPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'content_id')
    content = sgqlc.types.Field(sgqlc.types.non_null(ReportContentType), graphql_name='content')
    content_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='contentID')


class ReportReason(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'is_applicable_to_country_regulations', 'text')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_applicable_to_country_regulations = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isApplicableToCountryRegulations')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class ReportToSAndCountryReasons(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('country_code', 'disclosure_text', 'to_sand_country_reasons')
    country_code = sgqlc.types.Field(String, graphql_name='countryCode')
    disclosure_text = sgqlc.types.Field(String, graphql_name='disclosureText')
    to_sand_country_reasons = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ReportReason))), graphql_name='toSAndCountryReasons')


class ReportWhisperPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field('ReportWhisperPayloadError', graphql_name='error')


class ReportWhisperPayloadError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('reason',)
    reason = sgqlc.types.Field(sgqlc.types.non_null(ReportWhisperErrorReason), graphql_name='reason')


class ReportWhisperThreadPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('thread',)
    thread = sgqlc.types.Field(sgqlc.types.non_null('WhisperThread'), graphql_name='thread')


class RequestInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('country_code', 'from_eu', 'ip_address', 'is_from_eea')
    country_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='countryCode')
    from_eu = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='fromEU')
    ip_address = sgqlc.types.Field(String, graphql_name='ipAddress')
    is_from_eea = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isFromEEA')


class RequestRitualTokenError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(RequestRitualTokenErrorCode), graphql_name='code')


class RequestRitualTokenPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'token')
    error = sgqlc.types.Field(RequestRitualTokenError, graphql_name='error')
    token = sgqlc.types.Field('RitualToken', graphql_name='token')


class ResendVerificationEmailPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class ResetUsernameCodeError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(ResetUsernameErrorCode), graphql_name='code')


class ResetUsernamePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'login')
    error = sgqlc.types.Field(ResetUsernameCodeError, graphql_name='error')
    login = sgqlc.types.Field(String, graphql_name='login')


class ResolvePredictionEventError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(ResolvePredictionEventErrorCode), graphql_name='code')


class ResolvePredictionEventPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'prediction_event')
    error = sgqlc.types.Field(ResolvePredictionEventError, graphql_name='error')
    prediction_event = sgqlc.types.Field(PredictionEvent, graphql_name='predictionEvent')


class ResourceRestriction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('exemptions', 'id', 'options', 'type')
    exemptions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ResourceRestrictionExemption')), graphql_name='exemptions')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    options = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ResourceRestrictionOption))), graphql_name='options')
    type = sgqlc.types.Field(sgqlc.types.non_null(ResourceRestrictionType), graphql_name='type')


class ResourceRestrictionExemption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('actions', 'ends_at', 'keys', 'starts_at', 'type')
    actions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ResourceRestrictionExemptionAction')), graphql_name='actions')
    ends_at = sgqlc.types.Field(Time, graphql_name='endsAt')
    keys = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='keys')
    starts_at = sgqlc.types.Field(Time, graphql_name='startsAt')
    type = sgqlc.types.Field(sgqlc.types.non_null(ResourceRestrictionExemptionType), graphql_name='type')


class ResourceRestrictionExemptionAction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('name', 'title')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class RespondToTeamInvitationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class ResubNotification(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cumulative_tenure_months', 'id', 'months', 'streak_tenure_months', 'token', 'is_gift_subscription', 'gifter')
    cumulative_tenure_months = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cumulativeTenureMonths')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    months = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='months')
    streak_tenure_months = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='streakTenureMonths')
    token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='token')
    is_gift_subscription = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isGiftSubscription')
    gifter = sgqlc.types.Field('User', graphql_name='gifter')


class ResumeSchedulePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'schedule')
    error = sgqlc.types.Field(ResumeScheduleError, graphql_name='error')
    schedule = sgqlc.types.Field('Schedule', graphql_name='schedule')


class RevenueConfig(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'split_percent', 'start_at')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    split_percent = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='splitPercent')
    start_at = sgqlc.types.Field(Time, graphql_name='startAt')


class RevokeVIPError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(RevokeVIPErrorCode), graphql_name='code')


class RevokeVIPPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error', 'revokee')
    channel = sgqlc.types.Field('User', graphql_name='channel')
    error = sgqlc.types.Field(RevokeVIPError, graphql_name='error')
    revokee = sgqlc.types.Field('User', graphql_name='revokee')


class RewardedVideo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_eligible', 'should_captcha')
    is_eligible = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEligible')
    should_captcha = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldCaptcha')


class RitualToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'expires_at', 'id', 'status', 'type', 'user')
    channel = sgqlc.types.Field('User', graphql_name='channel')
    expires_at = sgqlc.types.Field(Time, graphql_name='expiresAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    status = sgqlc.types.Field(RitualTokenStatus, graphql_name='status')
    type = sgqlc.types.Field(RitualTokenType, graphql_name='type')
    user = sgqlc.types.Field('User', graphql_name='user')


class Room(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'is_previewable', 'members', 'messages', 'minimum_allowed_role', 'modes', 'name', 'owner', 'role_permissions', 'self', 'topic')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_previewable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPreviewable')
    members = sgqlc.types.Field('RoomMemberConnection', graphql_name='members', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=100)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    messages = sgqlc.types.Field('RoomMessageConnection', graphql_name='messages', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='before', default=None)),
        ('from_time', sgqlc.types.Arg(Time, graphql_name='fromTime', default=None)),
))
    )
    minimum_allowed_role = sgqlc.types.Field(sgqlc.types.non_null(RoomRole), graphql_name='minimumAllowedRole')
    modes = sgqlc.types.Field('RoomModes', graphql_name='modes')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='owner')
    role_permissions = sgqlc.types.Field('RoomRolePermissions', graphql_name='rolePermissions')
    self = sgqlc.types.Field('RoomView', graphql_name='self')
    topic = sgqlc.types.Field(String, graphql_name='topic')


class RoomMemberConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('RoomMemberEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class RoomMemberEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node', 'type')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('User', graphql_name='node')
    type = sgqlc.types.Field(sgqlc.types.non_null(RoomMemberType), graphql_name='type')


class RoomMessage(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'deleted_at', 'id', 'room', 'sender', 'sent_at')
    content = sgqlc.types.Field(sgqlc.types.non_null('RoomMessageContent'), graphql_name='content')
    deleted_at = sgqlc.types.Field(Time, graphql_name='deletedAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    room = sgqlc.types.Field(sgqlc.types.non_null(Room), graphql_name='room')
    sender = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='sender')
    sent_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='sentAt')


class RoomMessageConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('RoomMessageEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class RoomMessageContent(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('fragments', 'text')
    fragments = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('RoomMessageFragment')), graphql_name='fragments')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class RoomMessageEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('RoomMessageItem', graphql_name='node')


class RoomMessageFragment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'text')
    content = sgqlc.types.Field('FragmentContent', graphql_name='content')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class RoomMessageGroupMention(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('type',)
    type = sgqlc.types.Field(sgqlc.types.non_null(RoomMessageMentionType), graphql_name='type')


class RoomModes(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('emotes_only_mode_enabled', 'r9k_mode_enabled', 'slow_mode_duration_seconds')
    emotes_only_mode_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='emotesOnlyModeEnabled')
    r9k_mode_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='r9kModeEnabled')
    slow_mode_duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='slowModeDurationSeconds')


class RoomPermissions(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('moderate', 'read_messages', 'send_messages')
    moderate = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='moderate')
    read_messages = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='readMessages')
    send_messages = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='sendMessages')


class RoomRolePermissions(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('read', 'send')
    read = sgqlc.types.Field(sgqlc.types.non_null(RoomRole), graphql_name='read')
    send = sgqlc.types.Field(sgqlc.types.non_null(RoomRole), graphql_name='send')


class RoomView(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_archived', 'is_muted', 'is_unread', 'last_read_at', 'permissions', 'room', 'unread_mention_count')
    is_archived = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isArchived')
    is_muted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isMuted')
    is_unread = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isUnread')
    last_read_at = sgqlc.types.Field(Time, graphql_name='lastReadAt')
    permissions = sgqlc.types.Field(RoomPermissions, graphql_name='permissions')
    room = sgqlc.types.Field(sgqlc.types.non_null(Room), graphql_name='room')
    unread_mention_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='unreadMentionCount')


class RotateExtensionSecretsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'secrets')
    error = sgqlc.types.Field(RotateExtensionSecretsError, graphql_name='error')
    secrets = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ExtensionSecret)), graphql_name='secrets')


class RunMultiplayerAdsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(RunMultiplayerAdErrorCode, graphql_name='error')


class SCETitle(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('age_rating', 'attribute', 'genre', 'id', 'is_preset', 'language', 'metadata', 'name', 'preset_text', 'preset_text_description', 'product_id', 'session_id', 'short_name', 'store_url')
    age_rating = sgqlc.types.Field(Int, graphql_name='ageRating')
    attribute = sgqlc.types.Field(String, graphql_name='attribute')
    genre = sgqlc.types.Field(String, graphql_name='genre')
    id = sgqlc.types.Field(ID, graphql_name='id')
    is_preset = sgqlc.types.Field(Boolean, graphql_name='isPreset')
    language = sgqlc.types.Field(String, graphql_name='language')
    metadata = sgqlc.types.Field(String, graphql_name='metadata')
    name = sgqlc.types.Field(String, graphql_name='name')
    preset_text = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name='presetText')
    preset_text_description = sgqlc.types.Field(String, graphql_name='presetTextDescription')
    product_id = sgqlc.types.Field(String, graphql_name='productID')
    session_id = sgqlc.types.Field(String, graphql_name='sessionID')
    short_name = sgqlc.types.Field(String, graphql_name='shortName')
    store_url = sgqlc.types.Field(String, graphql_name='storeURL')


class SCEUser(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('country', 'np_id', 'online_id')
    country = sgqlc.types.Field(String, graphql_name='country')
    np_id = sgqlc.types.Field(ID, graphql_name='npID')
    online_id = sgqlc.types.Field(ID, graphql_name='onlineID')


class SSOLink(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('app', 'sso_id')
    app = sgqlc.types.Field(String, graphql_name='app')
    sso_id = sgqlc.types.Field(String, graphql_name='ssoID')


class SaveExtensionManifestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'manifest')
    error = sgqlc.types.Field(SaveExtensionManifestError, graphql_name='error')
    manifest = sgqlc.types.Field(ExtensionManifest, graphql_name='manifest')


class Schedule(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'interruption', 'next_segment', 'segments')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    interruption = sgqlc.types.Field('ScheduleInterruption', graphql_name='interruption')
    next_segment = sgqlc.types.Field('ScheduleSegment', graphql_name='nextSegment')
    segments = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ScheduleSegment')), graphql_name='segments', args=sgqlc.types.ArgDict((
        ('utc_offset_minutes', sgqlc.types.Arg(Int, graphql_name='utcOffsetMinutes', default=None)),
        ('starting_weekday', sgqlc.types.Arg(String, graphql_name='startingWeekday', default=None)),
        ('relative_date', sgqlc.types.Arg(Time, graphql_name='relativeDate', default=None)),
))
    )


class ScheduleInterruption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('end_at', 'reason', 'start_at')
    end_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endAt')
    reason = sgqlc.types.Field(sgqlc.types.non_null(ScheduleInterruptionReason), graphql_name='reason')
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')


class ScheduleSegment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cancelled_until', 'categories', 'end_at', 'first_occurrence_date', 'has_reminder', 'id', 'is_cancelled', 'reminder_count', 'repeat_ends_after_count', 'start_at', 'title')
    cancelled_until = sgqlc.types.Field(Time, graphql_name='cancelledUntil')
    categories = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Game')), graphql_name='categories')
    end_at = sgqlc.types.Field(Time, graphql_name='endAt')
    first_occurrence_date = sgqlc.types.Field(Time, graphql_name='firstOccurrenceDate')
    has_reminder = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasReminder')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_cancelled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCancelled')
    reminder_count = sgqlc.types.Field(Int, graphql_name='reminderCount')
    repeat_ends_after_count = sgqlc.types.Field(Int, graphql_name='repeatEndsAfterCount')
    start_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startAt')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class SearchCategoriesConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SearchCategoriesEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class SearchCategoriesEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null('Game'), graphql_name='node')


class SearchFor(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channels', 'games', 'live_channels', 'related_live_channels', 'users', 'videos')
    channels = sgqlc.types.Field('SearchForResultUsers', graphql_name='channels')
    games = sgqlc.types.Field('SearchForResultGames', graphql_name='games')
    live_channels = sgqlc.types.Field('SearchForResultUsers', graphql_name='liveChannels')
    related_live_channels = sgqlc.types.Field('SearchForResultRelatedLiveChannels', graphql_name='relatedLiveChannels')
    users = sgqlc.types.Field('SearchForResultUsers', graphql_name='users')
    videos = sgqlc.types.Field('SearchForResultVideos', graphql_name='videos')


class SearchForEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('item', 'tracking_id')
    item = sgqlc.types.Field(sgqlc.types.non_null('SearchForItem'), graphql_name='item')
    tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='trackingID')


class SearchForEdgeRelatedLiveChannels(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('item', 'tracking_id')
    item = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='item')
    tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='trackingID')


class SearchForResultGames(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'edges', 'items', 'page_info', 'score', 'total_matches')
    cursor = sgqlc.types.Field(String, graphql_name='cursor')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(SearchForEdge))), graphql_name='edges')
    items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Game')), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    score = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='score')
    total_matches = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalMatches')


class SearchForResultRelatedLiveChannels(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('edges', 'items', 'score')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(SearchForEdgeRelatedLiveChannels))), graphql_name='edges')
    items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('User')), graphql_name='items')
    score = sgqlc.types.Field(Int, graphql_name='score')


class SearchForResultUsers(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'edges', 'items', 'page_info', 'score', 'total_matches')
    cursor = sgqlc.types.Field(String, graphql_name='cursor')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(SearchForEdge))), graphql_name='edges')
    items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('User')), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    score = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='score')
    total_matches = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalMatches')


class SearchForResultVideos(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'edges', 'items', 'page_info', 'score', 'total_matches')
    cursor = sgqlc.types.Field(String, graphql_name='cursor')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(SearchForEdge))), graphql_name='edges')
    items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Video')), graphql_name='items')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    score = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='score')
    total_matches = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalMatches')


class SearchResult(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('result',)
    result = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='result')


class SearchStreamConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SearchStreamEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class SearchStreamEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null('Stream'), graphql_name='node')


class SearchSuggestion(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'highlight', 'id', 'matching_characters', 'text')
    content = sgqlc.types.Field('SearchSuggestionContent', graphql_name='content')
    highlight = sgqlc.types.Field(sgqlc.types.non_null('SearchSuggestionHighlight'), graphql_name='highlight')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    matching_characters = sgqlc.types.Field('SearchSuggestionHighlight', graphql_name='matchingCharacters')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class SearchSuggestionCategory(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('box_art_url', 'game', 'id')
    box_art_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='boxArtURL', args=sgqlc.types.ArgDict((
        ('width', sgqlc.types.Arg(Int, graphql_name='width', default=None)),
        ('height', sgqlc.types.Arg(Int, graphql_name='height', default=None)),
))
    )
    game = sgqlc.types.Field('Game', graphql_name='game')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class SearchSuggestionChannel(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'is_verified', 'login', 'profile_image_url', 'user')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_verified = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isVerified')
    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='login')
    profile_image_url = sgqlc.types.Field(String, graphql_name='profileImageURL', args=sgqlc.types.ArgDict((
        ('width', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='width', default=None)),
))
    )
    user = sgqlc.types.Field('User', graphql_name='user')


class SearchSuggestionConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'tracking')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SearchSuggestionEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    tracking = sgqlc.types.Field('SearchSuggestionTracking', graphql_name='tracking')


class SearchSuggestionEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(SearchSuggestion), graphql_name='node')


class SearchSuggestionHighlight(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('end', 'start')
    end = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='end')
    start = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='start')


class SearchSuggestionTracking(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('model_tracking_id', 'response_id')
    model_tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='modelTrackingID')
    response_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='responseID')


class SearchUserConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SearchUserEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class SearchUserEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='node')


class SeasonDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('episode_count', 'season')
    episode_count = sgqlc.types.Field(Int, graphql_name='episodeCount')
    season = sgqlc.types.Field(Int, graphql_name='season')


class SeedCompetitionParticipantPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field(Competition, graphql_name='competition')
    error = sgqlc.types.Field(CompetitionError, graphql_name='error')


class SelectChannelBadgePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_successful', 'user')
    is_successful = sgqlc.types.Field(Boolean, graphql_name='isSuccessful')
    user = sgqlc.types.Field('User', graphql_name='user')


class SelectGlobalBadgePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_successful', 'user')
    is_successful = sgqlc.types.Field(Boolean, graphql_name='isSuccessful')
    user = sgqlc.types.Field('User', graphql_name='user')


class SelfClaimEdge(sgqlc.types.Interface):
    __schema__ = schema
    __field_names__ = ('can_claim', 'country_of_residence', 'id', 'status_code')
    can_claim = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canClaim')
    country_of_residence = sgqlc.types.Field(String, graphql_name='countryOfResidence')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    status_code = sgqlc.types.Field(String, graphql_name='statusCode')


class SendChatMessageThroughSubscriberModePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('balance', 'error', 'is_held_by_automod')
    balance = sgqlc.types.Field(Int, graphql_name='balance')
    error = sgqlc.types.Field('SendCopoMessageError', graphql_name='error')
    is_held_by_automod = sgqlc.types.Field(Boolean, graphql_name='isHeldByAutomod')


class SendCheerPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('current_user', 'id', 'validation_error')
    current_user = sgqlc.types.Field('User', graphql_name='currentUser')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    validation_error = sgqlc.types.Field('SendCheerValidationError', graphql_name='validationError')


class SendCheerValidationError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'message', 'message_content')
    code = sgqlc.types.Field(sgqlc.types.non_null(SendCheerValidationErrorCode), graphql_name='code')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')
    message_content = sgqlc.types.Field(RoomMessageContent, graphql_name='messageContent')


class SendCopoMessageError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(SendCopoMessageErrorCode, graphql_name='code')


class SendExtensionMessageError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(SendExtensionMessageErrorCode), graphql_name='code')


class SendExtensionMessagePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'rate_limits_applied')
    error = sgqlc.types.Field(SendExtensionMessageError, graphql_name='error')
    rate_limits_applied = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SendExtensionMessageThrottleData')), graphql_name='rateLimitsApplied')


class SendExtensionMessageThrottleData(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_limit_exceeded', 'limit', 'rate_limiter_name', 'remaining_quota', 'resets_at')
    is_limit_exceeded = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isLimitExceeded')
    limit = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='limit')
    rate_limiter_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='rateLimiterName')
    remaining_quota = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='remainingQuota')
    resets_at = sgqlc.types.Field(Time, graphql_name='resetsAt')


class SendHighlightedChatMessagePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('balance', 'error', 'is_held_by_automod')
    balance = sgqlc.types.Field(Int, graphql_name='balance')
    error = sgqlc.types.Field(SendCopoMessageError, graphql_name='error')
    is_held_by_automod = sgqlc.types.Field(Boolean, graphql_name='isHeldByAutomod')


class SendRoomMessageError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'remaining_duration_seconds', 'slow_mode_duration_seconds')
    code = sgqlc.types.Field(sgqlc.types.non_null(SendRoomMessageErrorCode), graphql_name='code')
    remaining_duration_seconds = sgqlc.types.Field(Int, graphql_name='remainingDurationSeconds')
    slow_mode_duration_seconds = sgqlc.types.Field(Int, graphql_name='slowModeDurationSeconds')


class SendRoomMessagePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'message')
    error = sgqlc.types.Field(SendRoomMessageError, graphql_name='error')
    message = sgqlc.types.Field(RoomMessage, graphql_name='message')


class SendWhisperError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(SendWhisperErrorCode), graphql_name='code')


class SendWhisperPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'message')
    error = sgqlc.types.Field(SendWhisperError, graphql_name='error')
    message = sgqlc.types.Field('WhisperMessage', graphql_name='message')


class SeriesDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('season_count',)
    season_count = sgqlc.types.Field(Int, graphql_name='seasonCount')


class SetAutoAdDensityPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('auto_ad_length_seconds', 'auto_ad_period_minutes', 'target_channel_id')
    auto_ad_length_seconds = sgqlc.types.Field(Int, graphql_name='autoAdLengthSeconds')
    auto_ad_period_minutes = sgqlc.types.Field(Int, graphql_name='autoAdPeriodMinutes')
    target_channel_id = sgqlc.types.Field(ID, graphql_name='targetChannelID')


class SetAutoRefillSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('auto_refill_profile',)
    auto_refill_profile = sgqlc.types.Field(AutoRefillProfile, graphql_name='autoRefillProfile')


class SetAutohostChannelsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class SetBitsUserSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('current_user',)
    current_user = sgqlc.types.Field('User', graphql_name='currentUser')


class SetChannelFeedEnabledPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='user')


class SetChannelNotificationSettingPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('setting_state',)
    setting_state = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='settingState')


class SetChannelTrailerPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    error = sgqlc.types.Field(SetChannelTrailerErrorCode, graphql_name='error')


class SetChatPauseSettingPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('chat_pause_setting',)
    chat_pause_setting = sgqlc.types.Field(ChatPauseSetting, graphql_name='chatPauseSetting')


class SetContentTagsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content',)
    content = sgqlc.types.Field('TaggedContent', graphql_name='content')


class SetCreatorBadgeFlairPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel',)
    channel = sgqlc.types.Field(Channel, graphql_name='channel')


class SetDashboardAlertQueueActivityStatusError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(SetDashboardAlertQueueActivityStatusErrorCode), graphql_name='code')


class SetDashboardAlertQueueActivityStatusPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('activity', 'error')
    activity = sgqlc.types.Field(DashboardActivityFeedActivity, graphql_name='activity')
    error = sgqlc.types.Field(SetDashboardAlertQueueActivityStatusError, graphql_name='error')


class SetDashboardAlertQueuePreferenceError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(SetDashboardAlertQueuePreferenceErrorCode), graphql_name='code')


class SetDashboardAlertQueuePreferencePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'preferences')
    error = sgqlc.types.Field(SetDashboardAlertQueuePreferenceError, graphql_name='error')
    preferences = sgqlc.types.Field(DashboardAlertQueuePreferences, graphql_name='preferences')


class SetDefaultPaymentMethodPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error_code', 'user')
    error_code = sgqlc.types.Field(SetDefaultPaymentMethodErrorCode, graphql_name='errorCode')
    user = sgqlc.types.Field('User', graphql_name='user')


class SetDeletedMessageDisplaySettingPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('deleted_message_display_setting',)
    deleted_message_display_setting = sgqlc.types.Field(DeletedMessageDisplaySetting, graphql_name='deletedMessageDisplaySetting')


class SetDropBenefitsOnDropPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_campaign', 'error')
    drop_campaign = sgqlc.types.Field(DropCampaign, graphql_name='dropCampaign')
    error = sgqlc.types.Field(DropsError, graphql_name='error')


class SetDropCampaignAccessPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_campaign', 'error')
    drop_campaign = sgqlc.types.Field(DropCampaign, graphql_name='dropCampaign')
    error = sgqlc.types.Field(DropsError, graphql_name='error')


class SetDropCampaignStatusPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_campaign', 'error')
    drop_campaign = sgqlc.types.Field(DropCampaign, graphql_name='dropCampaign')
    error = sgqlc.types.Field(DropsError, graphql_name='error')


class SetDropCampaignSummaryPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_campaign', 'error')
    drop_campaign = sgqlc.types.Field(DropCampaign, graphql_name='dropCampaign')
    error = sgqlc.types.Field(DropsError, graphql_name='error')


class SetDropEventRulePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_campaign', 'error')
    drop_campaign = sgqlc.types.Field(DropCampaign, graphql_name='dropCampaign')
    error = sgqlc.types.Field(DropsError, graphql_name='error')


class SetDropManualTriggerRulePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_campaign', 'error')
    drop_campaign = sgqlc.types.Field(DropCampaign, graphql_name='dropCampaign')
    error = sgqlc.types.Field(DropsError, graphql_name='error')


class SetDropSummaryPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_campaign', 'error')
    drop_campaign = sgqlc.types.Field(DropCampaign, graphql_name='dropCampaign')
    error = sgqlc.types.Field(DropsError, graphql_name='error')


class SetDropTimeBasedRulePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_campaign', 'error')
    drop_campaign = sgqlc.types.Field(DropCampaign, graphql_name='dropCampaign')
    error = sgqlc.types.Field(DropsError, graphql_name='error')


class SetEmoteAnimationsEnabledPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_emote_animations_enabled',)
    is_emote_animations_enabled = sgqlc.types.Field(Boolean, graphql_name='isEmoteAnimationsEnabled')


class SetEmoteModifierGroupsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(SetEmoteModifierGroupsErrorCode), graphql_name='code')


class SetEmoteModifierGroupsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'groups')
    error = sgqlc.types.Field(SetEmoteModifierGroupsError, graphql_name='error')
    groups = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(EmoteModifierGroupPayload)), graphql_name='groups')


class SetExtensionConfigurationError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(SetExtensionConfigurationErrorCode), graphql_name='code')


class SetExtensionConfigurationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel_id', 'config_version', 'content', 'error', 'extension_id')
    channel_id = sgqlc.types.Field(ID, graphql_name='channelID')
    config_version = sgqlc.types.Field(String, graphql_name='configVersion')
    content = sgqlc.types.Field(String, graphql_name='content')
    error = sgqlc.types.Field(SetExtensionConfigurationError, graphql_name='error')
    extension_id = sgqlc.types.Field(ID, graphql_name='extensionID')


class SetExtensionFeatureFlagsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'missing_installation_id')
    code = sgqlc.types.Field(sgqlc.types.non_null(SetExtensionFeatureFlagsErrorCode), graphql_name='code')
    missing_installation_id = sgqlc.types.Field(ID, graphql_name='missingInstallationID')


class SetExtensionFeatureFlagsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'installed_extension')
    error = sgqlc.types.Field(SetExtensionFeatureFlagsError, graphql_name='error')
    installed_extension = sgqlc.types.Field(ExtensionInstallation, graphql_name='installedExtension')


class SetExtensionInstallationOAuthPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('installed_extension',)
    installed_extension = sgqlc.types.Field(ExtensionInstallation, graphql_name='installedExtension')


class SetGameDropAccountLinkClientPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'game')
    error = sgqlc.types.Field(DropsError, graphql_name='error')
    game = sgqlc.types.Field('Game', graphql_name='game')


class SetModLogsAccessPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mod_logs_access',)
    mod_logs_access = sgqlc.types.Field(ModLogsAccess, graphql_name='modLogsAccess')


class SetModViewSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('mod_view_settings',)
    mod_view_settings = sgqlc.types.Field(ModViewSettings, graphql_name='modViewSettings')


class SetNotificationSettingPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('setting_state',)
    setting_state = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='settingState')


class SetOverwatchLeagueTeamPreferencePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'overwatch_league_team_preference')
    error = sgqlc.types.Field('SetOverwatchTeamPreferenceError', graphql_name='error')
    overwatch_league_team_preference = sgqlc.types.Field(OverwatchLeagueTeamPreference, graphql_name='overwatchLeagueTeamPreference')


class SetOverwatchTeamPreferenceError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(SetOverwatchTeamPreferenceErrorCode), graphql_name='code')


class SetPreferredLanguageTagPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class SetQuickActionLayoutError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(SetQuickActionLayoutErrorCode, graphql_name='code')


class SetQuickActionLayoutPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'layout')
    error = sgqlc.types.Field(SetQuickActionLayoutError, graphql_name='error')
    layout = sgqlc.types.Field(QuickActionLayout, graphql_name='layout')


class SetRadioCurrentlyPlayingError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(SetRadioCurrentlyPlayingErrorCode, graphql_name='code')


class SetRadioCurrentlyPlayingPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('current_track', 'error')
    current_track = sgqlc.types.Field(RadioCurrentTrackResponse, graphql_name='currentTrack')
    error = sgqlc.types.Field(SetRadioCurrentlyPlayingError, graphql_name='error')


class SetReadableChatColorsEnabledPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_readable_chat_colors_enabled',)
    is_readable_chat_colors_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isReadableChatColorsEnabled')


class SetResourceRestrictionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'stream', 'video')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    stream = sgqlc.types.Field('Stream', graphql_name='stream')
    video = sgqlc.types.Field('Video', graphql_name='video')


class SetScheduleReminderError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'message')
    code = sgqlc.types.Field(sgqlc.types.non_null(SetScheduleReminderErrorCode), graphql_name='code')
    message = sgqlc.types.Field(String, graphql_name='message')


class SetScheduleReminderPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'is_enabled')
    error = sgqlc.types.Field(SetScheduleReminderError, graphql_name='error')
    is_enabled = sgqlc.types.Field(Boolean, graphql_name='isEnabled')


class SetSessionStatusPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('set_again_in_seconds', 'user')
    set_again_in_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='setAgainInSeconds')
    user = sgqlc.types.Field('User', graphql_name='user')


class SetSquadStreamPrimaryPlayerPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('primary_player',)
    primary_player = sgqlc.types.Field('User', graphql_name='primaryPlayer')


class SetUnbanRequestsSettingsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(SetUnbanRequestsSettingsErrorCode), graphql_name='code')


class SetUnbanRequestsSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'settings')
    error = sgqlc.types.Field(SetUnbanRequestsSettingsError, graphql_name='error')
    settings = sgqlc.types.Field('UnbanRequestsSettings', graphql_name='settings')


class SetUserResidencePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class Share(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('author', 'created_at', 'id', 'target')
    author = sgqlc.types.Field('User', graphql_name='author')
    created_at = sgqlc.types.Field(Time, graphql_name='createdAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    target = sgqlc.types.Field('ShareTarget', graphql_name='target')


class Shelf(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'display_type', 'id', 'title', 'tracking_info')
    content = sgqlc.types.Field(sgqlc.types.non_null('ShelfContentConnection'), graphql_name='content')
    display_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='displayType')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    title = sgqlc.types.Field(sgqlc.types.non_null('ShelfTitle'), graphql_name='title')
    tracking_info = sgqlc.types.Field(sgqlc.types.non_null('TrackingInfo'), graphql_name='trackingInfo')


class ShelfConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ShelfEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class ShelfContentConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('ShelfContentEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class ShelfContentEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'metadata', 'node', 'promotions_campaign_id', 'source_type', 'tracking_id')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    metadata = sgqlc.types.Field('ShelfContentMetadata', graphql_name='metadata')
    node = sgqlc.types.Field('ShelfContent', graphql_name='node')
    promotions_campaign_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='promotionsCampaignID')
    source_type = sgqlc.types.Field(sgqlc.types.non_null(SourceType), graphql_name='sourceType')
    tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='trackingID')


class ShelfContentMetadata(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('has_live', 'subtitle', 'title')
    has_live = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasLive')
    subtitle = sgqlc.types.Field('ShelfTitle', graphql_name='subtitle')
    title = sgqlc.types.Field(sgqlc.types.non_null('ShelfTitle'), graphql_name='title')


class ShelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(Shelf), graphql_name='node')


class ShelfTitle(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('context', 'fallback_localized_title', 'key', 'localized_title_tokens')
    context = sgqlc.types.Field('ShelfTitleContext', graphql_name='context')
    fallback_localized_title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='fallbackLocalizedTitle')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    localized_title_tokens = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('TitleTokenEdge')), graphql_name='localizedTitleTokens')


class ShortVideo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'id', 'reactions')
    content = sgqlc.types.Field('ShortVideoContent', graphql_name='content')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    reactions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ShortVideoReaction'))), graphql_name='reactions')


class ShortVideoFeedConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('ShortVideoFeedEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class ShortVideoFeedEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(ShortVideo, graphql_name='node')


class ShortVideoReaction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count', 'emote', 'id')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')
    emote = sgqlc.types.Field(Emote, graphql_name='emote')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class SmartCostsAcknowledgement(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('last_acknowledged_cost', 'reward_type')
    last_acknowledged_cost = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='lastAcknowledgedCost')
    reward_type = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsAutomaticRewardType), graphql_name='rewardType')


class SmiliesSet(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('emotes', 'id')
    emotes = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Emote)), graphql_name='emotes')
    id = sgqlc.types.Field(ID, graphql_name='id')


class SocialMedia(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'name', 'title', 'url')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    name = sgqlc.types.Field(String, graphql_name='name')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class SpendSubscriptionCreditError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(SpendSubscriptionCreditErrorCode), graphql_name='code')


class SpendSubscriptionCreditPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'subscription_benefit', 'user_id')
    error = sgqlc.types.Field(SpendSubscriptionCreditError, graphql_name='error')
    subscription_benefit = sgqlc.types.Field('SubscriptionBenefit', graphql_name='subscriptionBenefit')
    user_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='userID')


class SponsoredCheermoteChannelSettingsConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SponsoredCheermoteChannelSettingsEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class SponsoredCheermoteChannelSettingsEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('SponsoredCheermoteChannelSettingsNode', graphql_name='node')


class SponsoredCheermoteChannelSettingsNode(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('brand_image_url', 'brand_name', 'end_time', 'id', 'is_opted_in', 'start_time', 'thresholds')
    brand_image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='brandImageURL')
    brand_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='brandName')
    end_time = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endTime')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_opted_in = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isOptedIn')
    start_time = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startTime')
    thresholds = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CheermoteCampaignThreshold))), graphql_name='thresholds')


class SquadStream(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'invitations', 'members', 'owner', 'status')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    invitations = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SquadStreamInvitation')), graphql_name='invitations', args=sgqlc.types.ArgDict((
        ('status', sgqlc.types.Arg(sgqlc.types.non_null(SquadStreamInvitationStatus), graphql_name='status', default=None)),
))
    )
    members = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('User')), graphql_name='members')
    owner = sgqlc.types.Field('User', graphql_name='owner')
    status = sgqlc.types.Field(sgqlc.types.non_null(SquadStreamStatus), graphql_name='status')


class SquadStreamInvitation(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('created_at', 'id', 'network_type', 'reason_rejected', 'recipient', 'sender', 'squad_stream', 'status')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    network_type = sgqlc.types.Field(SquadStreamInvitationNetworkType, graphql_name='networkType')
    reason_rejected = sgqlc.types.Field(SquadStreamInvitationRejectedReason, graphql_name='reasonRejected')
    recipient = sgqlc.types.Field('User', graphql_name='recipient')
    sender = sgqlc.types.Field('User', graphql_name='sender')
    squad_stream = sgqlc.types.Field(SquadStream, graphql_name='squadStream')
    status = sgqlc.types.Field(sgqlc.types.non_null(SquadStreamInvitationStatus), graphql_name='status')


class SquadStreamInvitationConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('nodes', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(SquadStreamInvitation)), graphql_name='nodes')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class SquadStreamSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_access_squads', 'incoming_invite_policy')
    can_access_squads = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canAccessSquads')
    incoming_invite_policy = sgqlc.types.Field(SquadStreamIncomingInvitePolicy, graphql_name='incomingInvitePolicy')


class StartAdError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(StartAdErrorCode), graphql_name='code')


class StartAdPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('ad_session', 'error')
    ad_session = sgqlc.types.Field(AdSession, graphql_name='adSession')
    error = sgqlc.types.Field(StartAdError, graphql_name='error')


class StartBountyError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(StartBountyErrorCode), graphql_name='code')


class StartBountyPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'started_bounty', 'user')
    error = sgqlc.types.Field(StartBountyError, graphql_name='error')
    started_bounty = sgqlc.types.Field(Bounty, graphql_name='startedBounty')
    user = sgqlc.types.Field('User', graphql_name='user')


class StartCloudBroadcastError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cause', 'message')
    cause = sgqlc.types.Field(sgqlc.types.non_null(StartCloudBroadcastErrorCause), graphql_name='cause')
    message = sgqlc.types.Field(String, graphql_name='message')


class StartCloudBroadcastPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcast', 'error')
    broadcast = sgqlc.types.Field(CloudBroadcast, graphql_name='broadcast')
    error = sgqlc.types.Field(StartCloudBroadcastError, graphql_name='error')


class StartPayoutOnboardingWorkflowPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('workflow',)
    workflow = sgqlc.types.Field(PayoutOnboardingWorkflow, graphql_name='workflow')


class StartWatchPartyPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'watch_party')
    error = sgqlc.types.Field('WatchPartyError', graphql_name='error')
    watch_party = sgqlc.types.Field('WatchParty', graphql_name='watchParty')


class StopBountyError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(StopBountyErrorCode), graphql_name='code')


class StopBountyPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'stopped_bounty', 'user')
    error = sgqlc.types.Field(StopBountyError, graphql_name='error')
    stopped_bounty = sgqlc.types.Field(Bounty, graphql_name='stoppedBounty')
    user = sgqlc.types.Field('User', graphql_name='user')


class StopCloudBroadcastError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cause', 'message')
    cause = sgqlc.types.Field(sgqlc.types.non_null(StopCloudBroadcastErrorCause), graphql_name='cause')
    message = sgqlc.types.Field(String, graphql_name='message')


class StopCloudBroadcastPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcast', 'error')
    broadcast = sgqlc.types.Field(CloudBroadcast, graphql_name='broadcast')
    error = sgqlc.types.Field(StopCloudBroadcastError, graphql_name='error')


class StopWatchPartyPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'watch_party')
    error = sgqlc.types.Field('WatchPartyError', graphql_name='error')
    watch_party = sgqlc.types.Field('WatchParty', graphql_name='watchParty')


class Stream(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('archive_video', 'average_fps', 'bitrate', 'broadcast_language', 'broadcaster', 'broadcaster_software', 'channel', 'clip_count', 'codec', 'created_at', 'delay_length_seconds', 'directories', 'game', 'height', 'id', 'is_directory_hidden', 'is_encrypted', 'is_mature', 'is_partner', 'is_stream_drops_enabled', 'language', 'last_updated_at', 'max_height', 'platform', 'playback_access_token', 'preview_image_url', 'restriction', 'restriction_options', 'restriction_type', 'self', 'tags', 'title', 'type', 'viewers_count', 'width')
    archive_video = sgqlc.types.Field('Video', graphql_name='archiveVideo')
    average_fps = sgqlc.types.Field(Float, graphql_name='averageFPS')
    bitrate = sgqlc.types.Field(Float, graphql_name='bitrate')
    broadcast_language = sgqlc.types.Field(Language, graphql_name='broadcastLanguage')
    broadcaster = sgqlc.types.Field('User', graphql_name='broadcaster')
    broadcaster_software = sgqlc.types.Field(String, graphql_name='broadcasterSoftware')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    clip_count = sgqlc.types.Field(Int, graphql_name='clipCount')
    codec = sgqlc.types.Field(String, graphql_name='codec')
    created_at = sgqlc.types.Field(Time, graphql_name='createdAt')
    delay_length_seconds = sgqlc.types.Field(Int, graphql_name='delayLengthSeconds')
    directories = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(Directory)), graphql_name='directories')
    game = sgqlc.types.Field('Game', graphql_name='game')
    height = sgqlc.types.Field(Int, graphql_name='height')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_directory_hidden = sgqlc.types.Field(Boolean, graphql_name='isDirectoryHidden')
    is_encrypted = sgqlc.types.Field(Boolean, graphql_name='isEncrypted')
    is_mature = sgqlc.types.Field(Boolean, graphql_name='isMature')
    is_partner = sgqlc.types.Field(Boolean, graphql_name='isPartner')
    is_stream_drops_enabled = sgqlc.types.Field(Boolean, graphql_name='isStreamDropsEnabled')
    language = sgqlc.types.Field(Language, graphql_name='language')
    last_updated_at = sgqlc.types.Field(Time, graphql_name='lastUpdatedAt')
    max_height = sgqlc.types.Field(Int, graphql_name='maxHeight')
    platform = sgqlc.types.Field('Platform', graphql_name='platform')
    playback_access_token = sgqlc.types.Field(PlaybackAccessToken, graphql_name='playbackAccessToken', args=sgqlc.types.ArgDict((
        ('params', sgqlc.types.Arg(sgqlc.types.non_null(PlaybackAccessTokenParams), graphql_name='params', default=None)),
))
    )
    preview_image_url = sgqlc.types.Field(String, graphql_name='previewImageURL', args=sgqlc.types.ArgDict((
        ('height', sgqlc.types.Arg(Int, graphql_name='height', default=None)),
        ('width', sgqlc.types.Arg(Int, graphql_name='width', default=None)),
))
    )
    restriction = sgqlc.types.Field(ResourceRestriction, graphql_name='restriction')
    restriction_options = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ResourceRestrictionOption))), graphql_name='restrictionOptions')
    restriction_type = sgqlc.types.Field(String, graphql_name='restrictionType')
    self = sgqlc.types.Field('StreamSelfConnection', graphql_name='self')
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Tag')), graphql_name='tags')
    title = sgqlc.types.Field(String, graphql_name='title')
    type = sgqlc.types.Field(String, graphql_name='type')
    viewers_count = sgqlc.types.Field(Int, graphql_name='viewersCount')
    width = sgqlc.types.Field(Int, graphql_name='width')


class StreamBitrate(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('recorded_at', 'value_kbps')
    recorded_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='recordedAt')
    value_kbps = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='valueKbps')


class StreamConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'generation_id', 'page_info', 'response_id')
    edges = sgqlc.types.Field(sgqlc.types.list_of('StreamEdge'), graphql_name='edges')
    generation_id = sgqlc.types.Field(ID, graphql_name='generationID')
    page_info = sgqlc.types.Field(PageInfo, graphql_name='pageInfo')
    response_id = sgqlc.types.Field(ID, graphql_name='responseID')


class StreamEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node', 'tracking_id')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    node = sgqlc.types.Field(Stream, graphql_name='node')
    tracking_id = sgqlc.types.Field(ID, graphql_name='trackingID')


class StreamFramerate(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('recorded_at', 'value_fps')
    recorded_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='recordedAt')
    value_fps = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='valueFPS')


class StreamKey(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('expires_at', 'value')
    expires_at = sgqlc.types.Field(Time, graphql_name='expiresAt')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')


class StreamKeyError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'links', 'message')
    code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='code')
    links = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='links')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')


class StreamRecommendationEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node', 'tracking_id')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(Stream, graphql_name='node')
    tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='trackingID')


class StreamSelfConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('can_watch', 'is_restricted', 'restriction_type')
    can_watch = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canWatch')
    is_restricted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRestricted')
    restriction_type = sgqlc.types.Field(String, graphql_name='restrictionType')


class StreamSession(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('archive_video', 'ended_at', 'started_at')
    archive_video = sgqlc.types.Field('Video', graphql_name='archiveVideo')
    ended_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endedAt')
    started_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startedAt')


class StreamSummary(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('archive_videos', 'average_viewers', 'channel_id', 'chatters', 'clips_created', 'ended_at', 'follows', 'go_live_notification', 'live_views', 'max_viewers', 'new_subscriptions', 'started_at', 'unique_chatters', 'unique_viewers')
    archive_videos = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('Video')), graphql_name='archiveVideos')
    average_viewers = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='averageViewers')
    channel_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='channelID')
    chatters = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='chatters')
    clips_created = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='clipsCreated')
    ended_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='endedAt')
    follows = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='follows')
    go_live_notification = sgqlc.types.Field(GoLiveNotification, graphql_name='goLiveNotification')
    live_views = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='liveViews')
    max_viewers = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='maxViewers')
    new_subscriptions = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='newSubscriptions')
    started_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='startedAt')
    unique_chatters = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='uniqueChatters')
    unique_viewers = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='uniqueViewers')


class Stucco(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('description', 'id', 'image_set', 'is_global', 'owner_id', 'state', 'text_code')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_set = sgqlc.types.Field(sgqlc.types.non_null('StuccoImageSet'), graphql_name='imageSet')
    is_global = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isGlobal')
    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='ownerID')
    state = sgqlc.types.Field(sgqlc.types.non_null(StuccoState), graphql_name='state')
    text_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='textCode')


class StuccoImageSet(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('image1x_url', 'image2x_url', 'image4x_url')
    image1x_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='image1xURL')
    image2x_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='image2xURL')
    image4x_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='image4xURL')


class StuccoPack(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'owner_id', 'slots')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    owner_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='ownerID')
    slots = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('StuccoPackSlot')), graphql_name='slots')


class StuccoPackSlot(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('index', 'stucco')
    index = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='index')
    stucco = sgqlc.types.Field(sgqlc.types.non_null(Stucco), graphql_name='stucco')


class SubCountSeries(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('period', 'sub_count_series_data_points', 'total_count')
    period = sgqlc.types.Field(sgqlc.types.non_null(TimeSeriesPeriod), graphql_name='period')
    sub_count_series_data_points = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SubCountSeriesDataPoint'))), graphql_name='subCountSeriesDataPoints')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class SubCountSeriesDataPoint(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('gift_sub_tier_breakdown', 'multi_month_sub_tier_breakdown', 'paid_sub_tier_breakdown', 'time_stamp', 'total_gift_sub_count', 'total_multi_month_sub_count', 'total_paid_sub_count', 'total_prime_sub_count')
    gift_sub_tier_breakdown = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SubCountTierDataPoint'))), graphql_name='giftSubTierBreakdown')
    multi_month_sub_tier_breakdown = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SubCountTierDataPoint'))), graphql_name='multiMonthSubTierBreakdown')
    paid_sub_tier_breakdown = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('SubCountTierDataPoint'))), graphql_name='paidSubTierBreakdown')
    time_stamp = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='timeStamp')
    total_gift_sub_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalGiftSubCount')
    total_multi_month_sub_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalMultiMonthSubCount')
    total_paid_sub_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalPaidSubCount')
    total_prime_sub_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalPrimeSubCount')


class SubCountTierDataPoint(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count', 'tier')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')
    tier = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='tier')


class SubmitCSATFeedbackError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(SubmitCSATFeedbackErrorCode), graphql_name='code')


class SubmitCSATFeedbackPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'response')
    error = sgqlc.types.Field(SubmitCSATFeedbackError, graphql_name='error')
    response = sgqlc.types.Field('SubmitCSATFeedbackResponse', graphql_name='response')


class SubmitCSATFeedbackResponse(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('guid',)
    guid = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='guid')


class SubmitEmotePrefixPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error_code', 'prefix')
    error_code = sgqlc.types.Field(SubmitEmotePrefixResponseCode, graphql_name='errorCode')
    prefix = sgqlc.types.Field(EmoticonPrefix, graphql_name='prefix')


class SubmitEmoticonPrefixPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('response',)
    response = sgqlc.types.Field(sgqlc.types.non_null(EmoticonPrefix), graphql_name='response')


class SubmitExtensionFeedbackPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('comment', 'error')
    comment = sgqlc.types.Field(ExtensionComment, graphql_name='comment')
    error = sgqlc.types.Field(SubmitExtensionFeedbackError, graphql_name='error')


class SubscribedChannelConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SubscribedChannelEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class SubscribedChannelEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field('User', graphql_name='node')


class SubscriberBadgeProgress(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'image1x_url', 'image2x_url', 'image4x_url', 'percent_completed', 'required_tenure_months', 'version')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image1x_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='image1xURL')
    image2x_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='image2xURL')
    image4x_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='image4xURL')
    percent_completed = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='percentCompleted')
    required_tenure_months = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='requiredTenureMonths')
    version = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='version')


class SubscriberCountBreakdown(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count', 'tier')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')
    tier = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='tier')


class SubscriberScore(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('breakdown', 'count', 'count_breakdown', 'current', 'current_emote_limit', 'next', 'next_emote_limit')
    breakdown = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SubscriberScoreBreakdown')), graphql_name='breakdown')
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')
    count_breakdown = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(SubscriberCountBreakdown)), graphql_name='countBreakdown')
    current = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='current')
    current_emote_limit = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='currentEmoteLimit')
    next = sgqlc.types.Field(Int, graphql_name='next')
    next_emote_limit = sgqlc.types.Field(Int, graphql_name='nextEmoteLimit')


class SubscriberScoreBreakdown(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('score', 'tier')
    score = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='score')
    tier = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='tier')


class SubscriptionBenefit(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('ends_at', 'gift', 'id', 'interval_number', 'is_dnrd', 'is_extended', 'is_refundable', 'origin_id', 'paid_upgrade', 'pending_subscription', 'platform', 'product', 'purchased_with_prime', 'renews_at', 'states', 'third_party_sku', 'tier', 'user')
    ends_at = sgqlc.types.Field(Time, graphql_name='endsAt')
    gift = sgqlc.types.Field('SubscriptionGift', graphql_name='gift')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    interval_number = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='intervalNumber')
    is_dnrd = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isDNRd')
    is_extended = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isExtended')
    is_refundable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRefundable')
    origin_id = sgqlc.types.Field(String, graphql_name='originID')
    paid_upgrade = sgqlc.types.Field(PaidUpgrade, graphql_name='paidUpgrade')
    pending_subscription = sgqlc.types.Field(PendingSubscription, graphql_name='pendingSubscription')
    platform = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionPlatform), graphql_name='platform')
    product = sgqlc.types.Field('SubscriptionProduct', graphql_name='product')
    purchased_with_prime = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='purchasedWithPrime')
    renews_at = sgqlc.types.Field(Time, graphql_name='renewsAt')
    states = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SubscriptionBenefitStateHistory')), graphql_name='states')
    third_party_sku = sgqlc.types.Field(String, graphql_name='thirdPartySKU')
    tier = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='tier')
    user = sgqlc.types.Field('User', graphql_name='user')


class SubscriptionBenefitConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SubscriptionBenefitEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class SubscriptionBenefitEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(SubscriptionBenefit, graphql_name='node')


class SubscriptionBenefitStateHistory(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('created_at', 'state')
    created_at = sgqlc.types.Field(Time, graphql_name='createdAt')
    state = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionBenefitState), graphql_name='state')


class SubscriptionCheckoutConfigs(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('actions', 'can_gift', 'can_purchase', 'is_one_month_free_eligible', 'payment_provider_configs', 'purchase_ineligibility_reason')
    actions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(CheckoutAction))), graphql_name='actions')
    can_gift = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canGift')
    can_purchase = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canPurchase')
    is_one_month_free_eligible = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isOneMonthFreeEligible')
    payment_provider_configs = sgqlc.types.Field(sgqlc.types.non_null(PaymentProviderConfigs), graphql_name='paymentProviderConfigs')
    purchase_ineligibility_reason = sgqlc.types.Field(sgqlc.types.non_null(PurchaseIneligibilityReason), graphql_name='purchaseIneligibilityReason')


class SubscriptionCommunityGifting(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('assets', 'offer', 'quantity', 'type')
    assets = sgqlc.types.Field(sgqlc.types.non_null('SubscriptionCommunityGiftingAssets'), graphql_name='assets')
    offer = sgqlc.types.Field(Offer, graphql_name='offer')
    quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='quantity')
    type = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionCommunityGiftingType), graphql_name='type')


class SubscriptionCommunityGiftingAssets(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('image_url1x', 'image_url2x', 'image_url3x', 'image_url4x')
    image_url1x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL1x')
    image_url2x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL2x')
    image_url3x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL3x')
    image_url4x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL4x')


class SubscriptionGift(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('gift_date', 'gifter', 'is_gift')
    gift_date = sgqlc.types.Field(Time, graphql_name='giftDate')
    gifter = sgqlc.types.Field('User', graphql_name='gifter')
    is_gift = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isGift')


class SubscriptionGiftOffer(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'price_info', 'promotion', 'quantity', 'third_party_sku', 'type')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    price_info = sgqlc.types.Field(sgqlc.types.non_null(PriceInfo), graphql_name='priceInfo', args=sgqlc.types.ArgDict((
        ('tax_country', sgqlc.types.Arg(String, graphql_name='taxCountry', default=None)),
))
    )
    promotion = sgqlc.types.Field('SubscriptionGiftPromotion', graphql_name='promotion')
    quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='quantity')
    third_party_sku = sgqlc.types.Field(String, graphql_name='thirdPartySKU')
    type = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionGiftType), graphql_name='type')


class SubscriptionGiftPromotion(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('discount_type', 'discount_value', 'id', 'price_info', 'quantity', 'third_party_sku')
    discount_type = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionPromotionDiscountType), graphql_name='discountType')
    discount_value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='discountValue')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    price_info = sgqlc.types.Field(sgqlc.types.non_null(PriceInfo), graphql_name='priceInfo', args=sgqlc.types.ArgDict((
        ('tax_country', sgqlc.types.Arg(String, graphql_name='taxCountry', default=None)),
))
    )
    quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='quantity')
    third_party_sku = sgqlc.types.Field(String, graphql_name='thirdPartySKU')


class SubscriptionGifting(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('community', 'standard')
    community = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(SubscriptionCommunityGifting)), graphql_name='community')
    standard = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SubscriptionStandardGifting')), graphql_name='standard', args=sgqlc.types.ArgDict((
        ('recipient_id', sgqlc.types.Arg(ID, graphql_name='recipientID', default=None)),
        ('recipient_login', sgqlc.types.Arg(String, graphql_name='recipientLogin', default=None)),
))
    )


class SubscriptionInterval(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('duration', 'unit')
    duration = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='duration')
    unit = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionIntervalUnit), graphql_name='unit')


class SubscriptionOffer(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('currency', 'exponent', 'id', 'price', 'promo_description')
    currency = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='currency')
    exponent = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='exponent')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    price = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='price')
    promo_description = sgqlc.types.Field(String, graphql_name='promoDescription')


class SubscriptionProduct(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('display_name', 'emote_limit', 'emote_modifiers', 'emote_set_id', 'emotes', 'gift_offers', 'gift_promotion', 'gifting', 'has_ad_free', 'has_fast_chat', 'has_sub_only_chat', 'has_subonly_video_archive', 'id', 'interval', 'name', 'offers', 'owner', 'price', 'price_info', 'promotion', 'revenue_config', 'self', 'state', 'third_party_template_sku', 'tier', 'type', 'url')
    display_name = sgqlc.types.Field(String, graphql_name='displayName')
    emote_limit = sgqlc.types.Field(Int, graphql_name='emoteLimit')
    emote_modifiers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(EmoteModifier)), graphql_name='emoteModifiers')
    emote_set_id = sgqlc.types.Field(ID, graphql_name='emoteSetID')
    emotes = sgqlc.types.Field(sgqlc.types.list_of(Emote), graphql_name='emotes', args=sgqlc.types.ArgDict((
        ('state', sgqlc.types.Arg(EmoteStateFilter, graphql_name='state', default='ACTIVE')),
))
    )
    gift_offers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(SubscriptionGiftOffer)), graphql_name='giftOffers', args=sgqlc.types.ArgDict((
        ('platform', sgqlc.types.Arg(SubscriptionGiftOfferPlatform, graphql_name='platform', default=None)),
        ('type', sgqlc.types.Arg(sgqlc.types.non_null(SubscriptionGiftType), graphql_name='type', default=None)),
))
    )
    gift_promotion = sgqlc.types.Field('SubscriptionPromotion', graphql_name='giftPromotion')
    gifting = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionGifting), graphql_name='gifting')
    has_ad_free = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasAdFree')
    has_fast_chat = sgqlc.types.Field(Boolean, graphql_name='hasFastChat')
    has_sub_only_chat = sgqlc.types.Field(Boolean, graphql_name='hasSubOnlyChat')
    has_subonly_video_archive = sgqlc.types.Field(Boolean, graphql_name='hasSubonlyVideoArchive')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    interval = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionInterval), graphql_name='interval')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    offers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Offer)), graphql_name='offers')
    owner = sgqlc.types.Field('User', graphql_name='owner')
    price = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='price')
    price_info = sgqlc.types.Field(sgqlc.types.non_null(PriceInfo), graphql_name='priceInfo', args=sgqlc.types.ArgDict((
        ('tax_country', sgqlc.types.Arg(String, graphql_name='taxCountry', default=None)),
))
    )
    promotion = sgqlc.types.Field('SubscriptionPromotion', graphql_name='promotion')
    revenue_config = sgqlc.types.Field(RevenueConfig, graphql_name='revenueConfig')
    self = sgqlc.types.Field('SubscriptionProductSelfConnection', graphql_name='self')
    state = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionState), graphql_name='state')
    third_party_template_sku = sgqlc.types.Field(String, graphql_name='thirdPartyTemplateSKU', args=sgqlc.types.ArgDict((
        ('platform', sgqlc.types.Arg(String, graphql_name='platform', default=None)),
))
    )
    tier = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='tier')
    type = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionProductType), graphql_name='type')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class SubscriptionProductSelfConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('benefit', 'can_gift_in_channel', 'can_gift_to', 'can_gift_to_login', 'checkout_configuration', 'discount_type', 'discount_value', 'gift_offers', 'is_eligible_for_discount', 'new_price', 'old_price', 'paid_upgrade_promotion', 'product_purchase', 'promotion', 'purchase', 'subscription_tenure', 'third_party_purchase_sku')
    benefit = sgqlc.types.Field(SubscriptionBenefit, graphql_name='benefit')
    can_gift_in_channel = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canGiftInChannel')
    can_gift_to = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canGiftTo', args=sgqlc.types.ArgDict((
        ('recipient_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='recipientID', default=None)),
))
    )
    can_gift_to_login = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canGiftToLogin', args=sgqlc.types.ArgDict((
        ('recipient_login', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='recipientLogin', default=None)),
))
    )
    checkout_configuration = sgqlc.types.Field(SubscriptionCheckoutConfigs, graphql_name='checkoutConfiguration', args=sgqlc.types.ArgDict((
        ('config', sgqlc.types.Arg(sgqlc.types.non_null(CheckoutConfigurationInput), graphql_name='config', default=None)),
))
    )
    discount_type = sgqlc.types.Field(sgqlc.types.non_null(DiscountType), graphql_name='discountType')
    discount_value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='discountValue')
    gift_offers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(SubscriptionGiftOffer)), graphql_name='giftOffers', args=sgqlc.types.ArgDict((
        ('platform', sgqlc.types.Arg(SubscriptionGiftOfferPlatform, graphql_name='platform', default=None)),
        ('type', sgqlc.types.Arg(sgqlc.types.non_null(SubscriptionGiftType), graphql_name='type', default=None)),
))
    )
    is_eligible_for_discount = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEligibleForDiscount')
    new_price = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='newPrice')
    old_price = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='oldPrice')
    paid_upgrade_promotion = sgqlc.types.Field('SubscriptionPromotion', graphql_name='paidUpgradePromotion')
    product_purchase = sgqlc.types.Field(ProductPurchase, graphql_name='productPurchase', args=sgqlc.types.ArgDict((
        ('quantity', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='quantity', default=None)),
        ('payment_provider', sgqlc.types.Arg(sgqlc.types.non_null(PaymentProvider), graphql_name='paymentProvider', default=None)),
))
    )
    promotion = sgqlc.types.Field('SubscriptionPromotion', graphql_name='promotion')
    purchase = sgqlc.types.Field('SubscriptionPurchase', graphql_name='purchase')
    subscription_tenure = sgqlc.types.Field('SubscriptionTenure', graphql_name='subscriptionTenure', args=sgqlc.types.ArgDict((
        ('tenure_method', sgqlc.types.Arg(sgqlc.types.non_null(SubscriptionTenureMethod), graphql_name='tenureMethod', default=None)),
))
    )
    third_party_purchase_sku = sgqlc.types.Field(String, graphql_name='thirdPartyPurchaseSKU', args=sgqlc.types.ArgDict((
        ('platform', sgqlc.types.Arg(String, graphql_name='platform', default=None)),
))
    )


class SubscriptionProductsConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('nodes',)
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(SubscriptionProduct))), graphql_name='nodes')


class SubscriptionProductsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionProductsErrorCode), graphql_name='code')


class SubscriptionPromotion(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('checkout_price', 'discount_type', 'discount_value', 'new_price', 'old_price', 'preview_price')
    checkout_price = sgqlc.types.Field(ProductPurchase, graphql_name='checkoutPrice', args=sgqlc.types.ArgDict((
        ('quantity', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='quantity', default=None)),
        ('payment_provider', sgqlc.types.Arg(sgqlc.types.non_null(PaymentProvider), graphql_name='paymentProvider', default=None)),
))
    )
    discount_type = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionPromotionDiscountType), graphql_name='discountType')
    discount_value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='discountValue')
    new_price = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='newPrice')
    old_price = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='oldPrice')
    preview_price = sgqlc.types.Field(sgqlc.types.non_null(PriceInfo), graphql_name='previewPrice')


class SubscriptionPurchase(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('compatible_purchases', 'details')
    compatible_purchases = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('SubscriptionPurchaseDetails')), graphql_name='compatiblePurchases')
    details = sgqlc.types.Field('SubscriptionPurchaseDetails', graphql_name='details')


class SubscriptionPurchaseDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cancelled_at', 'currency', 'divisor', 'payment_provider', 'price', 'product_tier', 'product_type', 'state')
    cancelled_at = sgqlc.types.Field(Time, graphql_name='cancelledAt')
    currency = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='currency')
    divisor = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='divisor')
    payment_provider = sgqlc.types.Field(sgqlc.types.non_null(PaymentProvider), graphql_name='paymentProvider')
    price = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='price')
    product_tier = sgqlc.types.Field(String, graphql_name='productTier')
    product_type = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionProductType), graphql_name='productType')
    state = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionPurchaseState), graphql_name='state')


class SubscriptionStandardGifting(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('offer',)
    offer = sgqlc.types.Field(Offer, graphql_name='offer')


class SubscriptionSummary(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('emotes', 'id', 'modifiers', 'name', 'offers', 'self', 'tier', 'url')
    emotes = sgqlc.types.Field(sgqlc.types.list_of(Emote), graphql_name='emotes')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    modifiers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(EmoteModifier)), graphql_name='modifiers')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    offers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(SubscriptionOffer)), graphql_name='offers')
    self = sgqlc.types.Field(sgqlc.types.non_null('SubscriptionSummarySelf'), graphql_name='self')
    tier = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionSummaryTier), graphql_name='tier')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class SubscriptionSummarySelf(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cumulative_tenure', 'subscribed_tier')
    cumulative_tenure = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cumulativeTenure')
    subscribed_tier = sgqlc.types.Field(SubscriptionSummaryTier, graphql_name='subscribedTier')


class SubscriptionTenure(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('days_remaining', 'elapsed_days', 'end', 'method', 'months', 'start')
    days_remaining = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='daysRemaining')
    elapsed_days = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='elapsedDays')
    end = sgqlc.types.Field(Time, graphql_name='end')
    method = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionTenureMethod), graphql_name='method')
    months = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='months')
    start = sgqlc.types.Field(Time, graphql_name='start')


class SubscriptionToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('balance',)
    balance = sgqlc.types.Field(Int, graphql_name='balance')


class SubscriptionTokenBundleProduct(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('assets', 'id', 'offers', 'quantity')
    assets = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TokenBundleAsset')), graphql_name='assets')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    offers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Offer)), graphql_name='offers')
    quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='quantity')


class SubscriptionTokenProductConfig(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('max_balance',)
    max_balance = sgqlc.types.Field(Int, graphql_name='maxBalance')


class SwapCompetitionLobbyParticipantsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field(Competition, graphql_name='competition')
    error = sgqlc.types.Field(CompetitionError, graphql_name='error')


class SyncGameOnDropCampaignPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_campaign', 'error')
    drop_campaign = sgqlc.types.Field(DropCampaign, graphql_name='dropCampaign')
    error = sgqlc.types.Field(DropsError, graphql_name='error')


class Tag(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('created_at', 'id', 'is_automated', 'is_language_tag', 'localized_description', 'localized_name', 'scope', 'tag_name')
    created_at = sgqlc.types.Field(Time, graphql_name='createdAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_automated = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAutomated')
    is_language_tag = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isLanguageTag')
    localized_description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='localizedDescription')
    localized_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='localizedName')
    scope = sgqlc.types.Field(sgqlc.types.non_null(TagScope), graphql_name='scope')
    tag_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='tagName')


class TagAnalytic(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('percentage', 'tag')
    percentage = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='percentage')
    tag = sgqlc.types.Field(sgqlc.types.non_null(Tag), graphql_name='tag')


class TagConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TagEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class TagEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(Tag, graphql_name='node')


class TargetedModActionDetails(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('banned_at', 'duration_seconds', 'expires_at', 'reason')
    banned_at = sgqlc.types.Field(Time, graphql_name='bannedAt')
    duration_seconds = sgqlc.types.Field(Int, graphql_name='durationSeconds')
    expires_at = sgqlc.types.Field(Time, graphql_name='expiresAt')
    reason = sgqlc.types.Field(String, graphql_name='reason')


class TaxInterview(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('account_id', 'client_id', 'government_alias', 'locale', 'options', 'signature', 'type', 'url')
    account_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='accountID')
    client_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='clientID')
    government_alias = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='governmentAlias')
    locale = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='locale')
    options = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TaxInterviewOption')), graphql_name='options')
    signature = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='signature')
    type = sgqlc.types.Field(sgqlc.types.non_null(TaxInterviewType), graphql_name='type')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class TaxInterviewOption(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('key', 'value')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    value = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='value')


class TaxRegion(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('country_code', 'state', 'zip_code')
    country_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='countryCode')
    state = sgqlc.types.Field(String, graphql_name='state')
    zip_code = sgqlc.types.Field(String, graphql_name='zipCode')


class Team(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('background_image_id', 'background_image_url', 'banner_id', 'banner_url', 'creator_timeseries_metrics', 'description', 'display_name', 'id', 'live_featured_channels', 'live_members', 'logo_id', 'logo_url', 'members', 'name', 'owner', 'video_play_referrals')
    background_image_id = sgqlc.types.Field(ID, graphql_name='backgroundImageID')
    background_image_url = sgqlc.types.Field(String, graphql_name='backgroundImageURL')
    banner_id = sgqlc.types.Field(ID, graphql_name='bannerID')
    banner_url = sgqlc.types.Field(String, graphql_name='bannerURL')
    creator_timeseries_metrics = sgqlc.types.Field(CreatorTimeseriesMetrics, graphql_name='creatorTimeseriesMetrics', args=sgqlc.types.ArgDict((
        ('start_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='startAt', default=None)),
        ('end_at', sgqlc.types.Arg(Time, graphql_name='endAt', default=None)),
        ('time_zone', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='timeZone', default=None)),
        ('granularity', sgqlc.types.Arg(Granularity, graphql_name='granularity', default='FIVE_MINUTE')),
        ('channel_ids', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='channelIDs', default=[])),
))
    )
    description = sgqlc.types.Field(String, graphql_name='description')
    display_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='displayName')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    live_featured_channels = sgqlc.types.Field('UserConnection', graphql_name='liveFeaturedChannels', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    live_members = sgqlc.types.Field('UserConnection', graphql_name='liveMembers', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    logo_id = sgqlc.types.Field(ID, graphql_name='logoID')
    logo_url = sgqlc.types.Field(String, graphql_name='logoURL')
    members = sgqlc.types.Field('UserConnection', graphql_name='members', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('metrics_revealed_filter', sgqlc.types.Arg(MemberMetricsRevealedParams, graphql_name='metricsRevealedFilter', default='NONE')),
))
    )
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    owner = sgqlc.types.Field('User', graphql_name='owner')
    video_play_referrals = sgqlc.types.Field('VideoPlayReferrals', graphql_name='videoPlayReferrals', args=sgqlc.types.ArgDict((
        ('start', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='start', default=None)),
        ('end', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='end', default=None)),
        ('filter', sgqlc.types.Arg(ReferralsFilter, graphql_name='filter', default='ALL')),
        ('dimension', sgqlc.types.Arg(sgqlc.types.non_null(ReferralsDimension), graphql_name='dimension', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('channel_ids', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='channelIDs', default=[])),
))
    )


class TerminatePollInChannelPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('poll',)
    poll = sgqlc.types.Field(Poll, graphql_name='poll')


class TerminatePollPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('poll',)
    poll = sgqlc.types.Field(Poll, graphql_name='poll')


class TextToken(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('has_emphasis', 'location', 'text')
    has_emphasis = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasEmphasis')
    location = sgqlc.types.Field(sgqlc.types.non_null(LinkType), graphql_name='location')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class ThumbnailOEmbed(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('height', 'url', 'width')
    height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='height')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    width = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='width')


class TimeBasedDropSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('current_minutes_watched', 'drop_instance_id', 'has_preconditions_met', 'is_claimed')
    current_minutes_watched = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='currentMinutesWatched')
    drop_instance_id = sgqlc.types.Field(ID, graphql_name='dropInstanceID')
    has_preconditions_met = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasPreconditionsMet')
    is_claimed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isClaimed')


class TimeseriesItem(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('follows', 'minutes_streamed', 'timestamp', 'value')
    follows = sgqlc.types.Field(Int, graphql_name='follows')
    minutes_streamed = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='minutesStreamed')
    timestamp = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='timestamp')
    value = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='value')


class TimeseriesStats(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('ad_breaks_in_seconds', 'ad_time_per_hour', 'average_viewers', 'chat_messages', 'clip_views', 'clips_created', 'follows', 'granularity', 'host_raid_viewers', 'items', 'live_views', 'max_viewers', 'minutes_watched', 'new_subscriptions', 'new_viewer_percentage', 'promotion_click', 'promotion_display', 'time_streamed', 'unique_chatters', 'unique_viewers')
    ad_breaks_in_seconds = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='adBreaksInSeconds')
    ad_time_per_hour = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='adTimePerHour')
    average_viewers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='averageViewers')
    chat_messages = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='chatMessages')
    clip_views = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='clipViews')
    clips_created = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='clipsCreated')
    follows = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='follows')
    granularity = sgqlc.types.Field(sgqlc.types.non_null(Granularity), graphql_name='granularity')
    host_raid_viewers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='hostRaidViewers')
    items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='items')
    live_views = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='liveViews')
    max_viewers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='maxViewers')
    minutes_watched = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='minutesWatched')
    new_subscriptions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='newSubscriptions')
    new_viewer_percentage = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='newViewerPercentage')
    promotion_click = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='promotionClick')
    promotion_display = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='promotionDisplay')
    time_streamed = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='timeStreamed')
    unique_chatters = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='uniqueChatters')
    unique_viewers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TimeseriesItem)), graphql_name='uniqueViewers')


class TitleTokenEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('node',)
    node = sgqlc.types.Field('TitleTokenNode', graphql_name='node')


class ToggleRitualsEnabledPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_enabled', 'user')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    user = sgqlc.types.Field('User', graphql_name='user')


class TokenBundleAsset(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('image_url1x', 'image_url2x', 'image_url3x', 'key')
    image_url1x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL1x')
    image_url2x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL2x')
    image_url3x = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL3x')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')


class Tournament(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('global_leaderboard', 'id', 'progress', 'rewards', 'self', 'team_leaderboard', 'teams')
    global_leaderboard = sgqlc.types.Field(sgqlc.types.non_null(BitsLeaderboard), graphql_name='globalLeaderboard')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    progress = sgqlc.types.Field(sgqlc.types.non_null('TournamentProgress'), graphql_name='progress')
    rewards = sgqlc.types.Field('TournamentRewards', graphql_name='rewards')
    self = sgqlc.types.Field('TournamentSelfEdge', graphql_name='self')
    team_leaderboard = sgqlc.types.Field(sgqlc.types.non_null(BitsLeaderboard), graphql_name='teamLeaderboard')
    teams = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('TournamentTeam')), graphql_name='teams')


class TournamentInsiderRewards(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('badges', 'bits', 'hero_skins', 'in_game_content')
    badges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('TournamentReward'))), graphql_name='badges')
    bits = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('TournamentReward'))), graphql_name='bits')
    hero_skins = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('TournamentReward'))), graphql_name='heroSkins')
    in_game_content = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('TournamentReward'))), graphql_name='inGameContent')


class TournamentProgress(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('amount', 'milestones')
    amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='amount')
    milestones = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(Milestone))), graphql_name='milestones')


class TournamentReward(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('campaign_id', 'can_be_fulfilled', 'can_be_fulfilled_quantity', 'description', 'entitled_quantity', 'id', 'image_url', 'is_entitled', 'is_prime_only', 'is_repeatable', 'metadata', 'name', 'quantity', 'rarity', 'type')
    campaign_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='campaignID')
    can_be_fulfilled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canBeFulfilled')
    can_be_fulfilled_quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='canBeFulfilledQuantity')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    entitled_quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='entitledQuantity')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    is_entitled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEntitled')
    is_prime_only = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPrimeOnly')
    is_repeatable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRepeatable')
    metadata = sgqlc.types.Field(CampaignRewardMetadata, graphql_name='metadata')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='quantity')
    rarity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='rarity')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')


class TournamentRewards(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cheerbomb', 'global_', 'individual', 'insider', 'team')
    cheerbomb = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(TournamentReward))), graphql_name='cheerbomb')
    global_ = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(TournamentReward))), graphql_name='global')
    individual = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(TournamentReward))), graphql_name='individual')
    insider = sgqlc.types.Field(sgqlc.types.non_null(TournamentInsiderRewards), graphql_name='insider')
    team = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(TournamentReward))), graphql_name='team')


class TournamentSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('global_leaderboard_item', 'progress', 'teams')
    global_leaderboard_item = sgqlc.types.Field(BitsLeaderboardItem, graphql_name='globalLeaderboardItem')
    progress = sgqlc.types.Field(sgqlc.types.non_null(TournamentProgress), graphql_name='progress')
    teams = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('TournamentTeam'))), graphql_name='teams')


class TournamentTeam(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('division', 'id', 'logo_url', 'name')
    division = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='division')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    logo_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='logoURL')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')


class TrackingInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('reason_target', 'reason_target_type', 'reason_type', 'row_name')
    reason_target = sgqlc.types.Field(String, graphql_name='reasonTarget')
    reason_target_type = sgqlc.types.Field(String, graphql_name='reasonTargetType')
    reason_type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='reasonType')
    row_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='rowName')


class TrackingPixel(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('origin', 'service', 'time_offset_seconds', 'type', 'url')
    origin = sgqlc.types.Field(String, graphql_name='origin')
    service = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='service')
    time_offset_seconds = sgqlc.types.Field(Int, graphql_name='timeOffsetSeconds')
    type = sgqlc.types.Field(TrackingPixelType, graphql_name='type')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class Trailer(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('video',)
    video = sgqlc.types.Field('Video', graphql_name='video')


class TranscodeSession(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('audio_codecs', 'host', 'ingest_origin', 'profile', 'video_codecs')
    audio_codecs = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='audioCodecs')
    host = sgqlc.types.Field(String, graphql_name='host')
    ingest_origin = sgqlc.types.Field(String, graphql_name='ingestOrigin')
    profile = sgqlc.types.Field(String, graphql_name='profile')
    video_codecs = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='videoCodecs')


class TransitionExtensionStatePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'manifest')
    error = sgqlc.types.Field(TransitionExtensionStateError, graphql_name='error')
    manifest = sgqlc.types.Field(ExtensionManifest, graphql_name='manifest')


class TriggerResult(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'drop_instance_id', 'status')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    drop_instance_id = sgqlc.types.Field(ID, graphql_name='dropInstanceID')
    status = sgqlc.types.Field(sgqlc.types.non_null(ManuallyTriggerDropResultStatus), graphql_name='status')


class UnacknowledgedSubscriptionEvent(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'end_date', 'external_product_id', 'status', 'subscription_id')
    channel = sgqlc.types.Field('User', graphql_name='channel')
    end_date = sgqlc.types.Field(Time, graphql_name='endDate')
    external_product_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='externalProductID')
    status = sgqlc.types.Field(sgqlc.types.non_null(UnacknowledgedSubscriptionEventState), graphql_name='status')
    subscription_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='subscriptionID')


class UnbanRequest(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'created_at', 'id', 'requester', 'requester_message', 'resolved_at', 'resolved_by', 'resolver_message', 'status')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    requester = sgqlc.types.Field('User', graphql_name='requester')
    requester_message = sgqlc.types.Field(String, graphql_name='requesterMessage')
    resolved_at = sgqlc.types.Field(Time, graphql_name='resolvedAt')
    resolved_by = sgqlc.types.Field('User', graphql_name='resolvedBy')
    resolver_message = sgqlc.types.Field(String, graphql_name='resolverMessage')
    status = sgqlc.types.Field(sgqlc.types.non_null(UnbanRequestStatus), graphql_name='status')


class UnbanRequestConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UnbanRequestEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(Float, graphql_name='totalCount', args=sgqlc.types.ArgDict((
        ('status', sgqlc.types.Arg(UnbanRequestStatus, graphql_name='status', default='NONE')),
))
    )


class UnbanRequestEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(UnbanRequest, graphql_name='node')


class UnbanRequestError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UnbanRequestErrorCode), graphql_name='code')


class UnbanRequestsSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cooldown_minutes', 'is_enabled')
    cooldown_minutes = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='cooldownMinutes')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')


class UnbanUserFromChatRoomError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UnbanUserFromChatRoomErrorCode), graphql_name='code')


class UnbanUserFromChatRoomPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('ban', 'error')
    ban = sgqlc.types.Field(ChatRoomBanStatus, graphql_name='ban')
    error = sgqlc.types.Field(UnbanUserFromChatRoomError, graphql_name='error')


class UnblockUserPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('target_user',)
    target_user = sgqlc.types.Field(sgqlc.types.non_null('User'), graphql_name='targetUser')


class UndoRecommendationFeedbackPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('feedback_id',)
    feedback_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='feedbackID')


class UnfollowGamePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('follow', 'game')
    follow = sgqlc.types.Field(GameFollow, graphql_name='follow')
    game = sgqlc.types.Field('Game', graphql_name='game')


class UnfollowUserPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('follow',)
    follow = sgqlc.types.Field(Follow, graphql_name='follow')


class UnfriendUserPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UnhostPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel',)
    channel = sgqlc.types.Field('User', graphql_name='channel')


class UninstallExtensionError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UninstallExtensionErrorCode), graphql_name='code')


class UninstallExtensionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'id')
    error = sgqlc.types.Field(UninstallExtensionError, graphql_name='error')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class UnlinkAmazonConnectionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_success',)
    is_success = sgqlc.types.Field(Boolean, graphql_name='isSuccess')


class UnlinkRiotConnectionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('connections',)
    connections = sgqlc.types.Field(AccountConnectionSet, graphql_name='connections')


class UnlinkSSOPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('links',)
    links = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(SSOLink)), graphql_name='links')


class UnlockChosenModifiedSubscriberEmotePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('balance', 'error')
    balance = sgqlc.types.Field(Int, graphql_name='balance')
    error = sgqlc.types.Field(CommunityPointsUnlockEmoteError, graphql_name='error')


class UnlockChosenSubscriberEmotePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('balance', 'error')
    balance = sgqlc.types.Field(Int, graphql_name='balance')
    error = sgqlc.types.Field(CommunityPointsUnlockEmoteError, graphql_name='error')


class UnlockRandomSubscriberEmotePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('balance', 'emote', 'error')
    balance = sgqlc.types.Field(Int, graphql_name='balance')
    emote = sgqlc.types.Field(CommunityPointsEmote, graphql_name='emote')
    error = sgqlc.types.Field(CommunityPointsUnlockEmoteError, graphql_name='error')


class UnmodUserError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UnmodUserErrorCode), graphql_name='code')


class UnmodUserPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error', 'target')
    channel = sgqlc.types.Field('User', graphql_name='channel')
    error = sgqlc.types.Field(UnmodUserError, graphql_name='error')
    target = sgqlc.types.Field('User', graphql_name='target')


class UnsetHypeTrainConfigPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('config',)
    config = sgqlc.types.Field(HypeTrainConfig, graphql_name='config')


class UnsubscribeEmailPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_success',)
    is_success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSuccess')


class UpdateAdPropertiesPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('target_user',)
    target_user = sgqlc.types.Field('User', graphql_name='targetUser')


class UpdateAllWhisperThreadsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('count',)
    count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='count')


class UpdateAutoModLevelsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('auto_mod_levels',)
    auto_mod_levels = sgqlc.types.Field(AutoModLevels, graphql_name='autoModLevels')


class UpdateAutoModPropertiesPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('auto_mod_properties',)
    auto_mod_properties = sgqlc.types.Field(AutoModProperties, graphql_name='autoModProperties')


class UpdateAutohostSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateBitsBadgeTierNotificationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateBitsBadgeTiersError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateBitsBadgeTiersErrorCode), graphql_name='code')


class UpdateBitsBadgeTiersPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_upload_badge_tier_emoticons', 'error', 'tiers')
    can_upload_badge_tier_emoticons = sgqlc.types.Field(Boolean, graphql_name='canUploadBadgeTierEmoticons')
    error = sgqlc.types.Field(UpdateBitsBadgeTiersError, graphql_name='error')
    tiers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BitsBadgeTier)), graphql_name='tiers')


class UpdateBoostSettingsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateBoostSettingsErrorCode), graphql_name='code')


class UpdateBoostSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    error = sgqlc.types.Field(UpdateBoostSettingsError, graphql_name='error')


class UpdateBroadcastSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcast_settings', 'error')
    broadcast_settings = sgqlc.types.Field(BroadcastSettings, graphql_name='broadcastSettings')
    error = sgqlc.types.Field(UpdateBroadcastSettingsErrorCode, graphql_name='error')


class UpdateCelebrationConfigPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('celebration_config', 'error')
    celebration_config = sgqlc.types.Field(CelebrationConfig, graphql_name='celebrationConfig')
    error = sgqlc.types.Field(CelebrationError, graphql_name='error')


class UpdateCelebrationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('celebration', 'error')
    celebration = sgqlc.types.Field(Celebration, graphql_name='celebration')
    error = sgqlc.types.Field(CelebrationError, graphql_name='error')


class UpdateCelebrationProductConfigPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('celebration_products', 'error')
    celebration_products = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('CelebrationProduct')), graphql_name='celebrationProducts')
    error = sgqlc.types.Field(CelebrationError, graphql_name='error')


class UpdateCelebrationUserSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('current_user',)
    current_user = sgqlc.types.Field('User', graphql_name='currentUser')


class UpdateChangelogReadTimePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateChanletContentAttributesPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('chanlet',)
    chanlet = sgqlc.types.Field(Channel, graphql_name='chanlet')


class UpdateChannelClipsSettingPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel',)
    channel = sgqlc.types.Field(Channel, graphql_name='channel')


class UpdateChannelHomePreferencesPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    error = sgqlc.types.Field(UpdateChannelCategoryShelfError, graphql_name='error')


class UpdateChannelPredictionSettingsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateChannelPredictionSettingsErrorCode), graphql_name='code')


class UpdateChannelPredictionSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'settings')
    error = sgqlc.types.Field(UpdateChannelPredictionSettingsError, graphql_name='error')
    settings = sgqlc.types.Field(ChannelPredictionSettings, graphql_name='settings')


class UpdateChatColorPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateChatSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('chat_settings',)
    chat_settings = sgqlc.types.Field(ChatSettings, graphql_name='chatSettings')


class UpdateCheerPartnerSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cheer',)
    cheer = sgqlc.types.Field(sgqlc.types.non_null(CheerPartnerSettings), graphql_name='cheer')


class UpdateCheermoteTierError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateCheermoteTierErrorCode), graphql_name='code')


class UpdateCheermoteTierPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(UpdateCheermoteTierError, graphql_name='error')


class UpdateClipError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('message',)
    message = sgqlc.types.Field(String, graphql_name='message')


class UpdateClipPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('clip', 'error')
    clip = sgqlc.types.Field(sgqlc.types.non_null(Clip), graphql_name='clip')
    error = sgqlc.types.Field(UpdateClipError, graphql_name='error')


class UpdateClipViewCountPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('clip',)
    clip = sgqlc.types.Field(Clip, graphql_name='clip')


class UpdateCollectionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('collection',)
    collection = sgqlc.types.Field(sgqlc.types.non_null(Collection), graphql_name='collection')


class UpdateCommunityPointsAutomaticRewardError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'minimum_cost')
    code = sgqlc.types.Field(UpdateCommunityPointsAutomaticRewardErrorCode, graphql_name='code')
    minimum_cost = sgqlc.types.Field(Int, graphql_name='minimumCost')


class UpdateCommunityPointsAutomaticRewardPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'reward')
    error = sgqlc.types.Field(UpdateCommunityPointsAutomaticRewardError, graphql_name='error')
    reward = sgqlc.types.Field(CommunityPointsAutomaticReward, graphql_name='reward')


class UpdateCommunityPointsChannelSettingsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(UpdateCommunityPointsChannelSettingsErrorCode, graphql_name='code')


class UpdateCommunityPointsChannelSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    error = sgqlc.types.Field(UpdateCommunityPointsChannelSettingsError, graphql_name='error')


class UpdateCommunityPointsCommunityGoalError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateCommunityPointsCommunityGoalErrorCode), graphql_name='code')


class UpdateCommunityPointsCommunityGoalPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'goal')
    error = sgqlc.types.Field(UpdateCommunityPointsCommunityGoalError, graphql_name='error')
    goal = sgqlc.types.Field(CommunityPointsCommunityGoal, graphql_name='goal')


class UpdateCommunityPointsCustomRewardError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateCommunityPointsCustomRewardErrorCode), graphql_name='code')


class UpdateCommunityPointsCustomRewardPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'reward')
    error = sgqlc.types.Field(UpdateCommunityPointsCustomRewardError, graphql_name='error')
    reward = sgqlc.types.Field(CommunityPointsCustomReward, graphql_name='reward')


class UpdateCommunityPointsCustomRewardRedemptionStatusError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(UpdateCommunityPointsCustomRewardRedemptionStatusErrorCode, graphql_name='code')


class UpdateCommunityPointsCustomRewardRedemptionStatusPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'redemption')
    error = sgqlc.types.Field(UpdateCommunityPointsCustomRewardRedemptionStatusError, graphql_name='error')
    redemption = sgqlc.types.Field(CommunityPointsCustomRewardRedemption, graphql_name='redemption')


class UpdateCommunityPointsCustomRewardRedemptionStatusesByChannelPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field('UpdateCommunityPointsCustomRewardRedemptionStatusesError', graphql_name='error')


class UpdateCommunityPointsCustomRewardRedemptionStatusesByRedemptionsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field('UpdateCommunityPointsCustomRewardRedemptionStatusesError', graphql_name='error')


class UpdateCommunityPointsCustomRewardRedemptionStatusesByRewardPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field('UpdateCommunityPointsCustomRewardRedemptionStatusesError', graphql_name='error')


class UpdateCommunityPointsCustomRewardRedemptionStatusesError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(UpdateCommunityPointsCustomRewardRedemptionStatusesErrorCode, graphql_name='code')


class UpdateCommunityPointsEarlyAccessError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateCommunityPointsEarlyAccessErrorCode), graphql_name='code')


class UpdateCommunityPointsEarlyAccessSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    error = sgqlc.types.Field(UpdateCommunityPointsEarlyAccessError, graphql_name='error')


class UpdateCommunityPointsLastViewedContentError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(UpdateCommunityPointsLastViewedContentErrorCode, graphql_name='code')


class UpdateCommunityPointsLastViewedContentPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'last_viewed_channel_content', 'last_viewed_global_content')
    error = sgqlc.types.Field(UpdateCommunityPointsLastViewedContentError, graphql_name='error')
    last_viewed_channel_content = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommunityPointsLastViewedContentByType)), graphql_name='lastViewedChannelContent')
    last_viewed_global_content = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CommunityPointsLastViewedContentByTypeAndID)), graphql_name='lastViewedGlobalContent')


class UpdateCommunityPointsSmartCostsAcknowledgementsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(UpdateCommunityPointsSmartCostsAcknowledgementsErrorCode, graphql_name='code')


class UpdateCommunityPointsSmartCostsAcknowledgementsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('acknowledgements', 'error')
    acknowledgements = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(SmartCostsAcknowledgement)), graphql_name='acknowledgements')
    error = sgqlc.types.Field(UpdateCommunityPointsSmartCostsAcknowledgementsError, graphql_name='error')


class UpdateCompetitionPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field(Competition, graphql_name='competition')
    error = sgqlc.types.Field(CompetitionError, graphql_name='error')


class UpdateCompetitionPlayerPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field(Competition, graphql_name='competition')
    error = sgqlc.types.Field(CompetitionError, graphql_name='error')


class UpdateCompetitionTeamPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field(Competition, graphql_name='competition')
    error = sgqlc.types.Field(CompetitionError, graphql_name='error')


class UpdateConsentError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(UpdateConsentErrorCode, graphql_name='code')


class UpdateConsentPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('consent', 'error')
    consent = sgqlc.types.Field(Consent, graphql_name='consent')
    error = sgqlc.types.Field(UpdateConsentError, graphql_name='error')


class UpdateContentTagsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content',)
    content = sgqlc.types.Field('TaggedContent', graphql_name='content')


class UpdateDropBenefitOnDropPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_campaign', 'error')
    drop_campaign = sgqlc.types.Field(DropCampaign, graphql_name='dropCampaign')
    error = sgqlc.types.Field(DropsError, graphql_name='error')


class UpdateDropBenefitPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_benefit', 'error')
    drop_benefit = sgqlc.types.Field(DropBenefit, graphql_name='dropBenefit')
    error = sgqlc.types.Field(DropsError, graphql_name='error')


class UpdateDropPreconditionsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('drop_campaign', 'error')
    drop_campaign = sgqlc.types.Field(DropCampaign, graphql_name='dropCampaign')
    error = sgqlc.types.Field(DropsError, graphql_name='error')


class UpdateDropsOptOutStatusPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_opted_out', 'user_id')
    is_opted_out = sgqlc.types.Field(Boolean, graphql_name='isOptedOut')
    user_id = sgqlc.types.Field(ID, graphql_name='userID')


class UpdateEmoteOrdersError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateEmoteOrdersErrorCode), graphql_name='code')


class UpdateEmoteOrdersPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('emotes', 'error')
    emotes = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Emote)), graphql_name='emotes')
    error = sgqlc.types.Field(UpdateEmoteOrdersError, graphql_name='error')


class UpdateExtensionDiscoveryDataPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'manifest')
    error = sgqlc.types.Field(UpdateExtensionDiscoveryDataError, graphql_name='error')
    manifest = sgqlc.types.Field(ExtensionVersionDiscoveryManifest, graphql_name='manifest')


class UpdateExtensionManifestPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'manifest')
    error = sgqlc.types.Field(UpdateExtensionManifestError, graphql_name='error')
    manifest = sgqlc.types.Field(ExtensionManifest, graphql_name='manifest')


class UpdateHypeTrainConfigPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('config',)
    config = sgqlc.types.Field(HypeTrainConfig, graphql_name='config')


class UpdateIsSharingActivityPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateLWATokenPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'token')
    error = sgqlc.types.Field('WatchPartyError', graphql_name='error')
    token = sgqlc.types.Field(LWAToken, graphql_name='token')


class UpdateLeaderboardSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateLiveUpNotificationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('broadcast_settings', 'error')
    broadcast_settings = sgqlc.types.Field(BroadcastSettings, graphql_name='broadcastSettings')
    error = sgqlc.types.Field('UpdateLiveUpNotificationValidationError', graphql_name='error')


class UpdateLiveUpNotificationValidationError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateLiveUpNotificationValidationErrorCode), graphql_name='code')


class UpdateLobbyParticipantScorePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('competition', 'error')
    competition = sgqlc.types.Field(Competition, graphql_name='competition')
    error = sgqlc.types.Field(CompetitionError, graphql_name='error')


class UpdateMultiviewContentAttributesPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('failed_updates', 'succeeded_updates')
    failed_updates = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(MultiviewContentAttribute))), graphql_name='failedUpdates')
    succeeded_updates = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(MultiviewContentAttribute))), graphql_name='succeededUpdates')


class UpdateOnboardingSkippedChannelsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateOrganizationMemberRoleError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateOrganizationMemberRoleErrorCode), graphql_name='code')


class UpdateOrganizationMemberRolePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'organization_member')
    error = sgqlc.types.Field(UpdateOrganizationMemberRoleError, graphql_name='error')
    organization_member = sgqlc.types.Field(OrganizationMember, graphql_name='organizationMember')


class UpdateOwnerChanletAttributesPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('owner_chanlet_attributes',)
    owner_chanlet_attributes = sgqlc.types.Field(OwnerChanletAttributes, graphql_name='ownerChanletAttributes')


class UpdatePanelPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('panel',)
    panel = sgqlc.types.Field(sgqlc.types.non_null(Panel), graphql_name='panel')


class UpdatePhoneNumberConfirmationError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'message')
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdatePhoneNumberConfirmationErrorCode), graphql_name='code')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')


class UpdatePhoneNumberConfirmationPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(UpdatePhoneNumberConfirmationError, graphql_name='error')


class UpdatePhoneNumberError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'message')
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdatePhoneNumberErrorCode), graphql_name='code')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')


class UpdatePhoneNumberPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(UpdatePhoneNumberError, graphql_name='error')


class UpdatePrimeOfferStatusError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdatePrimeOfferStatusErrorCode), graphql_name='code')


class UpdatePrimeOfferStatusPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'self')
    error = sgqlc.types.Field(UpdatePrimeOfferStatusError, graphql_name='error')
    self = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(PrimeOfferSelfConnection))), graphql_name='self')


class UpdatePrimeSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('prime_settings',)
    prime_settings = sgqlc.types.Field(PrimeSettings, graphql_name='primeSettings')


class UpdateRaidSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateRoomError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'max_length', 'min_length')
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateRoomErrorCode), graphql_name='code')
    max_length = sgqlc.types.Field(Int, graphql_name='maxLength')
    min_length = sgqlc.types.Field(Int, graphql_name='minLength')


class UpdateRoomModesError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'maximum_slow_mode_duration_seconds', 'minimum_slow_mode_duration_seconds')
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateRoomModesErrorCode), graphql_name='code')
    maximum_slow_mode_duration_seconds = sgqlc.types.Field(Int, graphql_name='maximumSlowModeDurationSeconds')
    minimum_slow_mode_duration_seconds = sgqlc.types.Field(Int, graphql_name='minimumSlowModeDurationSeconds')


class UpdateRoomModesPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'room')
    error = sgqlc.types.Field(UpdateRoomModesError, graphql_name='error')
    room = sgqlc.types.Field(Room, graphql_name='room')


class UpdateRoomPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'room')
    error = sgqlc.types.Field(UpdateRoomError, graphql_name='error')
    room = sgqlc.types.Field(Room, graphql_name='room')


class UpdateRoomViewPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('room_view',)
    room_view = sgqlc.types.Field(RoomView, graphql_name='roomView')


class UpdateScheduleSegmentError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'conflicting_segment', 'maximum', 'minimum')
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateScheduleSegmentErrorCode), graphql_name='code')
    conflicting_segment = sgqlc.types.Field(ScheduleSegment, graphql_name='conflictingSegment')
    maximum = sgqlc.types.Field(Int, graphql_name='maximum')
    minimum = sgqlc.types.Field(Int, graphql_name='minimum')


class UpdateScheduleSegmentPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'schedule')
    error = sgqlc.types.Field(UpdateScheduleSegmentError, graphql_name='error')
    schedule = sgqlc.types.Field(Schedule, graphql_name='schedule')


class UpdateSeenCreatorOnboardingContentPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateSocialMediaPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    error = sgqlc.types.Field(UpdateSocialMediaError, graphql_name='error')


class UpdateSquadInvitePolicyError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateSquadInvitePolicyErrorCode), graphql_name='code')


class UpdateSquadInvitePolicyPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'user')
    error = sgqlc.types.Field(UpdateSquadInvitePolicyError, graphql_name='error')
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateSquadStreamError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateSquadStreamErrorCode), graphql_name='code')


class UpdateSquadStreamPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'squad_stream')
    error = sgqlc.types.Field(UpdateSquadStreamError, graphql_name='error')
    squad_stream = sgqlc.types.Field(SquadStream, graphql_name='squadStream')


class UpdateStuccoPackPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('stucco_pack',)
    stucco_pack = sgqlc.types.Field(StuccoPack, graphql_name='stuccoPack')


class UpdateStuccoPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('stucco',)
    stucco = sgqlc.types.Field(Stucco, graphql_name='stucco')


class UpdateSubscriptionProductPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('product', 'target_user')
    product = sgqlc.types.Field(SubscriptionProduct, graphql_name='product')
    target_user = sgqlc.types.Field('User', graphql_name='targetUser')


class UpdateUserColorsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateUserColorsErrorCode), graphql_name='code')


class UpdateUserColorsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'user')
    error = sgqlc.types.Field(UpdateUserColorsError, graphql_name='error')
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateUserCreateDateHiddenPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateUserDirectoryHiddenPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateUserEmailReusablePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateUserError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateUserErrorCode), graphql_name='code')


class UpdateUserIsEmailRevertSuccessPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateUserPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'user')
    error = sgqlc.types.Field(UpdateUserError, graphql_name='error')
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateUserPredictionSettingsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateUserPredictionSettingsErrorCode), graphql_name='code')


class UpdateUserPredictionSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'settings')
    error = sgqlc.types.Field(UpdateUserPredictionSettingsError, graphql_name='error')
    settings = sgqlc.types.Field('UserPredictionSettings', graphql_name='settings')


class UpdateUserSubscriptionSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('subscription_settings',)
    subscription_settings = sgqlc.types.Field('UserSubscriptionSettings', graphql_name='subscriptionSettings')


class UpdateUserTeamMembershipPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateUserVideoShelvesError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'message')
    code = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='code')
    message = sgqlc.types.Field(String, graphql_name='message')


class UpdateUserVideoShelvesPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'shelves')
    error = sgqlc.types.Field(UpdateUserVideoShelvesError, graphql_name='error')
    shelves = sgqlc.types.Field(sgqlc.types.list_of('VideoShelf'), graphql_name='shelves')


class UpdateUserViewedVideoPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('video',)
    video = sgqlc.types.Field('Video', graphql_name='video')


class UpdateVideoCommentPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('comment',)
    comment = sgqlc.types.Field(sgqlc.types.non_null('VideoComment'), graphql_name='comment')


class UpdateVideoPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('video',)
    video = sgqlc.types.Field('Video', graphql_name='video')


class UpdateVideoStreamSettingsError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(UpdateVideoStreamSettingsErrorCode), graphql_name='code')


class UpdateVideoStreamSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'error')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    error = sgqlc.types.Field(UpdateVideoStreamSettingsError, graphql_name='error')


class UpdateVisibilityPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateWhisperSettingsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field('User', graphql_name='user')


class UpdateWhisperThreadPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('thread',)
    thread = sgqlc.types.Field(sgqlc.types.non_null('WhisperThread'), graphql_name='thread')


class UploadCompetitionImagePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'image')
    error = sgqlc.types.Field(CompetitionUploadImageError, graphql_name='error')
    image = sgqlc.types.Field(CompetitionImageUpload, graphql_name='image')


class UploadConfig(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'url', 'asset_type', 'images', 'size')
    id = sgqlc.types.Field(sgqlc.types.non_null('ID'), graphql_name='ID')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='URL')
    asset_type = sgqlc.types.Field(sgqlc.types.non_null(EmoteAssetType), graphql_name='assetType')
    images = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('UploadImage'))), graphql_name='images')
    size = sgqlc.types.Field(sgqlc.types.non_null(EmoteImageSize), graphql_name='size')


class UploadImage(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'size', 'asset_type')
    id = sgqlc.types.Field(sgqlc.types.non_null('ID'), graphql_name='ID')
    size = sgqlc.types.Field(sgqlc.types.non_null(EmoteImageSize), graphql_name='Size')
    asset_type = sgqlc.types.Field(sgqlc.types.non_null(EmoteAssetType), graphql_name='assetType')


class UseChatNotificationTokenPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_success',)
    is_success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSuccess')


class User(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('account_connections', 'account_health', 'active_challenges', 'activity', 'ad_properties', 'amazon', 'authenticated_session_list', 'auto_mod_properties', 'auto_refill', 'autohost_channels', 'autohost_settings', 'autohosted_by_channels', 'availability', 'available_badges', 'balances', 'banned_users', 'banner_image_url', 'bits_balance', 'bits_events', 'bits_offers', 'bits_payment_methods', 'bits_products', 'bits_user_settings', 'bits_user_state', 'blizzard_account', 'blocked_terms', 'blocked_users', 'bounties', 'bounties_page', 'bounty_board_settings', 'broadcast_badges', 'broadcast_settings', 'campaign', 'campaign_properties', 'celebration_settings', 'channel', 'channel_analytics_content_overlap', 'channel_feed', 'channel_rooms', 'chat_color', 'chat_settings', 'chat_uisettings', 'cheer', 'client_authorizations', 'clips', 'collections', 'community_points', 'company', 'competitions', 'created_at', 'creator_gifting', 'creator_metrics_by_interval', 'creator_referral_links', 'creator_referral_summary', 'dashboard_activity_feed_activities', 'dashboard_alert_queue_activities', 'dashboard_alert_queue_preferences', 'deleted_at', 'description', 'directories', 'display_badges', 'display_name', 'dmca_violation_count', 'drop_campaign', 'drop_campaigns', 'drop_current_session', 'editable_channels', 'editors', 'email', 'emote_sets', 'emoticon_prefix', 'endorsed_channels', 'expired_subscriptions', 'feature_flags', 'follow', 'followed_games', 'followed_hosts', 'followed_live_users', 'followed_videos', 'followers', 'follows', 'friends', 'go_live_notification_connection', 'go_live_notifications', 'go_live_notifications_timeseries', 'has_badges_timed_out', 'has_presto', 'has_prime', 'has_streamed', 'has_turbo', 'has_unread_changelog_items', 'host_recommendations', 'hosted_by', 'hosting', 'id', 'id_sha1', 'incoming_friend_requests', 'incoming_squad_stream_invitations', 'installed_extensions', 'inventory', 'invited_teams', 'is_commerce_rev_share_enabled', 'is_connected_to_twitter', 'is_email_reusable', 'is_email_updateable', 'is_email_verified', 'is_flagged_to_delete', 'is_global_mod', 'is_in_emote_good_standing', 'is_in_good_standing', 'is_minimum_gdprconsent_age', 'is_moderator', 'is_partner', 'is_phone_number_verified', 'is_site_admin', 'is_staff', 'key_pools', 'language', 'last_broadcast', 'last_login_change_at', 'last_status_change_at', 'latest_poll', 'linked_extensions', 'login', 'logo_url', 'loyalty_badges', 'max_allowed_channel_rooms', 'mod_logs', 'mod_logs_access', 'mod_logs_role_access', 'mod_view_settings', 'mods', 'notification_settings', 'notifications', 'oauth_apps', 'offline_image_url', 'onboarding', 'organization_invites', 'organizations', 'outgoing_friend_requests', 'owned_teams', 'panels', 'participating_challenges', 'partnership_application', 'payable_status', 'payment_incentive_metrics', 'payment_method_configs', 'payment_methods', 'payment_transactions', 'payout', 'payout_balance', 'payout_invite', 'payout_plans', 'permitted_terms', 'phone_number', 'polls', 'predictions_settings', 'preroll_free_time_seconds', 'primary_color_hex', 'primary_team', 'prime_payout_details', 'prime_payout_history', 'prime_settings', 'profile_image_url', 'profile_url', 'profile_view_count', 'program_agreement', 'pulse_feed', 'purchase_order', 'quests', 'radio', 'radio_account', 'raid', 'raid_settings', 'recent_raids', 'recommendation_feedback', 'recommendations', 'recommended_emoticon_prefix', 'relationship', 'residence', 'rewarded_video', 'roles', 'search_videos', 'seen_creator_onboarding_content', 'selected_badge', 'self', 'self_installed_extensions', 'settings', 'squad_stream', 'squad_stream_settings', 'sso_links', 'stream', 'stream_sessions', 'stream_sessions_by_interval', 'stream_summaries', 'stucco_packs_broadcaster', 'stuccos', 'subscribed_channels', 'subscriber_score', 'subscription_benefits', 'subscription_products', 'subscription_products_result', 'subscription_settings', 'subscription_token', 'tag_analytics', 'tags', 'team_memberships', 'timeseries_stats', 'tournament', 'twitch', 'unacknowledged_subscription_events', 'updated_at', 'verification_request', 'video_play_referrals', 'video_shelves', 'video_shelves_available', 'videos', 'viewable_poll', 'viewed_videos', 'vips', 'wallet_balances', 'watch_parties_restrictions', 'watch_party', 'whisper_settings', 'whisper_threads', 'withholding_tax_detail')
    account_connections = sgqlc.types.Field(sgqlc.types.non_null(AccountConnectionSet), graphql_name='accountConnections')
    account_health = sgqlc.types.Field('UserAccountHealth', graphql_name='accountHealth')
    active_challenges = sgqlc.types.Field(ChannelChallengeConnection, graphql_name='activeChallenges', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('sort', sgqlc.types.Arg(ChannelChallengeSort, graphql_name='sort', default='START_TIME')),
        ('direction', sgqlc.types.Arg(SortOrder, graphql_name='direction', default='DESC')),
))
    )
    activity = sgqlc.types.Field(Activity, graphql_name='activity')
    ad_properties = sgqlc.types.Field(AdProperties, graphql_name='adProperties')
    amazon = sgqlc.types.Field('UserAmazonConnection', graphql_name='amazon')
    authenticated_session_list = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AuthenticatedSession)), graphql_name='authenticatedSessionList')
    auto_mod_properties = sgqlc.types.Field(AutoModProperties, graphql_name='autoModProperties')
    auto_refill = sgqlc.types.Field(AutoRefill, graphql_name='autoRefill')
    autohost_channels = sgqlc.types.Field(AutohostChannelConnection, graphql_name='autohostChannels')
    autohost_settings = sgqlc.types.Field(AutohostSettings, graphql_name='autohostSettings')
    autohosted_by_channels = sgqlc.types.Field(AutohostedByChannelConnection, graphql_name='autohostedByChannels')
    availability = sgqlc.types.Field(Availability, graphql_name='availability')
    available_badges = sgqlc.types.Field(sgqlc.types.list_of(Badge), graphql_name='availableBadges', args=sgqlc.types.ArgDict((
        ('domains', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BadgeDomain)), graphql_name='domains', default=None)),
))
    )
    balances = sgqlc.types.Field(sgqlc.types.list_of(Balance), graphql_name='balances', args=sgqlc.types.ArgDict((
        ('wallet_type', sgqlc.types.Arg(WalletType, graphql_name='walletType', default=None)),
))
    )
    banned_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChannelBannedUser)), graphql_name='bannedUsers')
    banner_image_url = sgqlc.types.Field(String, graphql_name='bannerImageURL')
    bits_balance = sgqlc.types.Field(Int, graphql_name='bitsBalance')
    bits_events = sgqlc.types.Field(BitsEventConnection, graphql_name='bitsEvents', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=50)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('criteria', sgqlc.types.Arg(sgqlc.types.non_null(BitsEventConnectionCriteriaInput), graphql_name='criteria', default=None)),
))
    )
    bits_offers = sgqlc.types.Field(sgqlc.types.list_of(BitsOffer), graphql_name='bitsOffers')
    bits_payment_methods = sgqlc.types.Field(BitsPaymentMethods, graphql_name='bitsPaymentMethods')
    bits_products = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(BitsProduct)), graphql_name='bitsProducts', args=sgqlc.types.ArgDict((
        ('provider', sgqlc.types.Arg(sgqlc.types.non_null(BitsProductProvider), graphql_name='provider', default=None)),
        ('skus', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='skus', default=None)),
        ('payment_provider', sgqlc.types.Arg(PaymentProvider, graphql_name='paymentProvider', default=None)),
))
    )
    bits_user_settings = sgqlc.types.Field(BitsUserSettings, graphql_name='bitsUserSettings')
    bits_user_state = sgqlc.types.Field(BitsUserState, graphql_name='bitsUserState')
    blizzard_account = sgqlc.types.Field(BlizzardUser, graphql_name='blizzardAccount')
    blocked_terms = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ChannelBlockedTerm))), graphql_name='blockedTerms')
    blocked_users = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('User')), graphql_name='blockedUsers')
    bounties = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Bounty)), graphql_name='bounties', args=sgqlc.types.ArgDict((
        ('status', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='status', default=None)),
))
    )
    bounties_page = sgqlc.types.Field(BountyConnection, graphql_name='bountiesPage', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('status', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='status', default=None)),
))
    )
    bounty_board_settings = sgqlc.types.Field(BountyBoardSettings, graphql_name='bountyBoardSettings')
    broadcast_badges = sgqlc.types.Field(sgqlc.types.list_of(Badge), graphql_name='broadcastBadges')
    broadcast_settings = sgqlc.types.Field(BroadcastSettings, graphql_name='broadcastSettings')
    campaign = sgqlc.types.Field(Campaign, graphql_name='campaign', args=sgqlc.types.ArgDict((
        ('campaign_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='campaignID', default=None)),
))
    )
    campaign_properties = sgqlc.types.Field(CampaignProperties, graphql_name='campaignProperties')
    celebration_settings = sgqlc.types.Field(CelebrationUserSettings, graphql_name='celebrationSettings')
    channel = sgqlc.types.Field(Channel, graphql_name='channel')
    channel_analytics_content_overlap = sgqlc.types.Field(ChannelAnalyticsContentOverlap, graphql_name='channelAnalyticsContentOverlap')
    channel_feed = sgqlc.types.Field(Feed, graphql_name='channelFeed')
    channel_rooms = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(Room)), graphql_name='channelRooms')
    chat_color = sgqlc.types.Field(String, graphql_name='chatColor')
    chat_settings = sgqlc.types.Field(ChatSettings, graphql_name='chatSettings')
    chat_uisettings = sgqlc.types.Field(ChatUISettings, graphql_name='chatUISettings')
    cheer = sgqlc.types.Field(CheerInfo, graphql_name='cheer')
    client_authorizations = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ClientAuthorization)), graphql_name='clientAuthorizations')
    clips = sgqlc.types.Field(ClipConnection, graphql_name='clips', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('criteria', sgqlc.types.Arg(UserClipsInput, graphql_name='criteria', default=None)),
))
    )
    collections = sgqlc.types.Field(CollectionsConnection, graphql_name='collections', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('options', sgqlc.types.Arg(CollectionsOptions, graphql_name='options', default=None)),
))
    )
    community_points = sgqlc.types.Field(CommunityPointsUserProperties, graphql_name='communityPoints')
    company = sgqlc.types.Field(Company, graphql_name='company')
    competitions = sgqlc.types.Field(CompetitionConnection, graphql_name='competitions', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('user_state', sgqlc.types.Arg(CompetitionPlayerState, graphql_name='userState', default=None)),
        ('competition_state', sgqlc.types.Arg(CompetitionState, graphql_name='competitionState', default=None)),
        ('user_competition_relationship', sgqlc.types.Arg(sgqlc.types.non_null(UserCompetitionRelationship), graphql_name='userCompetitionRelationship', default=None)),
))
    )
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    creator_gifting = sgqlc.types.Field(CreatorGifting, graphql_name='creatorGifting')
    creator_metrics_by_interval = sgqlc.types.Field(CreatorMetricsByInterval, graphql_name='creatorMetricsByInterval', args=sgqlc.types.ArgDict((
        ('start_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='startAt', default=None)),
        ('end_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='endAt', default=None)),
        ('time_zone', sgqlc.types.Arg(String, graphql_name='timeZone', default=None)),
        ('number_of_intervals', sgqlc.types.Arg(Int, graphql_name='numberOfIntervals', default=1)),
))
    )
    creator_referral_links = sgqlc.types.Field(CreatorReferralLinkConnection, graphql_name='creatorReferralLinks', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=1)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    creator_referral_summary = sgqlc.types.Field(sgqlc.types.non_null(CreatorReferralSummary), graphql_name='creatorReferralSummary', args=sgqlc.types.ArgDict((
        ('start_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='startAt', default=None)),
        ('end_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='endAt', default=None)),
))
    )
    dashboard_activity_feed_activities = sgqlc.types.Field(DashboardActivityFeedActivityConnection, graphql_name='dashboardActivityFeedActivities', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    dashboard_alert_queue_activities = sgqlc.types.Field(DashboardAlertQueueActivityConnection, graphql_name='dashboardAlertQueueActivities', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    dashboard_alert_queue_preferences = sgqlc.types.Field(DashboardAlertQueuePreferences, graphql_name='dashboardAlertQueuePreferences')
    deleted_at = sgqlc.types.Field(Time, graphql_name='deletedAt')
    description = sgqlc.types.Field(String, graphql_name='description')
    directories = sgqlc.types.Field('UserDirectoryConnection', graphql_name='directories')
    display_badges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(Badge)), graphql_name='displayBadges', args=sgqlc.types.ArgDict((
        ('channel_id', sgqlc.types.Arg(ID, graphql_name='channelID', default=None)),
        ('channel_login', sgqlc.types.Arg(String, graphql_name='channelLogin', default=None)),
))
    )
    display_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='displayName')
    dmca_violation_count = sgqlc.types.Field(Int, graphql_name='dmcaViolationCount')
    drop_campaign = sgqlc.types.Field(DropCampaign, graphql_name='dropCampaign', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    drop_campaigns = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DropCampaign)), graphql_name='dropCampaigns')
    drop_current_session = sgqlc.types.Field(DropCurrentSession, graphql_name='dropCurrentSession')
    editable_channels = sgqlc.types.Field(EditableChannelConnection, graphql_name='editableChannels')
    editors = sgqlc.types.Field(EditorConnection, graphql_name='editors')
    email = sgqlc.types.Field(String, graphql_name='email')
    emote_sets = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(EmoteSet)), graphql_name='emoteSets', args=sgqlc.types.ArgDict((
        ('domains', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(EmoteSetDomain)), graphql_name='domains', default=None)),
))
    )
    emoticon_prefix = sgqlc.types.Field(EmoticonPrefix, graphql_name='emoticonPrefix')
    endorsed_channels = sgqlc.types.Field(EndorsedChannelConnection, graphql_name='endorsedChannels', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('recommendations_context', sgqlc.types.Arg(sgqlc.types.non_null(RecommendationsContext), graphql_name='recommendationsContext', default=None)),
))
    )
    expired_subscriptions = sgqlc.types.Field(ExpiredSubscriptionConnection, graphql_name='expiredSubscriptions', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    feature_flags = sgqlc.types.Field(FeatureFlags, graphql_name='featureFlags')
    follow = sgqlc.types.Field(Follow, graphql_name='follow', args=sgqlc.types.ArgDict((
        ('target_id', sgqlc.types.Arg(ID, graphql_name='targetID', default=None)),
        ('target_login', sgqlc.types.Arg(String, graphql_name='targetLogin', default=None)),
))
    )
    followed_games = sgqlc.types.Field(FollowedGameConnection, graphql_name='followedGames', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('type', sgqlc.types.Arg(FollowedGamesType, graphql_name='type', default='ALL')),
))
    )
    followed_hosts = sgqlc.types.Field(FollowedHostConnection, graphql_name='followedHosts', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
))
    )
    followed_live_users = sgqlc.types.Field(FollowedLiveUserConnection, graphql_name='followedLiveUsers', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('include_restricted', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(StreamRestrictionType)), graphql_name='includeRestricted', default=None)),
        ('sort', sgqlc.types.Arg(StreamSort, graphql_name='sort', default='VIEWER_COUNT')),
))
    )
    followed_videos = sgqlc.types.Field('VideoConnection', graphql_name='followedVideos', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('languages', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='languages', default=None)),
        ('types', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BroadcastType)), graphql_name='types', default=None)),
        ('sort', sgqlc.types.Arg(VideoSort, graphql_name='sort', default='TIME')),
))
    )
    followers = sgqlc.types.Field(FollowerConnection, graphql_name='followers', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('order', sgqlc.types.Arg(SortOrder, graphql_name='order', default='ASC')),
))
    )
    follows = sgqlc.types.Field(FollowConnection, graphql_name='follows', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('filter', sgqlc.types.Arg(FollowsFilter, graphql_name='filter', default='ALL')),
        ('order', sgqlc.types.Arg(SortOrder, graphql_name='order', default='ASC')),
))
    )
    friends = sgqlc.types.Field(FriendConnection, graphql_name='friends')
    go_live_notification_connection = sgqlc.types.Field(GoLiveNotificationConnection, graphql_name='goLiveNotificationConnection', args=sgqlc.types.ArgDict((
        ('start_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='startAt', default=None)),
        ('end_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='endAt', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=100)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('sort', sgqlc.types.Arg(SortOrder, graphql_name='sort', default='DESC')),
))
    )
    go_live_notifications = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(GoLiveNotification)), graphql_name='goLiveNotifications', args=sgqlc.types.ArgDict((
        ('start_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='startAt', default=None)),
        ('end_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='endAt', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=100)),
        ('sort', sgqlc.types.Arg(SortOrder, graphql_name='sort', default='DESC')),
))
    )
    go_live_notifications_timeseries = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(GoLiveNotificationTimeseries)), graphql_name='goLiveNotificationsTimeseries', args=sgqlc.types.ArgDict((
        ('start_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='startAt', default=None)),
        ('end_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='endAt', default=None)),
        ('granularity', sgqlc.types.Arg(sgqlc.types.non_null(Granularity), graphql_name='granularity', default=None)),
        ('number_of_intervals', sgqlc.types.Arg(Int, graphql_name='numberOfIntervals', default=1)),
        ('time_zone', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='timeZone', default=None)),
))
    )
    has_badges_timed_out = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasBadgesTimedOut')
    has_presto = sgqlc.types.Field(Boolean, graphql_name='hasPresto')
    has_prime = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasPrime')
    has_streamed = sgqlc.types.Field(Boolean, graphql_name='hasStreamed')
    has_turbo = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasTurbo')
    has_unread_changelog_items = sgqlc.types.Field(Boolean, graphql_name='hasUnreadChangelogItems')
    host_recommendations = sgqlc.types.Field(sgqlc.types.list_of('User'), graphql_name='hostRecommendations')
    hosted_by = sgqlc.types.Field(HostConnection, graphql_name='hostedBy', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    hosting = sgqlc.types.Field('User', graphql_name='hosting')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    id_sha1 = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='idSHA1')
    incoming_friend_requests = sgqlc.types.Field(IncomingFriendRequestConnection, graphql_name='incomingFriendRequests', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('sort', sgqlc.types.Arg(FriendSort, graphql_name='sort', default='DESC')),
))
    )
    incoming_squad_stream_invitations = sgqlc.types.Field(SquadStreamInvitationConnection, graphql_name='incomingSquadStreamInvitations')
    installed_extensions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ExtensionInstallation)), graphql_name='installedExtensions')
    inventory = sgqlc.types.Field(Inventory, graphql_name='inventory')
    invited_teams = sgqlc.types.Field(sgqlc.types.list_of(Team), graphql_name='invitedTeams')
    is_commerce_rev_share_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isCommerceRevShareEnabled')
    is_connected_to_twitter = sgqlc.types.Field(Boolean, graphql_name='isConnectedToTwitter')
    is_email_reusable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEmailReusable')
    is_email_updateable = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEmailUpdateable')
    is_email_verified = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEmailVerified')
    is_flagged_to_delete = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isFlaggedToDelete')
    is_global_mod = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isGlobalMod')
    is_in_emote_good_standing = sgqlc.types.Field(Boolean, graphql_name='isInEmoteGoodStanding')
    is_in_good_standing = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isInGoodStanding')
    is_minimum_gdprconsent_age = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isMinimumGDPRConsentAge')
    is_moderator = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isModerator', args=sgqlc.types.ArgDict((
        ('channel_id', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='channelID', default=None)),
))
    )
    is_partner = sgqlc.types.Field(Boolean, graphql_name='isPartner')
    is_phone_number_verified = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPhoneNumberVerified')
    is_site_admin = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSiteAdmin')
    is_staff = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isStaff')
    key_pools = sgqlc.types.Field(KeyPoolConnection, graphql_name='keyPools', args=sgqlc.types.ArgDict((
        ('after', sgqlc.types.Arg(String, graphql_name='after', default=None)),
))
    )
    language = sgqlc.types.Field(Language, graphql_name='language')
    last_broadcast = sgqlc.types.Field(Broadcast, graphql_name='lastBroadcast')
    last_login_change_at = sgqlc.types.Field(Time, graphql_name='lastLoginChangeAt')
    last_status_change_at = sgqlc.types.Field(Time, graphql_name='lastStatusChangeAt')
    latest_poll = sgqlc.types.Field(Poll, graphql_name='latestPoll')
    linked_extensions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Extension)), graphql_name='linkedExtensions')
    login = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='login')
    logo_url = sgqlc.types.Field(String, graphql_name='logoURL', args=sgqlc.types.ArgDict((
        ('width', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='width', default=None)),
))
    )
    loyalty_badges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(LoyaltyBadge)), graphql_name='loyaltyBadges')
    max_allowed_channel_rooms = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='maxAllowedChannelRooms')
    mod_logs = sgqlc.types.Field(ModLogs, graphql_name='modLogs')
    mod_logs_access = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ModLogsAccess)), graphql_name='modLogsAccess')
    mod_logs_role_access = sgqlc.types.Field(ModLogsAccess, graphql_name='modLogsRoleAccess', args=sgqlc.types.ArgDict((
        ('role', sgqlc.types.Arg(sgqlc.types.non_null(ChannelUserRole), graphql_name='role', default=None)),
))
    )
    mod_view_settings = sgqlc.types.Field(ModViewSettings, graphql_name='modViewSettings')
    mods = sgqlc.types.Field(ModConnection, graphql_name='mods', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    notification_settings = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(EventNotificationSetting)), graphql_name='notificationSettings')
    notifications = sgqlc.types.Field(OnsiteNotificationConnection, graphql_name='notifications', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('language', sgqlc.types.Arg(String, graphql_name='language', default=None)),
        ('display_type', sgqlc.types.Arg(OnsiteNotificationDisplayType, graphql_name='displayType', default=None)),
        ('capabilities', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(OnsiteNotificationsCapability)), graphql_name='capabilities', default=None)),
))
    )
    oauth_apps = sgqlc.types.Field(OAuthAppConnection, graphql_name='oauthApps', args=sgqlc.types.ArgDict((
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    offline_image_url = sgqlc.types.Field(String, graphql_name='offlineImageURL')
    onboarding = sgqlc.types.Field(Onboarding, graphql_name='onboarding')
    organization_invites = sgqlc.types.Field(OrganizationInviteUserConnection, graphql_name='organizationInvites', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    organizations = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Organization)), graphql_name='organizations')
    outgoing_friend_requests = sgqlc.types.Field(OutgoingFriendRequestConnection, graphql_name='outgoingFriendRequests', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('sort', sgqlc.types.Arg(FriendSort, graphql_name='sort', default='DESC')),
))
    )
    owned_teams = sgqlc.types.Field(sgqlc.types.list_of(Team), graphql_name='ownedTeams')
    panels = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(Panel)), graphql_name='panels', args=sgqlc.types.ArgDict((
        ('hide_extensions', sgqlc.types.Arg(Boolean, graphql_name='hideExtensions', default=False)),
))
    )
    participating_challenges = sgqlc.types.Field(ChannelChallengeConnection, graphql_name='participatingChallenges', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('sort', sgqlc.types.Arg(ChannelChallengeSort, graphql_name='sort', default='END_TIME')),
        ('direction', sgqlc.types.Arg(SortOrder, graphql_name='direction', default='ASC')),
        ('status', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ChannelChallengeStatus)), graphql_name='status', default=None)),
))
    )
    partnership_application = sgqlc.types.Field(PartnershipApplication, graphql_name='partnershipApplication')
    payable_status = sgqlc.types.Field(PayableStatus, graphql_name='payableStatus')
    payment_incentive_metrics = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(PaymentIncentiveMetricsRollup)), graphql_name='paymentIncentiveMetrics')
    payment_method_configs = sgqlc.types.Field(PaymentProviderConfigs, graphql_name='paymentMethodConfigs')
    payment_methods = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(PaymentMethod)), graphql_name='paymentMethods')
    payment_transactions = sgqlc.types.Field(PaymentTransactionConnection, graphql_name='paymentTransactions', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=50)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('criteria', sgqlc.types.Arg(sgqlc.types.non_null(PaymentTransactionConnectionCriteriaInput), graphql_name='criteria', default=None)),
))
    )
    payout = sgqlc.types.Field(Payout, graphql_name='payout')
    payout_balance = sgqlc.types.Field(PayoutBalance, graphql_name='payoutBalance')
    payout_invite = sgqlc.types.Field(PayoutInvite, graphql_name='payoutInvite')
    payout_plans = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(PayoutPlan)), graphql_name='payoutPlans')
    permitted_terms = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(ChannelPermittedTerm))), graphql_name='permittedTerms')
    phone_number = sgqlc.types.Field(String, graphql_name='phoneNumber')
    polls = sgqlc.types.Field(PollConnection, graphql_name='polls', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=15)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('sort', sgqlc.types.Arg(PollSort, graphql_name='sort', default='START_TIME')),
        ('direction', sgqlc.types.Arg(SortOrder, graphql_name='direction', default='DESC')),
        ('status', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(PollStatus)), graphql_name='status', default=None)),
))
    )
    predictions_settings = sgqlc.types.Field('UserPredictionSettings', graphql_name='predictionsSettings')
    preroll_free_time_seconds = sgqlc.types.Field(Int, graphql_name='prerollFreeTimeSeconds')
    primary_color_hex = sgqlc.types.Field(String, graphql_name='primaryColorHex')
    primary_team = sgqlc.types.Field(Team, graphql_name='primaryTeam')
    prime_payout_details = sgqlc.types.Field(PrimePayoutDetails, graphql_name='primePayoutDetails')
    prime_payout_history = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(PrimePayoutDetail)), graphql_name='primePayoutHistory')
    prime_settings = sgqlc.types.Field(PrimeSettings, graphql_name='primeSettings')
    profile_image_url = sgqlc.types.Field(String, graphql_name='profileImageURL', args=sgqlc.types.ArgDict((
        ('width', sgqlc.types.Arg(sgqlc.types.non_null(Int), graphql_name='width', default=None)),
))
    )
    profile_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='profileURL')
    profile_view_count = sgqlc.types.Field(Int, graphql_name='profileViewCount')
    program_agreement = sgqlc.types.Field(ProgramAgreement, graphql_name='programAgreement')
    pulse_feed = sgqlc.types.Field(Feed, graphql_name='pulseFeed')
    purchase_order = sgqlc.types.Field(PurchaseOrder, graphql_name='purchaseOrder', args=sgqlc.types.ArgDict((
        ('id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='id', default=None)),
))
    )
    quests = sgqlc.types.Field(Quests, graphql_name='quests')
    radio = sgqlc.types.Field(Radio, graphql_name='radio')
    radio_account = sgqlc.types.Field(RadioAccount, graphql_name='radioAccount')
    raid = sgqlc.types.Field(Raid, graphql_name='raid')
    raid_settings = sgqlc.types.Field(RaidSettings, graphql_name='raidSettings')
    recent_raids = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Raid)), graphql_name='recentRaids')
    recommendation_feedback = sgqlc.types.Field(RecommendationFeedbackConnection, graphql_name='recommendationFeedback', args=sgqlc.types.ArgDict((
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=5)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('type', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='type', default=None)),
))
    )
    recommendations = sgqlc.types.Field(Recommendations, graphql_name='recommendations')
    recommended_emoticon_prefix = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='recommendedEmoticonPrefix')
    relationship = sgqlc.types.Field('UserRelationship', graphql_name='relationship', args=sgqlc.types.ArgDict((
        ('target_user_id', sgqlc.types.Arg(ID, graphql_name='targetUserID', default=None)),
))
    )
    residence = sgqlc.types.Field('UserResidence', graphql_name='residence')
    rewarded_video = sgqlc.types.Field(RewardedVideo, graphql_name='rewardedVideo')
    roles = sgqlc.types.Field('UserRoles', graphql_name='roles')
    search_videos = sgqlc.types.Field('VideoConnection', graphql_name='searchVideos', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('search', sgqlc.types.Arg(VideoConnectionSearchParams, graphql_name='search', default=None)),
))
    )
    seen_creator_onboarding_content = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(CreatorOnboardingContent)), graphql_name='seenCreatorOnboardingContent')
    selected_badge = sgqlc.types.Field(Badge, graphql_name='selectedBadge')
    self = sgqlc.types.Field('UserSelfConnection', graphql_name='self')
    self_installed_extensions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ExtensionInstallationSelfEdge)), graphql_name='selfInstalledExtensions', args=sgqlc.types.ArgDict((
        ('is_mobile', sgqlc.types.Arg(Boolean, graphql_name='isMobile', default=False)),
))
    )
    settings = sgqlc.types.Field('UserSettings', graphql_name='settings')
    squad_stream = sgqlc.types.Field(SquadStream, graphql_name='squadStream')
    squad_stream_settings = sgqlc.types.Field(SquadStreamSettings, graphql_name='squadStreamSettings')
    sso_links = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(SSOLink)), graphql_name='ssoLinks', args=sgqlc.types.ArgDict((
        ('app', sgqlc.types.Arg(String, graphql_name='app', default=None)),
))
    )
    stream = sgqlc.types.Field(Stream, graphql_name='stream')
    stream_sessions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StreamSession)), graphql_name='streamSessions', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last_started_at', sgqlc.types.Arg(Time, graphql_name='lastStartedAt', default=None)),
))
    )
    stream_sessions_by_interval = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StreamSession)), graphql_name='streamSessionsByInterval', args=sgqlc.types.ArgDict((
        ('start_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='startAt', default=None)),
        ('end_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='endAt', default=None)),
))
    )
    stream_summaries = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StreamSummary)), graphql_name='streamSummaries', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('last_started_at', sgqlc.types.Arg(Time, graphql_name='lastStartedAt', default=None)),
))
    )
    stucco_packs_broadcaster = sgqlc.types.Field(sgqlc.types.list_of(StuccoPack), graphql_name='stuccoPacksBroadcaster')
    stuccos = sgqlc.types.Field(sgqlc.types.list_of(Stucco), graphql_name='stuccos')
    subscribed_channels = sgqlc.types.Field(SubscribedChannelConnection, graphql_name='subscribedChannels', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('live', sgqlc.types.Arg(Boolean, graphql_name='live', default=None)),
))
    )
    subscriber_score = sgqlc.types.Field(SubscriberScore, graphql_name='subscriberScore')
    subscription_benefits = sgqlc.types.Field(SubscriptionBenefitConnection, graphql_name='subscriptionBenefits', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('criteria', sgqlc.types.Arg(sgqlc.types.non_null(SubscriptionBenefitCriteriaInput), graphql_name='criteria', default=None)),
))
    )
    subscription_products = sgqlc.types.Field(sgqlc.types.list_of(SubscriptionProduct), graphql_name='subscriptionProducts')
    subscription_products_result = sgqlc.types.Field(sgqlc.types.non_null('SubscriptionProductsResult'), graphql_name='subscriptionProductsResult')
    subscription_settings = sgqlc.types.Field('UserSubscriptionSettings', graphql_name='subscriptionSettings')
    subscription_token = sgqlc.types.Field(SubscriptionToken, graphql_name='subscriptionToken')
    tag_analytics = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TagAnalytic)), graphql_name='tagAnalytics')
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Tag)), graphql_name='tags')
    team_memberships = sgqlc.types.Field(sgqlc.types.list_of('UserTeamMembership'), graphql_name='teamMemberships')
    timeseries_stats = sgqlc.types.Field(TimeseriesStats, graphql_name='timeseriesStats', args=sgqlc.types.ArgDict((
        ('start_at', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='startAt', default=None)),
        ('end_at', sgqlc.types.Arg(Time, graphql_name='endAt', default=None)),
        ('time_zone', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='timeZone', default=None)),
        ('granularity', sgqlc.types.Arg(Granularity, graphql_name='granularity', default='FIVE_MINUTE')),
))
    )
    tournament = sgqlc.types.Field(Tournament, graphql_name='tournament')
    twitch = sgqlc.types.Field('UserTwitchConnection', graphql_name='twitch')
    unacknowledged_subscription_events = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(UnacknowledgedSubscriptionEvent)), graphql_name='unacknowledgedSubscriptionEvents', args=sgqlc.types.ArgDict((
        ('platform', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='platform', default=None)),
))
    )
    updated_at = sgqlc.types.Field(Time, graphql_name='updatedAt')
    verification_request = sgqlc.types.Field('VerificationRequest', graphql_name='verificationRequest', args=sgqlc.types.ArgDict((
        ('address', sgqlc.types.Arg(String, graphql_name='address', default=None)),
))
    )
    video_play_referrals = sgqlc.types.Field('VideoPlayReferrals', graphql_name='videoPlayReferrals', args=sgqlc.types.ArgDict((
        ('start', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='start', default=None)),
        ('end', sgqlc.types.Arg(sgqlc.types.non_null(Time), graphql_name='end', default=None)),
        ('filter', sgqlc.types.Arg(ReferralsFilter, graphql_name='filter', default='ALL')),
        ('dimension', sgqlc.types.Arg(sgqlc.types.non_null(ReferralsDimension), graphql_name='dimension', default=None)),
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=15)),
))
    )
    video_shelves = sgqlc.types.Field('VideoShelfConnection', graphql_name='videoShelves', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('options', sgqlc.types.Arg(ShelvesOptions, graphql_name='options', default=None)),
))
    )
    video_shelves_available = sgqlc.types.Field('VideoShelfConnection', graphql_name='videoShelvesAvailable', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('options', sgqlc.types.Arg(ShelvesAvailableOptions, graphql_name='options', default=None)),
))
    )
    videos = sgqlc.types.Field('VideoConnection', graphql_name='videos', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('type', sgqlc.types.Arg(BroadcastType, graphql_name='type', default=None)),
        ('types', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BroadcastType)), graphql_name='types', default=None)),
        ('sort', sgqlc.types.Arg(VideoSort, graphql_name='sort', default='TIME')),
        ('options', sgqlc.types.Arg(VideoConnectionOptionsInput, graphql_name='options', default=None)),
))
    )
    viewable_poll = sgqlc.types.Field(Poll, graphql_name='viewablePoll')
    viewed_videos = sgqlc.types.Field('ViewedVideosConnection', graphql_name='viewedVideos', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
))
    )
    vips = sgqlc.types.Field('VIPConnection', graphql_name='vips', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    wallet_balances = sgqlc.types.Field('WalletBalances', graphql_name='walletBalances', args=sgqlc.types.ArgDict((
        ('wallet_type', sgqlc.types.Arg(WalletType, graphql_name='walletType', default=None)),
        ('best_guess_country_code', sgqlc.types.Arg(String, graphql_name='bestGuessCountryCode', default=None)),
))
    )
    watch_parties_restrictions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(WatchPartiesRestriction)), graphql_name='watchPartiesRestrictions')
    watch_party = sgqlc.types.Field('WatchPartyResult', graphql_name='watchParty', args=sgqlc.types.ArgDict((
        ('access_token', sgqlc.types.Arg(String, graphql_name='accessToken', default=None)),
        ('decorated', sgqlc.types.Arg(Boolean, graphql_name='decorated', default=False)),
))
    )
    whisper_settings = sgqlc.types.Field('WhisperSettings', graphql_name='whisperSettings')
    whisper_threads = sgqlc.types.Field('WhisperThreadConnection', graphql_name='whisperThreads', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    withholding_tax_detail = sgqlc.types.Field('WithholdingTaxDetail', graphql_name='withholdingTaxDetail')


class UserAccountHealth(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_password_reset_required', 'is_verified_email', 'password_status', 'two_factor_methods')
    is_password_reset_required = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPasswordResetRequired')
    is_verified_email = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isVerifiedEmail')
    password_status = sgqlc.types.Field(sgqlc.types.non_null(PasswordStatus), graphql_name='passwordStatus')
    two_factor_methods = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(TwoFactorMethod))), graphql_name='twoFactorMethods')


class UserAmazonConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('associates_store',)
    associates_store = sgqlc.types.Field(AssociatesStore, graphql_name='associatesStore')


class UserBlizzardConnectionLink(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('battle_tag',)
    battle_tag = sgqlc.types.Field(String, graphql_name='battleTag')


class UserConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('UserEdge')), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class UserDirectoryConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('nodes',)
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(Directory)), graphql_name='nodes')


class UserDropAwardConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('nodes', 'total_count')
    nodes = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(DropAward)), graphql_name='nodes')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class UserDropReward(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('benefit', 'game', 'id', 'image_url', 'is_connected', 'is_ios_available', 'last_awarded_at', 'name', 'required_account_link', 'total_count')
    benefit = sgqlc.types.Field(sgqlc.types.non_null(DropBenefit), graphql_name='benefit')
    game = sgqlc.types.Field('Game', graphql_name='game')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    image_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='imageURL')
    is_connected = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isConnected')
    is_ios_available = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isIosAvailable')
    last_awarded_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='lastAwardedAt')
    name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='name')
    required_account_link = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='requiredAccountLink')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class UserEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    node = sgqlc.types.Field(User, graphql_name='node')


class UserFacebookConnectionLink(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('full_name',)
    full_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='fullName')


class UserLeaderboard(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'items', 'my_position', 'seconds_remaining')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    items = sgqlc.types.Field(sgqlc.types.non_null('UserLeaderboardItemConnection'), graphql_name='items')
    my_position = sgqlc.types.Field('UserLeaderboardItem', graphql_name='myPosition')
    seconds_remaining = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='secondsRemaining')


class UserLeaderboardItem(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'rank', 'score', 'user')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    rank = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='rank')
    score = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='score')
    user = sgqlc.types.Field(User, graphql_name='user')


class UserLeaderboardItemConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('UserLeaderboardItemEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class UserLeaderboardItemEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(UserLeaderboardItem, graphql_name='node')


class UserPredictionSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('has_accepted_tos', 'is_in_restricted_region', 'is_temporary_chat_badge_enabled')
    has_accepted_tos = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasAcceptedTOS')
    is_in_restricted_region = sgqlc.types.Field(Boolean, graphql_name='isInRestrictedRegion')
    is_temporary_chat_badge_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isTemporaryChatBadgeEnabled')


class UserPredictionStatistics(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('events_total', 'events_won', 'most_recent_prediction', 'points_used', 'points_won', 'points_won_max', 'win_streak', 'win_streak_max')
    events_total = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='eventsTotal')
    events_won = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='eventsWon')
    most_recent_prediction = sgqlc.types.Field(Prediction, graphql_name='mostRecentPrediction')
    points_used = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='pointsUsed')
    points_won = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='pointsWon')
    points_won_max = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='pointsWonMax')
    win_streak = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='winStreak')
    win_streak_max = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='winStreakMax')


class UserRelationship(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('followed_at', 'prediction_statistics', 'subscription_benefit', 'subscription_tenure')
    followed_at = sgqlc.types.Field(Time, graphql_name='followedAt')
    prediction_statistics = sgqlc.types.Field(UserPredictionStatistics, graphql_name='predictionStatistics')
    subscription_benefit = sgqlc.types.Field(SubscriptionBenefit, graphql_name='subscriptionBenefit')
    subscription_tenure = sgqlc.types.Field(SubscriptionTenure, graphql_name='subscriptionTenure', args=sgqlc.types.ArgDict((
        ('tenure_method', sgqlc.types.Arg(sgqlc.types.non_null(SubscriptionTenureMethod), graphql_name='tenureMethod', default=None)),
))
    )


class UserResidence(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('country_code', 'postal_code')
    country_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='countryCode')
    postal_code = sgqlc.types.Field(String, graphql_name='postalCode')


class UserRiotConnectionLink(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class UserRoles(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_affiliate', 'is_extensions_approver', 'is_extensions_developer', 'is_global_mod', 'is_partner', 'is_site_admin', 'is_staff')
    is_affiliate = sgqlc.types.Field(Boolean, graphql_name='isAffiliate')
    is_extensions_approver = sgqlc.types.Field(Boolean, graphql_name='isExtensionsApprover')
    is_extensions_developer = sgqlc.types.Field(Boolean, graphql_name='isExtensionsDeveloper')
    is_global_mod = sgqlc.types.Field(Boolean, graphql_name='isGlobalMod')
    is_partner = sgqlc.types.Field(Boolean, graphql_name='isPartner')
    is_site_admin = sgqlc.types.Field(Boolean, graphql_name='isSiteAdmin')
    is_staff = sgqlc.types.Field(Boolean, graphql_name='isStaff')


class UserSelfBitsBadge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('current', 'id', 'next', 'next_bits', 'progress', 'tier_notification', 'total_bits')
    current = sgqlc.types.Field(Badge, graphql_name='current')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    next = sgqlc.types.Field(Badge, graphql_name='next')
    next_bits = sgqlc.types.Field(Int, graphql_name='nextBits')
    progress = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='progress')
    tier_notification = sgqlc.types.Field(BitsBadgeTierNotification, graphql_name='tierNotification')
    total_bits = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalBits')


class UserSelfConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('available_badges', 'ban_status', 'bits_badge', 'bits_leaderboard_entry', 'bits_leaderboard_item', 'bits_leaderboard_position', 'can_follow', 'can_gift', 'can_gift_in_channel', 'can_prime_subscribe', 'can_redeem_subscription', 'celebration_products', 'chat_restricted_reasons', 'display_badges', 'follower', 'friendship', 'is_channel_member', 'is_editor', 'is_founder', 'is_moderator', 'is_vip', 'last_recent_chat_message_at', 'pay_it_forward_treatment', 'prime_sub_credit_benefit', 'resub_notification', 'ritual_tokens', 'selected_badge', 'stucco_packs_viewer', 'subscriber_badge_progress', 'subscription_benefit', 'subscription_gift_count', 'subscription_tenure', 'whisper_permissions')
    available_badges = sgqlc.types.Field(sgqlc.types.list_of(Badge), graphql_name='availableBadges')
    ban_status = sgqlc.types.Field(ChatRoomBanStatus, graphql_name='banStatus')
    bits_badge = sgqlc.types.Field(UserSelfBitsBadge, graphql_name='bitsBadge')
    bits_leaderboard_entry = sgqlc.types.Field(BitsLeaderboardEntry, graphql_name='bitsLeaderboardEntry')
    bits_leaderboard_item = sgqlc.types.Field(BitsLeaderboardItem, graphql_name='bitsLeaderboardItem')
    bits_leaderboard_position = sgqlc.types.Field(BitsLeaderboard, graphql_name='bitsLeaderboardPosition')
    can_follow = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canFollow')
    can_gift = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canGift', args=sgqlc.types.ArgDict((
        ('product', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='product', default=None)),
))
    )
    can_gift_in_channel = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canGiftInChannel', args=sgqlc.types.ArgDict((
        ('product', sgqlc.types.Arg(sgqlc.types.non_null(String), graphql_name='product', default=None)),
))
    )
    can_prime_subscribe = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canPrimeSubscribe')
    can_redeem_subscription = sgqlc.types.Field(Boolean, graphql_name='canRedeemSubscription')
    celebration_products = sgqlc.types.Field(sgqlc.types.list_of('CelebrationProduct'), graphql_name='celebrationProducts')
    chat_restricted_reasons = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ChatRestrictedReason)), graphql_name='chatRestrictedReasons')
    display_badges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(Badge)), graphql_name='displayBadges')
    follower = sgqlc.types.Field(FollowerEdge, graphql_name='follower')
    friendship = sgqlc.types.Field('FriendRelationship', graphql_name='friendship')
    is_channel_member = sgqlc.types.Field(Boolean, graphql_name='isChannelMember')
    is_editor = sgqlc.types.Field(Boolean, graphql_name='isEditor')
    is_founder = sgqlc.types.Field(Boolean, graphql_name='isFounder')
    is_moderator = sgqlc.types.Field(Boolean, graphql_name='isModerator')
    is_vip = sgqlc.types.Field(Boolean, graphql_name='isVIP')
    last_recent_chat_message_at = sgqlc.types.Field(Time, graphql_name='lastRecentChatMessageAt')
    pay_it_forward_treatment = sgqlc.types.Field(PayItForwardTreatmentType, graphql_name='payItForwardTreatment')
    prime_sub_credit_benefit = sgqlc.types.Field(PrimeSubCreditBenefit, graphql_name='primeSubCreditBenefit')
    resub_notification = sgqlc.types.Field(ResubNotification, graphql_name='resubNotification')
    ritual_tokens = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(RitualToken)), graphql_name='ritualTokens')
    selected_badge = sgqlc.types.Field(Badge, graphql_name='selectedBadge')
    stucco_packs_viewer = sgqlc.types.Field(sgqlc.types.list_of(StuccoPack), graphql_name='stuccoPacksViewer')
    subscriber_badge_progress = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(SubscriberBadgeProgress)), graphql_name='subscriberBadgeProgress', args=sgqlc.types.ArgDict((
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=5)),
))
    )
    subscription_benefit = sgqlc.types.Field(SubscriptionBenefit, graphql_name='subscriptionBenefit')
    subscription_gift_count = sgqlc.types.Field(Int, graphql_name='subscriptionGiftCount')
    subscription_tenure = sgqlc.types.Field(SubscriptionTenure, graphql_name='subscriptionTenure', args=sgqlc.types.ArgDict((
        ('tenure_method', sgqlc.types.Arg(sgqlc.types.non_null(SubscriptionTenureMethod), graphql_name='tenureMethod', default=None)),
))
    )
    whisper_permissions = sgqlc.types.Field('WhisperPermissions', graphql_name='whisperPermissions')


class UserSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_host_watch_parties', 'channel_feed_enabled', 'cheer', 'has_two_factor_enabled', 'is_amazon_retail_rev_share_enabled', 'is_commerce_rev_share_enabled', 'is_create_date_hidden', 'is_directory_hidden', 'is_email_revert_success', 'is_rituals_enabled', 'is_rituals_whitelisted', 'is_sharing_activity', 'leaderboard', 'preferred_language_tag', 'visibility')
    can_host_watch_parties = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canHostWatchParties')
    channel_feed_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='channelFeedEnabled')
    cheer = sgqlc.types.Field(CheerPartnerSettings, graphql_name='cheer')
    has_two_factor_enabled = sgqlc.types.Field(Boolean, graphql_name='hasTwoFactorEnabled')
    is_amazon_retail_rev_share_enabled = sgqlc.types.Field(Boolean, graphql_name='isAmazonRetailRevShareEnabled')
    is_commerce_rev_share_enabled = sgqlc.types.Field(Boolean, graphql_name='isCommerceRevShareEnabled')
    is_create_date_hidden = sgqlc.types.Field(Boolean, graphql_name='isCreateDateHidden')
    is_directory_hidden = sgqlc.types.Field(Boolean, graphql_name='isDirectoryHidden')
    is_email_revert_success = sgqlc.types.Field(Boolean, graphql_name='isEmailRevertSuccess')
    is_rituals_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRitualsEnabled')
    is_rituals_whitelisted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRitualsWhitelisted')
    is_sharing_activity = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSharingActivity')
    leaderboard = sgqlc.types.Field(LeaderboardSettings, graphql_name='leaderboard')
    preferred_language_tag = sgqlc.types.Field(LanguageTag, graphql_name='preferredLanguageTag')
    visibility = sgqlc.types.Field(sgqlc.types.non_null(Visibility), graphql_name='visibility')


class UserSteamConnectionLink(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id',)
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')


class UserSubscriptionSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('gifts_to_followed_channels_only', 'is_badge_modifier_hidden', 'is_founder_badges_hidden', 'is_gift_count_hidden', 'is_subscription_status_hidden')
    gifts_to_followed_channels_only = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='giftsToFollowedChannelsOnly')
    is_badge_modifier_hidden = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isBadgeModifierHidden')
    is_founder_badges_hidden = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isFounderBadgesHidden')
    is_gift_count_hidden = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isGiftCountHidden')
    is_subscription_status_hidden = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSubscriptionStatusHidden')


class UserTeamMembership(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_primary', 'is_revenue_revealed', 'is_stats_revealed', 'team')
    is_primary = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPrimary')
    is_revenue_revealed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRevenueRevealed')
    is_stats_revealed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isStatsRevealed')
    team = sgqlc.types.Field(sgqlc.types.non_null(Team), graphql_name='team')


class UserTwitchConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('overwatch_league_team_preference',)
    overwatch_league_team_preference = sgqlc.types.Field(OverwatchLeagueTeamPreference, graphql_name='overwatchLeagueTeamPreference')


class UserTwitterConnectionLink(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('username',)
    username = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='username')


class UserYoutubeConnectionLink(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel_url',)
    channel_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='channelURL')


class VIPConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('VIPEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class VIPEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'granted_at', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    granted_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='grantedAt')
    node = sgqlc.types.Field(User, graphql_name='node')


class ValidateVerificationCodeError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(ValidateVerificationCodeErrorCode, graphql_name='code')


class ValidateVerificationCodePayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'request')
    error = sgqlc.types.Field(ValidateVerificationCodeError, graphql_name='error')
    request = sgqlc.types.Field('VerificationRequest', graphql_name='request')


class VendorConsentStatus(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('consent_status', 'has_user_set_consent', 'is_visible', 'name')
    consent_status = sgqlc.types.Field(sgqlc.types.non_null(ConsentStatus), graphql_name='consentStatus')
    has_user_set_consent = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasUserSetConsent')
    is_visible = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isVisible')
    name = sgqlc.types.Field(sgqlc.types.non_null(VendorName), graphql_name='name')


class VerificationRequest(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('address', 'key', 'modified', 'status')
    address = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='address')
    key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='key')
    modified = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='modified')
    status = sgqlc.types.Field(sgqlc.types.non_null(VerificationStatus), graphql_name='status')


class VerifyContactMethodPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_success', 'request')
    is_success = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSuccess')
    request = sgqlc.types.Field(VerificationRequest, graphql_name='request')


class VerifyOneTimePasswordError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code', 'message')
    code = sgqlc.types.Field(sgqlc.types.non_null(VerifyOneTimePasswordErrorCode), graphql_name='code')
    message = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='message')


class VerifyOneTimePasswordPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(VerifyOneTimePasswordError, graphql_name='error')


class VerifyRewardedVideoEligibilityCaptchaError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(VerifyRewardedVideoEligibilityCaptchaErrorCode), graphql_name='code')


class VerifyRewardedVideoEligibilityCaptchaPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error',)
    error = sgqlc.types.Field(VerifyRewardedVideoEligibilityCaptchaError, graphql_name='error')


class VerticalDirectory(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'shelf_groups', 'subtitle', 'title', 'tracking_id')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    shelf_groups = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('VerticalShelfGroup')), graphql_name='shelfGroups')
    subtitle = sgqlc.types.Field(sgqlc.types.non_null(ShelfTitle), graphql_name='subtitle')
    title = sgqlc.types.Field(sgqlc.types.non_null(ShelfTitle), graphql_name='title')
    tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='trackingID')


class VerticalShelf(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'content_context', 'id', 'subtitle', 'title', 'tracking_id', 'type')
    content = sgqlc.types.Field(sgqlc.types.non_null(ShelfContentConnection), graphql_name='content')
    content_context = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('VerticalContentContext')), graphql_name='contentContext')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    subtitle = sgqlc.types.Field(ShelfTitle, graphql_name='subtitle')
    title = sgqlc.types.Field(ShelfTitle, graphql_name='title')
    tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='trackingID')
    type = sgqlc.types.Field(sgqlc.types.non_null(VerticalShelfType), graphql_name='type')


class VerticalShelfGroup(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content_context', 'id', 'shelves', 'subtitle', 'title', 'tracking_id')
    content_context = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('VerticalContentContext')), graphql_name='contentContext')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    shelves = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(VerticalShelf)), graphql_name='shelves')
    subtitle = sgqlc.types.Field(ShelfTitle, graphql_name='subtitle')
    title = sgqlc.types.Field(ShelfTitle, graphql_name='title')
    tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='trackingID')


class VerticalSubDirectory(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content_context', 'id', 'shelf_groups', 'subtitle', 'title', 'tracking_id')
    content_context = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('VerticalContentContext')), graphql_name='contentContext')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    shelf_groups = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(VerticalShelfGroup)), graphql_name='shelfGroups')
    subtitle = sgqlc.types.Field(sgqlc.types.non_null(ShelfTitle), graphql_name='subtitle')
    title = sgqlc.types.Field(sgqlc.types.non_null(ShelfTitle), graphql_name='title')
    tracking_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='trackingID')


class Video(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('animated_preview_url', 'bookmarks', 'broadcast_type', 'clips', 'comments', 'content_tags', 'created_at', 'creator', 'deleted_at', 'description', 'download', 'duration', 'game', 'id', 'is_deleted', 'language', 'length_seconds', 'moments', 'mute_info', 'offset_seconds', 'owner', 'playback_access_token', 'preview_thumbnail_url', 'published_at', 'reactions', 'recorded_at', 'resource_restriction', 'restriction', 'scope', 'seek_previews_url', 'self', 'status', 'suggested_highlight', 'tags', 'thumbnail_urls', 'title', 'top_clips', 'updated_at', 'view_count', 'viewable_at')
    animated_preview_url = sgqlc.types.Field(String, graphql_name='animatedPreviewURL')
    bookmarks = sgqlc.types.Field('VideoBookmarkConnection', graphql_name='bookmarks', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    broadcast_type = sgqlc.types.Field(BroadcastType, graphql_name='broadcastType')
    clips = sgqlc.types.Field(ClipConnection, graphql_name='clips', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('curator_ids', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(ID)), graphql_name='curatorIDs', default=None)),
        ('sort', sgqlc.types.Arg(SortOrder, graphql_name='sort', default='ASC')),
))
    )
    comments = sgqlc.types.Field('VideoCommentConnection', graphql_name='comments', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('last', sgqlc.types.Arg(Int, graphql_name='last', default=None)),
        ('before', sgqlc.types.Arg(Cursor, graphql_name='Before', default=None)),
        ('content_offset_seconds', sgqlc.types.Arg(Int, graphql_name='contentOffsetSeconds', default=None)),
))
    )
    content_tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Tag)), graphql_name='contentTags')
    created_at = sgqlc.types.Field(Time, graphql_name='createdAt')
    creator = sgqlc.types.Field(User, graphql_name='creator')
    deleted_at = sgqlc.types.Field(Time, graphql_name='deletedAt')
    description = sgqlc.types.Field(String, graphql_name='description')
    download = sgqlc.types.Field('VideoDownload', graphql_name='download')
    duration = sgqlc.types.Field(Duration, graphql_name='duration')
    game = sgqlc.types.Field('Game', graphql_name='game')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_deleted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isDeleted')
    language = sgqlc.types.Field(String, graphql_name='language')
    length_seconds = sgqlc.types.Field(Int, graphql_name='lengthSeconds')
    moments = sgqlc.types.Field('VideoMomentConnection', graphql_name='moments', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('sort', sgqlc.types.Arg(SortOrder, graphql_name='sort', default='ASC')),
        ('types', sgqlc.types.Arg(sgqlc.types.list_of(VideoMomentType), graphql_name='types', default=None)),
        ('moment_request_type', sgqlc.types.Arg(VideoMomentRequestType, graphql_name='momentRequestType', default=None)),
))
    )
    mute_info = sgqlc.types.Field('VideoMuteInfo', graphql_name='muteInfo')
    offset_seconds = sgqlc.types.Field(Int, graphql_name='offsetSeconds')
    owner = sgqlc.types.Field(User, graphql_name='owner')
    playback_access_token = sgqlc.types.Field(PlaybackAccessToken, graphql_name='playbackAccessToken', args=sgqlc.types.ArgDict((
        ('params', sgqlc.types.Arg(sgqlc.types.non_null(PlaybackAccessTokenParams), graphql_name='params', default=None)),
))
    )
    preview_thumbnail_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='previewThumbnailURL', args=sgqlc.types.ArgDict((
        ('height', sgqlc.types.Arg(Int, graphql_name='height', default=None)),
        ('width', sgqlc.types.Arg(Int, graphql_name='width', default=None)),
))
    )
    published_at = sgqlc.types.Field(Time, graphql_name='publishedAt')
    reactions = sgqlc.types.Field(sgqlc.types.list_of(Reaction), graphql_name='reactions')
    recorded_at = sgqlc.types.Field(Time, graphql_name='recordedAt')
    resource_restriction = sgqlc.types.Field(ResourceRestriction, graphql_name='resourceRestriction')
    restriction = sgqlc.types.Field('VideoRestriction', graphql_name='restriction')
    scope = sgqlc.types.Field(VideoPrivacyScope, graphql_name='scope')
    seek_previews_url = sgqlc.types.Field(String, graphql_name='seekPreviewsURL')
    self = sgqlc.types.Field('VideoSelfEdge', graphql_name='self')
    status = sgqlc.types.Field(VideoStatus, graphql_name='status')
    suggested_highlight = sgqlc.types.Field('VideoSuggestedHighlight', graphql_name='suggestedHighlight')
    tags = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name='tags')
    thumbnail_urls = sgqlc.types.Field(sgqlc.types.list_of(String), graphql_name='thumbnailURLs', args=sgqlc.types.ArgDict((
        ('height', sgqlc.types.Arg(Int, graphql_name='height', default=None)),
        ('width', sgqlc.types.Arg(Int, graphql_name='width', default=None)),
))
    )
    title = sgqlc.types.Field(String, graphql_name='title')
    top_clips = sgqlc.types.Field(ClipConnection, graphql_name='topClips', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('criteria', sgqlc.types.Arg(VideoTopClipsInput, graphql_name='criteria', default=None)),
))
    )
    updated_at = sgqlc.types.Field(Time, graphql_name='updatedAt')
    view_count = sgqlc.types.Field(Int, graphql_name='viewCount')
    viewable_at = sgqlc.types.Field(Time, graphql_name='viewableAt')


class VideoBookmark(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'created_at', 'description', 'id', 'position_seconds', 'user')
    channel = sgqlc.types.Field(sgqlc.types.non_null(User), graphql_name='channel')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='description')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    position_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='positionSeconds')
    user = sgqlc.types.Field(sgqlc.types.non_null(User), graphql_name='user')


class VideoBookmarkConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'error', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('VideoBookmarkEdge')), graphql_name='edges')
    error = sgqlc.types.Field('VideoBookmarkConnectionError', graphql_name='error')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class VideoBookmarkConnectionError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(VideoBookmarkConnectionErrorCode, graphql_name='code')


class VideoBookmarkEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(VideoBookmark), graphql_name='node')


class VideoComment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('commenter', 'content_offset_seconds', 'created_at', 'id', 'message', 'replies', 'source', 'state', 'updated_at', 'video')
    commenter = sgqlc.types.Field(User, graphql_name='commenter')
    content_offset_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='contentOffsetSeconds')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    message = sgqlc.types.Field('VideoCommentMessage', graphql_name='message')
    replies = sgqlc.types.Field('VideoCommentConnection', graphql_name='replies', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=None)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    source = sgqlc.types.Field(sgqlc.types.non_null(VideoCommentSource), graphql_name='source')
    state = sgqlc.types.Field(sgqlc.types.non_null(VideoCommentState), graphql_name='state')
    updated_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='updatedAt')
    video = sgqlc.types.Field(Video, graphql_name='video')


class VideoCommentConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.list_of('VideoCommentEdge'), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class VideoCommentEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    node = sgqlc.types.Field(VideoComment, graphql_name='node')


class VideoCommentMessage(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('fragments', 'user_badges', 'user_color')
    fragments = sgqlc.types.Field(sgqlc.types.list_of('VideoCommentMessageFragment'), graphql_name='fragments')
    user_badges = sgqlc.types.Field(sgqlc.types.list_of(Badge), graphql_name='userBadges')
    user_color = sgqlc.types.Field(String, graphql_name='userColor')


class VideoCommentMessageFragment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('emote', 'mention', 'text')
    emote = sgqlc.types.Field(EmbeddedEmote, graphql_name='emote')
    mention = sgqlc.types.Field(User, graphql_name='mention')
    text = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='text')


class VideoConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of('VideoEdge'), graphql_name='edges')
    page_info = sgqlc.types.Field(PageInfo, graphql_name='pageInfo')
    total_count = sgqlc.types.Field(Int, graphql_name='totalCount')


class VideoDownload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('status', 'url')
    status = sgqlc.types.Field(sgqlc.types.non_null(VideoDownloadStatus), graphql_name='status')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class VideoEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(Cursor, graphql_name='cursor')
    node = sgqlc.types.Field(Video, graphql_name='node')


class VideoIngestSession(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('backup_ingest_session', 'bitrates', 'broadcaster', 'frame_drops', 'framerates', 'id', 'ingest_session', 'rtmp_session', 'starvation_events', 'stream_health', 'transcode_sessions')
    backup_ingest_session = sgqlc.types.Field(BackupIngestSession, graphql_name='backupIngestSession')
    bitrates = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StreamBitrate)), graphql_name='bitrates', args=sgqlc.types.ArgDict((
        ('started_at', sgqlc.types.Arg(Time, graphql_name='startedAt', default=None)),
        ('ended_at', sgqlc.types.Arg(Time, graphql_name='endedAt', default=None)),
))
    )
    broadcaster = sgqlc.types.Field(User, graphql_name='broadcaster')
    frame_drops = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(IngestFrameDrop)), graphql_name='frameDrops')
    framerates = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(StreamFramerate)), graphql_name='framerates', args=sgqlc.types.ArgDict((
        ('started_at', sgqlc.types.Arg(Time, graphql_name='startedAt', default=None)),
        ('ended_at', sgqlc.types.Arg(Time, graphql_name='endedAt', default=None)),
))
    )
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    ingest_session = sgqlc.types.Field(sgqlc.types.non_null(IngestSession), graphql_name='ingestSession')
    rtmp_session = sgqlc.types.Field(sgqlc.types.non_null(RTMPSession), graphql_name='rtmpSession')
    starvation_events = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(IngestStarvationEvent)), graphql_name='starvationEvents')
    stream_health = sgqlc.types.Field(IngestStreamHealth, graphql_name='streamHealth')
    transcode_sessions = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(TranscodeSession)), graphql_name='transcodeSessions')


class VideoMoment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel', 'created_at', 'description', 'details', 'duration_milliseconds', 'id', 'moments', 'position_milliseconds', 'sub_description', 'thumbnail_url', 'type', 'video')
    channel = sgqlc.types.Field(sgqlc.types.non_null(User), graphql_name='channel')
    created_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='createdAt')
    description = sgqlc.types.Field(String, graphql_name='description')
    details = sgqlc.types.Field('VideoMomentDetails', graphql_name='details')
    duration_milliseconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationMilliseconds')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    moments = sgqlc.types.Field('VideoMomentConnection', graphql_name='moments')
    position_milliseconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='positionMilliseconds')
    sub_description = sgqlc.types.Field(String, graphql_name='subDescription')
    thumbnail_url = sgqlc.types.Field(String, graphql_name='thumbnailURL')
    type = sgqlc.types.Field(sgqlc.types.non_null(VideoMomentType), graphql_name='type')
    video = sgqlc.types.Field(Video, graphql_name='video')


class VideoMomentConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('VideoMomentEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class VideoMomentEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(VideoMoment), graphql_name='node')


class VideoMuteInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('muted_segment_connection',)
    muted_segment_connection = sgqlc.types.Field('VideoMutedSegmentConnection', graphql_name='mutedSegmentConnection')


class VideoMutedSegment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('duration', 'offset')
    duration = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='duration')
    offset = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='offset')


class VideoMutedSegmentConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('nodes',)
    nodes = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(VideoMutedSegment)), graphql_name='nodes')


class VideoPlayReferrals(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('items', 'total')
    items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(AggregatedReferrals)), graphql_name='items')
    total = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='total')


class VideoRestriction(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('product_name', 'product_title', 'reason', 'type')
    product_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='productName')
    product_title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='productTitle')
    reason = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='reason')
    type = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='type')


class VideoSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_restricted', 'viewing_history')
    is_restricted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isRestricted')
    viewing_history = sgqlc.types.Field('VideoViewingHistory', graphql_name='viewingHistory')


class VideoShelf(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('collection', 'description', 'game', 'id', 'items', 'title', 'type')
    collection = sgqlc.types.Field(Collection, graphql_name='collection')
    description = sgqlc.types.Field(String, graphql_name='description')
    game = sgqlc.types.Field('Game', graphql_name='game')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    items = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('VideoShelfItem')), graphql_name='items')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(VideoShelfType), graphql_name='type')


class VideoShelfConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'max_shelf_count', 'page_info', 'total_count')
    edges = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('VideoShelfEdge')), graphql_name='edges')
    max_shelf_count = sgqlc.types.Field(Int, graphql_name='maxShelfCount')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')


class VideoShelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(VideoShelf, graphql_name='node')


class VideoStreamSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('authorized_users', 'backup_stream_keys', 'delay_seconds', 'disconnect_slate_duration_seconds', 'is_backup_enabled', 'is_delay_enabled', 'is_disconnect_slate_enabled', 'is_low_latency', 'should_archive_vods', 'stream_key')
    authorized_users = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(User)), graphql_name='authorizedUsers')
    backup_stream_keys = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('StreamKeyResult'))), graphql_name='backupStreamKeys')
    delay_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='delaySeconds')
    disconnect_slate_duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='disconnectSlateDurationSeconds')
    is_backup_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isBackupEnabled')
    is_delay_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isDelayEnabled')
    is_disconnect_slate_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isDisconnectSlateEnabled')
    is_low_latency = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isLowLatency')
    should_archive_vods = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldArchiveVODs')
    stream_key = sgqlc.types.Field(sgqlc.types.non_null('StreamKeyResult'), graphql_name='streamKey')


class VideoSuggestedHighlight(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_dismissed', 'segments', 'status')
    is_dismissed = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isDismissed')
    segments = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of('VideoSuggestedSegment')), graphql_name='segments')
    status = sgqlc.types.Field(SegmentsStatusType, graphql_name='status')


class VideoSuggestedSegment(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('end_ms', 'start_ms')
    end_ms = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='endMS')
    start_ms = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='startMS')


class VideoViewingHistory(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('position', 'updated_at')
    position = sgqlc.types.Field(Int, graphql_name='position')
    updated_at = sgqlc.types.Field(Time, graphql_name='updatedAt')


class ViewedNotificationsPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field(User, graphql_name='user')


class ViewedVideosConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges',)
    edges = sgqlc.types.Field(sgqlc.types.list_of('ViewedVideosEdge'), graphql_name='edges')


class ViewedVideosEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('history', 'node')
    history = sgqlc.types.Field(sgqlc.types.non_null(VideoViewingHistory), graphql_name='history')
    node = sgqlc.types.Field(sgqlc.types.non_null(Video), graphql_name='node')


class VisitStreamManagerPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('channel_id', 'is_success', 'viewer_id')
    channel_id = sgqlc.types.Field(ID, graphql_name='channelID')
    is_success = sgqlc.types.Field(Boolean, graphql_name='isSuccess')
    viewer_id = sgqlc.types.Field(ID, graphql_name='viewerID')


class VoteInAdPollError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(VoteInAdPollErrorCode), graphql_name='code')


class VoteInAdPollPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'vote')
    error = sgqlc.types.Field(VoteInAdPollError, graphql_name='error')
    vote = sgqlc.types.Field(AdPollVote, graphql_name='vote')


class VoteInPollByChoiceIndexPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'voter')
    error = sgqlc.types.Field('VoteInPollError', graphql_name='error')
    voter = sgqlc.types.Field(PollVoter, graphql_name='voter')


class VoteInPollError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(VoteInPollErrorCode), graphql_name='code')


class VoteInPollPayload(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'voter')
    error = sgqlc.types.Field(VoteInPollError, graphql_name='error')
    voter = sgqlc.types.Field(PollVoter, graphql_name='voter')


class WalletBalances(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('all_balances', 'eligible_currencies')
    all_balances = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Balance)), graphql_name='allBalances')
    eligible_currencies = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Currency)), graphql_name='eligibleCurrencies')


class WatchParty(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content_restriction', 'decoration', 'gti', 'id', 'progress', 'state', 'title', 'viewers_count')
    content_restriction = sgqlc.types.Field(sgqlc.types.non_null(WatchPartyContentRestriction), graphql_name='contentRestriction')
    decoration = sgqlc.types.Field('WatchPartyDecoration', graphql_name='decoration')
    gti = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='gti')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    progress = sgqlc.types.Field('WatchPartyProgress', graphql_name='progress')
    state = sgqlc.types.Field(sgqlc.types.non_null(WatchPartyState), graphql_name='state')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    viewers_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='viewersCount')


class WatchPartyDecoration(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('item', 'player')
    item = sgqlc.types.Field(sgqlc.types.non_null('WatchPartyItem'), graphql_name='item')
    player = sgqlc.types.Field('WatchPartyPlayer', graphql_name='player')


class WatchPartyError(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('code',)
    code = sgqlc.types.Field(sgqlc.types.non_null(WatchPartyErrorCode), graphql_name='code')


class WatchPartyItem(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content_rating', 'content_restriction', 'details', 'genres', 'has_children', 'id', 'is_mature', 'parent_id', 'prime_video_link', 'prime_video_rating', 'self', 'starring', 'summary', 'thumbnail_url', 'title', 'type', 'year_published')
    content_rating = sgqlc.types.Field(String, graphql_name='contentRating')
    content_restriction = sgqlc.types.Field(sgqlc.types.non_null(WatchPartyContentRestriction), graphql_name='contentRestriction')
    details = sgqlc.types.Field('WatchPartyItemDetails', graphql_name='details')
    genres = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='genres')
    has_children = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasChildren')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_mature = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isMature')
    parent_id = sgqlc.types.Field(ID, graphql_name='parentID')
    prime_video_link = sgqlc.types.Field(String, graphql_name='primeVideoLink')
    prime_video_rating = sgqlc.types.Field(PrimeVideoRating, graphql_name='primeVideoRating')
    self = sgqlc.types.Field('WatchPartyItemSelfEdge', graphql_name='self')
    starring = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(String))), graphql_name='starring')
    summary = sgqlc.types.Field(String, graphql_name='summary')
    thumbnail_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='thumbnailURL')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    type = sgqlc.types.Field(sgqlc.types.non_null(WatchPartyItemType), graphql_name='type')
    year_published = sgqlc.types.Field(Int, graphql_name='yearPublished')


class WatchPartyItemConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'error', 'homepage_browse_link', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WatchPartyItemEdge'))), graphql_name='edges')
    error = sgqlc.types.Field(WatchPartyError, graphql_name='error')
    homepage_browse_link = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='homepageBrowseLink')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class WatchPartyItemEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(WatchPartyItem), graphql_name='node')


class WatchPartyItemEligibility(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('can_view', 'reason')
    can_view = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canView')
    reason = sgqlc.types.Field(String, graphql_name='reason')


class WatchPartyItemSelfEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('eligibility', 'will_show_prime_upsell')
    eligibility = sgqlc.types.Field(sgqlc.types.non_null(WatchPartyItemEligibility), graphql_name='eligibility')
    will_show_prime_upsell = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='willShowPrimeUpsell')


class WatchPartyPlayer(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('device_proxy_base_url', 'sdk_init', 'token')
    device_proxy_base_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='deviceProxyBaseURL')
    sdk_init = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='sdkInit')
    token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='token')


class WatchPartyProgress(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('duration_seconds', 'position_seconds', 'start')
    duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationSeconds')
    position_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='positionSeconds')
    start = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='start')


class WatchPartyResult(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('error', 'session')
    error = sgqlc.types.Field(WatchPartyError, graphql_name='error')
    session = sgqlc.types.Field(WatchParty, graphql_name='session')


class WhisperMessage(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('content', 'deleted_at', 'edited_at', 'from_', 'id', 'nonce', 'sent_at', 'thread')
    content = sgqlc.types.Field(sgqlc.types.non_null(MessageBody), graphql_name='content')
    deleted_at = sgqlc.types.Field(Time, graphql_name='deletedAt')
    edited_at = sgqlc.types.Field(Time, graphql_name='editedAt')
    from_ = sgqlc.types.Field(sgqlc.types.non_null(User), graphql_name='from')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    nonce = sgqlc.types.Field(String, graphql_name='nonce')
    sent_at = sgqlc.types.Field(sgqlc.types.non_null(Time), graphql_name='sentAt')
    thread = sgqlc.types.Field(sgqlc.types.non_null('WhisperThread'), graphql_name='thread')


class WhisperMessageConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WhisperMessageEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')


class WhisperMessageEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(WhisperMessage), graphql_name='node')


class WhisperPermissions(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_stranger_blocked', 'receive', 'send')
    is_stranger_blocked = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isStrangerBlocked')
    receive = sgqlc.types.Field(WhisperPermissionType, graphql_name='receive')
    send = sgqlc.types.Field(WhisperPermissionType, graphql_name='send')


class WhisperSettings(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('is_blocking_whispers_from_strangers', 'is_whisper_banned')
    is_blocking_whispers_from_strangers = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isBlockingWhispersFromStrangers')
    is_whisper_banned = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isWhisperBanned')


class WhisperSpamInfo(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('last_marked_not_spam_at', 'likelihood')
    last_marked_not_spam_at = sgqlc.types.Field(Time, graphql_name='lastMarkedNotSpamAt')
    likelihood = sgqlc.types.Field(WhisperSpamLikelihood, graphql_name='likelihood')


class WhisperThread(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('id', 'is_archived', 'is_muted', 'last_message', 'messages', 'participants', 'spam_info', 'unread_messages_count', 'user_last_message_read', 'whitelisted_until')
    id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='id')
    is_archived = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isArchived')
    is_muted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isMuted')
    last_message = sgqlc.types.Field(WhisperMessage, graphql_name='lastMessage')
    messages = sgqlc.types.Field(WhisperMessageConnection, graphql_name='messages', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
))
    )
    participants = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(User)), graphql_name='participants')
    spam_info = sgqlc.types.Field(WhisperSpamInfo, graphql_name='spamInfo')
    unread_messages_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='unreadMessagesCount')
    user_last_message_read = sgqlc.types.Field(WhisperMessage, graphql_name='userLastMessageRead')
    whitelisted_until = sgqlc.types.Field(Time, graphql_name='whitelistedUntil')


class WhisperThreadConnection(sgqlc.types.relay.Connection):
    __schema__ = schema
    __field_names__ = ('edges', 'page_info', 'total_count', 'total_unread_count')
    edges = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null('WhisperThreadEdge'))), graphql_name='edges')
    page_info = sgqlc.types.Field(sgqlc.types.non_null(PageInfo), graphql_name='pageInfo')
    total_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='totalCount')
    total_unread_count = sgqlc.types.Field(Int, graphql_name='totalUnreadCount')


class WhisperThreadEdge(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('cursor', 'node')
    cursor = sgqlc.types.Field(sgqlc.types.non_null(Cursor), graphql_name='cursor')
    node = sgqlc.types.Field(sgqlc.types.non_null(WhisperThread), graphql_name='node')


class WithholdingTaxDetail(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('royalty_tax_rate', 'service_tax_rate')
    royalty_tax_rate = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='royaltyTaxRate')
    service_tax_rate = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='serviceTaxRate')


class Xsolla(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('iframe_url', 'is_sandbox', 'token')
    iframe_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='iframeURL')
    is_sandbox = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSandbox')
    token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='token')


class XsollaConfigs(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('iframe_url', 'token', 'is_sandbox')
    iframe_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='iframeURL')
    token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='token')
    is_sandbox = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isSandbox')


class ZuoraConfigs(sgqlc.types.Type):
    __schema__ = schema
    __field_names__ = ('external_account_id', 'hosted_page_id', 'hosted_page_url', 'public_key', 'signature', 'tenant_id', 'token')
    external_account_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='externalAccountID')
    hosted_page_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='hostedPageID')
    hosted_page_url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='hostedPageURL')
    public_key = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='publicKey')
    signature = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='signature')
    tenant_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='tenantID')
    token = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='token')


class BitsAdOffer(sgqlc.types.Type, BitsOffer):
    __schema__ = schema
    __field_names__ = ()


class BitsBundleOffer(sgqlc.types.Type, BitsOffer):
    __schema__ = schema
    __field_names__ = ('amount', 'asin', 'currency_code', 'discount', 'includes_vat', 'is_promo', 'price', 'promotion', 'url')
    amount = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='amount')
    asin = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='asin')
    currency_code = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='currencyCode')
    discount = sgqlc.types.Field(sgqlc.types.non_null(Float), graphql_name='discount')
    includes_vat = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='includesVAT')
    is_promo = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isPromo')
    price = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='price')
    promotion = sgqlc.types.Field(BitsPromotion, graphql_name='promotion')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')


class BitsKeyCode(sgqlc.types.Type, Claimable):
    __schema__ = schema
    __field_names__ = ()


class BitsKeyCodeSelfClaimEdge(sgqlc.types.Type, SelfClaimEdge):
    __schema__ = schema
    __field_names__ = ()


class CelebrationProduct(sgqlc.types.Type, ProductCatalogItem):
    __schema__ = schema
    __field_names__ = ('intensity', 'is_enabled', 'potential_offers')
    intensity = sgqlc.types.Field(sgqlc.types.non_null(CelebrationIntensity), graphql_name='intensity')
    is_enabled = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isEnabled')
    potential_offers = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Offer)), graphql_name='potentialOffers')


class CelebrationProductBenefit(sgqlc.types.Type, ProductCatalogBenefit):
    __schema__ = schema
    __field_names__ = ()


class ChannelModerationActionOnAutomodLevelEntry(sgqlc.types.Type, ChannelModerationActionEntry):
    __schema__ = schema
    __field_names__ = ('automod_new_properties', 'automod_old_properties', 'automod_previous_levels', 'automod_updated_levels')
    automod_new_properties = sgqlc.types.Field(AutoModProperties, graphql_name='automodNewProperties')
    automod_old_properties = sgqlc.types.Field(AutoModProperties, graphql_name='automodOldProperties')
    automod_previous_levels = sgqlc.types.Field(AutoModLevels, graphql_name='automodPreviousLevels')
    automod_updated_levels = sgqlc.types.Field(AutoModLevels, graphql_name='automodUpdatedLevels')


class ChannelModerationActionOnAutomodTermEntry(sgqlc.types.Type, ChannelModerationActionEntry):
    __schema__ = schema
    __field_names__ = ('is_from_automod', 'terms')
    is_from_automod = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isFromAutomod')
    terms = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='terms')


class ChannelModerationActionOnChannelEntry(sgqlc.types.Type, ChannelModerationActionEntry):
    __schema__ = schema
    __field_names__ = ('is_auto_hosted', 'is_hosted_after_raiding', 'should_reveal_viewer_count', 'target', 'viewer_count')
    is_auto_hosted = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAutoHosted')
    is_hosted_after_raiding = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isHostedAfterRaiding')
    should_reveal_viewer_count = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='shouldRevealViewerCount')
    target = sgqlc.types.Field(User, graphql_name='target')
    viewer_count = sgqlc.types.Field(Int, graphql_name='viewerCount')


class ChannelModerationActionOnChatMessageEntry(sgqlc.types.Type, ChannelModerationActionEntry):
    __schema__ = schema
    __field_names__ = ('message_body', 'message_id', 'message_sender')
    message_body = sgqlc.types.Field(String, graphql_name='messageBody')
    message_id = sgqlc.types.Field(ID, graphql_name='messageID')
    message_sender = sgqlc.types.Field(User, graphql_name='messageSender')


class ChannelModerationActionOnChatModeEntry(sgqlc.types.Type, ChannelModerationActionEntry):
    __schema__ = schema
    __field_names__ = ('duration_seconds',)
    duration_seconds = sgqlc.types.Field(Int, graphql_name='durationSeconds')


class ChannelModerationActionOnUnbanRequestsEntry(sgqlc.types.Type, ChannelModerationActionEntry):
    __schema__ = schema
    __field_names__ = ('reason', 'target')
    reason = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='reason')
    target = sgqlc.types.Field(User, graphql_name='target')


class ChannelModerationActionOnUserEntry(sgqlc.types.Type, ChannelModerationActionEntry):
    __schema__ = schema
    __field_names__ = ('duration_seconds', 'reason', 'target')
    duration_seconds = sgqlc.types.Field(Int, graphql_name='durationSeconds')
    reason = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='reason')
    target = sgqlc.types.Field(User, graphql_name='target')


class ChannelModerationActionOtherEntry(sgqlc.types.Type, ChannelModerationActionEntry):
    __schema__ = schema
    __field_names__ = ()


class ComponentView(sgqlc.types.Type, ExtensionView):
    __schema__ = schema
    __field_names__ = ('aspect_ratio_x', 'aspect_ratio_y', 'can_link_external_content', 'has_autoscale', 'scale_pixels', 'target_height')
    aspect_ratio_x = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='aspectRatioX')
    aspect_ratio_y = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='aspectRatioY')
    can_link_external_content = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canLinkExternalContent')
    has_autoscale = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='hasAutoscale')
    scale_pixels = sgqlc.types.Field(Int, graphql_name='scalePixels')
    target_height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='targetHeight')


class ConfigView(sgqlc.types.Type, ExtensionView):
    __schema__ = schema
    __field_names__ = ('can_link_external_content',)
    can_link_external_content = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canLinkExternalContent')


class DashboardActivityFeedActivityAutoHosting(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('host', 'viewer_count')
    host = sgqlc.types.Field(User, graphql_name='host')
    viewer_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='viewerCount')


class DashboardActivityFeedActivityBitsUsage(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('amount', 'is_anonymous', 'user')
    amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='amount')
    is_anonymous = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAnonymous')
    user = sgqlc.types.Field(User, graphql_name='user')


class DashboardActivityFeedActivityBoostComplete(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('goal_progress', 'goal_target', 'purchaser', 'quantity')
    goal_progress = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='goalProgress')
    goal_target = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='goalTarget')
    purchaser = sgqlc.types.Field(User, graphql_name='purchaser')
    quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='quantity')


class DashboardActivityFeedActivityBoostStart(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('goal_progress', 'goal_target', 'purchaser', 'quantity')
    goal_progress = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='goalProgress')
    goal_target = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='goalTarget')
    purchaser = sgqlc.types.Field(User, graphql_name='purchaser')
    quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='quantity')


class DashboardActivityFeedActivityCelebrationPurchaseEvent(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('effect', 'intensity', 'purchasing_user')
    effect = sgqlc.types.Field(sgqlc.types.non_null(CelebrationEffect), graphql_name='effect')
    intensity = sgqlc.types.Field(sgqlc.types.non_null(CelebrationIntensity), graphql_name='intensity')
    purchasing_user = sgqlc.types.Field(User, graphql_name='purchasingUser')


class DashboardActivityFeedActivityCommunityPointsReward(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('redeeming_user', 'redemption', 'title', 'user_input')
    redeeming_user = sgqlc.types.Field(User, graphql_name='redeemingUser')
    redemption = sgqlc.types.Field(CommunityPointsCustomRewardRedemption, graphql_name='redemption')
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')
    user_input = sgqlc.types.Field(String, graphql_name='userInput')


class DashboardActivityFeedActivityCommunitySubscriptionGifting(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('gift_quantity', 'gifted_months', 'gifter', 'is_anonymous', 'recipients', 'tier')
    gift_quantity = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='giftQuantity')
    gifted_months = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='giftedMonths')
    gifter = sgqlc.types.Field(User, graphql_name='gifter')
    is_anonymous = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAnonymous')
    recipients = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(User)), graphql_name='recipients')
    tier = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionTier), graphql_name='tier')


class DashboardActivityFeedActivityCopoGoalEnd(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('goal_amount', 'goal_id', 'goal_status', 'goal_title', 'goal_type', 'points_contributed', 'points_name')
    goal_amount = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='goalAmount')
    goal_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='goalID')
    goal_status = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCommunityGoalStatus), graphql_name='goalStatus')
    goal_title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='goalTitle')
    goal_type = sgqlc.types.Field(sgqlc.types.non_null(CommunityPointsCommunityGoalType), graphql_name='goalType')
    points_contributed = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='pointsContributed')
    points_name = sgqlc.types.Field(String, graphql_name='pointsName')


class DashboardActivityFeedActivityDropClaimWindowOpen(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('drop',)
    drop = sgqlc.types.Field(sgqlc.types.non_null(DropObject), graphql_name='drop')


class DashboardActivityFeedActivityFollowing(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('follower',)
    follower = sgqlc.types.Field(User, graphql_name='follower')


class DashboardActivityFeedActivityHosting(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('host', 'viewer_count')
    host = sgqlc.types.Field(User, graphql_name='host')
    viewer_count = sgqlc.types.Field(Int, graphql_name='viewerCount')


class DashboardActivityFeedActivityHypeTrainEvent(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('completed_level', 'hype_train_id', 'total_bits_amount', 'total_subs_count', 'type')
    completed_level = sgqlc.types.Field(Int, graphql_name='completedLevel')
    hype_train_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='hypeTrainID')
    total_bits_amount = sgqlc.types.Field(Int, graphql_name='totalBitsAmount')
    total_subs_count = sgqlc.types.Field(Int, graphql_name='totalSubsCount')
    type = sgqlc.types.Field(sgqlc.types.non_null(HypeTrainEventType), graphql_name='type')


class DashboardActivityFeedActivityIndividualSubscriptionGifting(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('gifted_months', 'gifter', 'is_anonymous', 'recipient', 'tier')
    gifted_months = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='giftedMonths')
    gifter = sgqlc.types.Field(User, graphql_name='gifter')
    is_anonymous = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='isAnonymous')
    recipient = sgqlc.types.Field(User, graphql_name='recipient')
    tier = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionTier), graphql_name='tier')


class DashboardActivityFeedActivityIngestSessionStarting(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ()


class DashboardActivityFeedActivityPrimeResubscribing(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('duration_months', 'message', 'message_content', 'resubscriber')
    duration_months = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationMonths')
    message = sgqlc.types.Field(String, graphql_name='message')
    message_content = sgqlc.types.Field(MessageContent, graphql_name='messageContent')
    resubscriber = sgqlc.types.Field(User, graphql_name='resubscriber')


class DashboardActivityFeedActivityPrimeSubscribing(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('subscriber',)
    subscriber = sgqlc.types.Field(User, graphql_name='subscriber')


class DashboardActivityFeedActivityRaiding(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('party_size', 'raider', 'viewer_count')
    party_size = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='partySize')
    raider = sgqlc.types.Field(User, graphql_name='raider')
    viewer_count = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='viewerCount')


class DashboardActivityFeedActivityResubscribing(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('duration_months', 'message', 'message_content', 'multi_month_duration', 'multi_month_tenure', 'resubscriber', 'tier')
    duration_months = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='durationMonths')
    message = sgqlc.types.Field(String, graphql_name='message')
    message_content = sgqlc.types.Field(MessageContent, graphql_name='messageContent')
    multi_month_duration = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='multiMonthDuration')
    multi_month_tenure = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='multiMonthTenure')
    resubscriber = sgqlc.types.Field(User, graphql_name='resubscriber')
    tier = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionTier), graphql_name='tier')


class DashboardActivityFeedActivitySubscribing(sgqlc.types.Type, DashboardActivityFeedActivity):
    __schema__ = schema
    __field_names__ = ('multi_month_duration', 'multi_month_tenure', 'subscriber', 'tier')
    multi_month_duration = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='multiMonthDuration')
    multi_month_tenure = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='multiMonthTenure')
    subscriber = sgqlc.types.Field(User, graphql_name='subscriber')
    tier = sgqlc.types.Field(sgqlc.types.non_null(SubscriptionTier), graphql_name='tier')


class DefaultPanel(sgqlc.types.Type, Panel):
    __schema__ = schema
    __field_names__ = ('description', 'image_url', 'link_url', 'title')
    description = sgqlc.types.Field(String, graphql_name='description')
    image_url = sgqlc.types.Field(String, graphql_name='imageURL')
    link_url = sgqlc.types.Field(String, graphql_name='linkURL')
    title = sgqlc.types.Field(String, graphql_name='title')


class EventBasedDrop(sgqlc.types.Type, DropType):
    __schema__ = schema
    __field_names__ = ('claim_duration_seconds', 'conditions', 'mission_description', 'mission_name')
    claim_duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='claimDurationSeconds')
    conditions = sgqlc.types.Field(sgqlc.types.non_null(sgqlc.types.list_of(sgqlc.types.non_null(DropEventCondition))), graphql_name='conditions')
    mission_description = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='missionDescription')
    mission_name = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='missionName')


class ExtensionPanel(sgqlc.types.Type, Panel):
    __schema__ = schema
    __field_names__ = ('slot_id',)
    slot_id = sgqlc.types.Field(sgqlc.types.non_null(ID), graphql_name='slotID')


class Game(sgqlc.types.Type, Directory):
    __schema__ = schema
    __field_names__ = ('active_drop_campaigns', 'box_art_url', 'channels_count', 'clips', 'description', 'drop_account_link', 'enhanced_experiences_clients', 'extension_recommendations', 'giant_bomb_id', 'logo_url', 'popularity_score', 'presto_id', 'self', 'tags', 'videos')
    active_drop_campaigns = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(DropCampaign)), graphql_name='activeDropCampaigns')
    box_art_url = sgqlc.types.Field(String, graphql_name='boxArtURL', args=sgqlc.types.ArgDict((
        ('width', sgqlc.types.Arg(Int, graphql_name='width', default=None)),
        ('height', sgqlc.types.Arg(Int, graphql_name='height', default=None)),
))
    )
    channels_count = sgqlc.types.Field(Int, graphql_name='channelsCount')
    clips = sgqlc.types.Field(ClipConnection, graphql_name='clips', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('criteria', sgqlc.types.Arg(GameClipsInput, graphql_name='criteria', default=None)),
))
    )
    description = sgqlc.types.Field(String, graphql_name='description')
    drop_account_link = sgqlc.types.Field(DropAccountLink, graphql_name='dropAccountLink')
    enhanced_experiences_clients = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(EnhancedExperiencesClient)), graphql_name='enhancedExperiencesClients', args=sgqlc.types.ArgDict((
        ('organization_id', sgqlc.types.Arg(sgqlc.types.non_null(ID), graphql_name='organizationID', default=None)),
))
    )
    extension_recommendations = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(ExtensionRecommendation)), graphql_name='extensionRecommendations')
    giant_bomb_id = sgqlc.types.Field(ID, graphql_name='giantBombID')
    logo_url = sgqlc.types.Field(String, graphql_name='logoURL', args=sgqlc.types.ArgDict((
        ('width', sgqlc.types.Arg(Int, graphql_name='width', default=None)),
        ('height', sgqlc.types.Arg(Int, graphql_name='height', default=None)),
))
    )
    popularity_score = sgqlc.types.Field(Int, graphql_name='popularityScore')
    presto_id = sgqlc.types.Field(ID, graphql_name='prestoID')
    self = sgqlc.types.Field(GameSelfConnection, graphql_name='self')
    tags = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null(Tag)), graphql_name='tags', args=sgqlc.types.ArgDict((
        ('limit', sgqlc.types.Arg(Int, graphql_name='limit', default=5)),
        ('tag_type', sgqlc.types.Arg(sgqlc.types.non_null(TagType), graphql_name='tagType', default=None)),
))
    )
    videos = sgqlc.types.Field(VideoConnection, graphql_name='videos', args=sgqlc.types.ArgDict((
        ('first', sgqlc.types.Arg(Int, graphql_name='first', default=10)),
        ('after', sgqlc.types.Arg(Cursor, graphql_name='after', default=None)),
        ('languages', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(String)), graphql_name='languages', default=None)),
        ('types', sgqlc.types.Arg(sgqlc.types.list_of(sgqlc.types.non_null(BroadcastType)), graphql_name='types', default=None)),
        ('sort', sgqlc.types.Arg(VideoSort, graphql_name='sort', default='TIME')),
))
    )


class GiftCardCode(sgqlc.types.Type, Claimable):
    __schema__ = schema
    __field_names__ = ()


class GiftCardCodeSelfClaimEdge(sgqlc.types.Type, SelfClaimEdge):
    __schema__ = schema
    __field_names__ = ()


class HiddenView(sgqlc.types.Type, ExtensionView):
    __schema__ = schema
    __field_names__ = ('can_link_external_content',)
    can_link_external_content = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canLinkExternalContent')


class HypeTrainBadgeReward(sgqlc.types.Type, HypeTrainReward):
    __schema__ = schema
    __field_names__ = ('badge',)
    badge = sgqlc.types.Field(Badge, graphql_name='badge')


class HypeTrainEmoteReward(sgqlc.types.Type, HypeTrainReward):
    __schema__ = schema
    __field_names__ = ('emote',)
    emote = sgqlc.types.Field(Emote, graphql_name='emote')


class InterruptScheduleBoundsError(sgqlc.types.Type, InterruptScheduleError):
    __schema__ = schema
    __field_names__ = ('maximum', 'minimum')
    maximum = sgqlc.types.Field(Int, graphql_name='maximum')
    minimum = sgqlc.types.Field(Int, graphql_name='minimum')


class InterruptScheduleStandardError(sgqlc.types.Type, InterruptScheduleError):
    __schema__ = schema
    __field_names__ = ()


class LinkOEmbed(sgqlc.types.Type, OEmbed):
    __schema__ = schema
    __field_names__ = ()


class LiveConfigView(sgqlc.types.Type, ExtensionView):
    __schema__ = schema
    __field_names__ = ('can_link_external_content',)
    can_link_external_content = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canLinkExternalContent')


class ManualChannelChallenge(sgqlc.types.Type, ChannelChallenge):
    __schema__ = schema
    __field_names__ = ('title',)
    title = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='title')


class ManualTriggerBasedDrop(sgqlc.types.Type, DropType):
    __schema__ = schema
    __field_names__ = ('claim_duration_seconds',)
    claim_duration_seconds = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='claimDurationSeconds')


class MobileView(sgqlc.types.Type, ExtensionView):
    __schema__ = schema
    __field_names__ = ()


class PanelView(sgqlc.types.Type, ExtensionView):
    __schema__ = schema
    __field_names__ = ('can_link_external_content', 'height')
    can_link_external_content = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canLinkExternalContent')
    height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='height')


class PhotoOEmbed(sgqlc.types.Type, OEmbed):
    __schema__ = schema
    __field_names__ = ('height', 'url', 'width')
    height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='height')
    url = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='url')
    width = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='width')


class Playing(sgqlc.types.Type, Activity):
    __schema__ = schema
    __field_names__ = ('game',)
    game = sgqlc.types.Field(Game, graphql_name='game')


class RichOEmbed(sgqlc.types.Type, OEmbed):
    __schema__ = schema
    __field_names__ = ('height', 'html', 'width')
    height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='height')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    width = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='width')


class SocialStream(sgqlc.types.Type, RecommendedStream):
    __schema__ = schema
    __field_names__ = ('friend',)
    friend = sgqlc.types.Field(User, graphql_name='friend')


class Streaming(sgqlc.types.Type, Activity):
    __schema__ = schema
    __field_names__ = ('stream',)
    stream = sgqlc.types.Field(Stream, graphql_name='stream')


class TimeBasedDrop(sgqlc.types.Type, DropType):
    __schema__ = schema
    __field_names__ = ('precondition_drops', 'required_minutes_watched', 'self')
    precondition_drops = sgqlc.types.Field(sgqlc.types.list_of(sgqlc.types.non_null('TimeBasedDrop')), graphql_name='preconditionDrops')
    required_minutes_watched = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='requiredMinutesWatched')
    self = sgqlc.types.Field(sgqlc.types.non_null(TimeBasedDropSelfEdge), graphql_name='self')


class VideoOEmbed(sgqlc.types.Type, OEmbed):
    __schema__ = schema
    __field_names__ = ('height', 'html', 'width')
    height = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='height')
    html = sgqlc.types.Field(sgqlc.types.non_null(String), graphql_name='html')
    width = sgqlc.types.Field(sgqlc.types.non_null(Int), graphql_name='width')


class VideoOverlayView(sgqlc.types.Type, ExtensionView):
    __schema__ = schema
    __field_names__ = ('can_link_external_content',)
    can_link_external_content = sgqlc.types.Field(sgqlc.types.non_null(Boolean), graphql_name='canLinkExternalContent')


class Watching(sgqlc.types.Type, Activity):
    __schema__ = schema
    __field_names__ = ('user',)
    user = sgqlc.types.Field(User, graphql_name='user')



########################################################################
# Unions
########################################################################
class ChallengeEffectDetails(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (ChallengeUseBitsEffectDetails,)


class ChallengeEffectSettingsDetails(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (ChallengeUseBitsEffectSettingsDetails,)


class CollectionItem(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Video,)


class CompetitionParticipant(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (CompetitionPlayer, CompetitionTeam)


class FeaturedItemContent(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Stream, User, Video)


class FeedEmbed(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Clip, LinkOEmbed, PhotoOEmbed, RichOEmbed, Video, VideoOEmbed)


class FeedItemContent(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Clip, Post, Share, Stream, Video)


class FormatTypeDetails(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (LeaderboardDetails,)


class FragmentContent(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (AutoMod, CheermoteToken, Emote, RoomMessageGroupMention, User)


class FriendRelationship(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (FriendEdge, IncomingFriendRequestEdge, OutgoingFriendRequestEdge)


class ModLogsMessageResult(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (AutoModCaughtMessage, ModLogsMessage, ModLogsTargetedModActionsEntry)


class OnsiteNotificationContent(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Clip, Game, OnsiteNotificationExternalLink, User, Video, VideoComment)


class PersonalSectionChannelContent(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Stream, VideoConnection)


class PersonalSectionItem(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (PersonalSectionChannel,)


class PersonalSectionTitleToken(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (PersonalSectionTextToken, User)


class Platform(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (PlayStation,)


class PostEmbed(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Clip, LinkOEmbed, PhotoOEmbed, RichOEmbed, Video, VideoOEmbed)


class PredictionEventActor(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (ExtensionClient, User)


class PremiereItem(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Video,)


class QuickActionLayoutItem(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (QuickAction, QuickActionFolder)


class RadioContentItem(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (RadioPlaylist, RadioRecentlyPlayed)


class ReactableContent(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Clip, Post, Stream, Video)


class RecommendationFeedbackContent(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Channel, Game, Video)


class RoomMessageItem(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (RoomMessage,)


class SearchForItem(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Game, User, Video)


class SearchSuggestionContent(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (SearchSuggestionCategory, SearchSuggestionChannel)


class ShareTarget(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Clip, Post, Stream, Video)


class ShelfContent(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Clip, Game, Stream, Tag, Video)


class ShelfTitleContext(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Game,)


class ShortVideoContent(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Clip,)


class StreamKeyResult(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (StreamKey, StreamKeyError)


class SubscriptionProductsResult(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (SubscriptionProductsConnection, SubscriptionProductsError)


class TaggedContent(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Clip, Game, Stream, User, Video)


class TitleTokenNode(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (DateToken, Game, IntegerToken, Tag, TextToken, User)


class VerticalContentContext(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Game, Tag)


class VideoMomentDetails(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (GameChangeMomentDetails, HearthstoneMomentDetails, OverwatchMomentDetails, PUBGMomentDetails)


class VideoShelfItem(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (Clip, Video)


class WatchPartyItemDetails(sgqlc.types.Union):
    __schema__ = schema
    __types__ = (EpisodeDetails, MovieDetails, SeasonDetails, SeriesDetails)



########################################################################
# Schema Entry Points
########################################################################
schema.query_type = Query
schema.mutation_type = Mutation
schema.subscription_type = None

